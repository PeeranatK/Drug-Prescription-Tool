{"ast":null,"code":"import { useRef } from 'react';\n/**\n * Used in forwardRef components to ensure ref exists\n * so that calling ref.current shall not throw error\n *\n * @example\n *\n * const Button = forwardRef((props, ref) => {\n *\n *   // if ref exists, buttonRef = ref\n *   // otherwise buttonRef is a newly created ref\n *   const buttonRef = useEnsuredRef(ref);\n *\n *   useEffect(() => {\n *     // buttonRef will not be null even if ref is null\n *     buttonRef.current.focus();\n *   }, []);\n *\n *   return <button ref={buttonRef} {...props} />;\n * });\n *\n */\n\nexport default function useEnsuredRef(ref) {\n  var dumpRef = useRef();\n  if (ref) {\n    return ref;\n  }\n  return dumpRef;\n}","map":{"version":3,"names":["useRef","useEnsuredRef","ref","dumpRef"],"sources":["/Users/peeranat/Desktop/Project/fontend/node_modules/rsuite/esm/utils/useEnsuredRef.js"],"sourcesContent":["import { useRef } from 'react';\n/**\n * Used in forwardRef components to ensure ref exists\n * so that calling ref.current shall not throw error\n *\n * @example\n *\n * const Button = forwardRef((props, ref) => {\n *\n *   // if ref exists, buttonRef = ref\n *   // otherwise buttonRef is a newly created ref\n *   const buttonRef = useEnsuredRef(ref);\n *\n *   useEffect(() => {\n *     // buttonRef will not be null even if ref is null\n *     buttonRef.current.focus();\n *   }, []);\n *\n *   return <button ref={buttonRef} {...props} />;\n * });\n *\n */\n\nexport default function useEnsuredRef(ref) {\n  var dumpRef = useRef();\n\n  if (ref) {\n    return ref;\n  }\n\n  return dumpRef;\n}"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,aAAa,CAACC,GAAG,EAAE;EACzC,IAAIC,OAAO,GAAGH,MAAM,EAAE;EAEtB,IAAIE,GAAG,EAAE;IACP,OAAOA,GAAG;EACZ;EAEA,OAAOC,OAAO;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}