{"ast":null,"code":"import { useState, useMemo } from 'react';\nimport slice from 'lodash/slice';\nimport { shallowEqual, useUpdateEffect } from '../utils';\nimport { findNodeOfTree } from '../utils/treeUtils';\nimport { attachParent } from '../utils/attachParent';\nexport function getColumnsAndPaths(data, value, options) {\n  var childrenKey = options.childrenKey,\n    valueKey = options.valueKey,\n    isAttachChildren = options.isAttachChildren;\n  var columns = [];\n  var paths = [];\n  var findNode = function findNode(items) {\n    var _loop = function _loop(i) {\n      var children = items[i][childrenKey];\n      if (shallowEqual(items[i][valueKey], value)) {\n        return {\n          v: {\n            items: items,\n            active: items[i]\n          }\n        };\n      } else if (children) {\n        var node = findNode(children);\n        if (node) {\n          columns.push(children.map(function (item) {\n            return attachParent(item, items[i]);\n          }));\n          paths.push(node.active);\n          return {\n            v: {\n              items: items,\n              active: items[i]\n            }\n          };\n        }\n      }\n    };\n    for (var i = 0; i < items.length; i += 1) {\n      var _ret = _loop(i);\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n    return null;\n  };\n  var selectedNode = findNode(data);\n  columns.push(data);\n  if (selectedNode) {\n    paths.push(selectedNode.active);\n  }\n  if (isAttachChildren) {\n    var valueToNode = findNodeOfTree(data, function (item) {\n      return item[valueKey] === value;\n    });\n    if (valueToNode !== null && valueToNode !== void 0 && valueToNode[childrenKey]) {\n      columns.unshift(valueToNode[childrenKey]);\n    }\n  }\n  columns.reverse();\n  paths.reverse();\n  return {\n    columns: columns,\n    paths: paths\n  };\n}\nexport function usePaths(params) {\n  var data = params.data,\n    valueKey = params.valueKey,\n    childrenKey = params.childrenKey,\n    value = params.value;\n  var _useMemo = useMemo(function () {\n      return getColumnsAndPaths(data, value, {\n        valueKey: valueKey,\n        childrenKey: childrenKey\n      });\n    }, [data, value, valueKey, childrenKey]),\n    columns = _useMemo.columns,\n    paths = _useMemo.paths; // The columns displayed in the cascading panel.\n\n  var _useState = useState(columns),\n    columnData = _useState[0],\n    setColumnData = _useState[1]; // The path after cascading data selection.\n\n  var _useState2 = useState(paths),\n    selectedPaths = _useState2[0],\n    setSelectedPaths = _useState2[1]; // The path corresponding to the selected value.\n\n  var _useState3 = useState(paths),\n    valueToPaths = _useState3[0],\n    setValueToPaths = _useState3[1];\n  /**\n   * Add a list of options to the cascading panel. Used for lazy loading options.\n   * @param column\n   * @param index The index of the current column.\n   */\n\n  function addColumn(column, index) {\n    setColumnData([].concat(slice(columnData, 0, index), [column]));\n  }\n  /**\n   * Remove subsequent columns of the specified column\n   * @param index\n   */\n\n  function removeColumnByIndex(index) {\n    setColumnData([].concat(slice(columnData, 0, index)));\n  }\n  /**\n   * Enforce update of columns and paths.\n   * @param nextValue  Selected value\n   * @param isAttachChildren  Whether to attach the children of the selected node.\n   */\n\n  function enforceUpdate(nextValue, isAttachChildren) {\n    var _getColumnsAndPaths = getColumnsAndPaths(data, nextValue, {\n        valueKey: valueKey,\n        childrenKey: childrenKey,\n        isAttachChildren: isAttachChildren\n      }),\n      columns = _getColumnsAndPaths.columns,\n      paths = _getColumnsAndPaths.paths;\n    setColumnData(columns);\n    setSelectedPaths(paths);\n  }\n  useUpdateEffect(function () {\n    // Update paths when value is updated, then update valueToPaths.\n    setValueToPaths(paths);\n  }, [paths]);\n  useUpdateEffect(function () {\n    enforceUpdate(value);\n  }, [data]);\n  return {\n    enforceUpdate: enforceUpdate,\n    columnData: columnData,\n    valueToPaths: valueToPaths,\n    selectedPaths: selectedPaths,\n    setValueToPaths: setValueToPaths,\n    setColumnData: setColumnData,\n    setSelectedPaths: setSelectedPaths,\n    addColumn: addColumn,\n    removeColumnByIndex: removeColumnByIndex\n  };\n}","map":{"version":3,"names":["useState","useMemo","slice","shallowEqual","useUpdateEffect","findNodeOfTree","attachParent","getColumnsAndPaths","data","value","options","childrenKey","valueKey","isAttachChildren","columns","paths","findNode","items","_loop","i","children","v","active","node","push","map","item","length","_ret","selectedNode","valueToNode","unshift","reverse","usePaths","params","_useMemo","_useState","columnData","setColumnData","_useState2","selectedPaths","setSelectedPaths","_useState3","valueToPaths","setValueToPaths","addColumn","column","index","concat","removeColumnByIndex","enforceUpdate","nextValue","_getColumnsAndPaths"],"sources":["/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/rsuite/esm/Cascader/utils.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport slice from 'lodash/slice';\nimport { shallowEqual, useUpdateEffect } from '../utils';\nimport { findNodeOfTree } from '../utils/treeUtils';\nimport { attachParent } from '../utils/attachParent';\nexport function getColumnsAndPaths(data, value, options) {\n  var childrenKey = options.childrenKey,\n      valueKey = options.valueKey,\n      isAttachChildren = options.isAttachChildren;\n  var columns = [];\n  var paths = [];\n\n  var findNode = function findNode(items) {\n    var _loop = function _loop(i) {\n      var children = items[i][childrenKey];\n\n      if (shallowEqual(items[i][valueKey], value)) {\n        return {\n          v: {\n            items: items,\n            active: items[i]\n          }\n        };\n      } else if (children) {\n        var node = findNode(children);\n\n        if (node) {\n          columns.push(children.map(function (item) {\n            return attachParent(item, items[i]);\n          }));\n          paths.push(node.active);\n          return {\n            v: {\n              items: items,\n              active: items[i]\n            }\n          };\n        }\n      }\n    };\n\n    for (var i = 0; i < items.length; i += 1) {\n      var _ret = _loop(i);\n\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n\n    return null;\n  };\n\n  var selectedNode = findNode(data);\n  columns.push(data);\n\n  if (selectedNode) {\n    paths.push(selectedNode.active);\n  }\n\n  if (isAttachChildren) {\n    var valueToNode = findNodeOfTree(data, function (item) {\n      return item[valueKey] === value;\n    });\n\n    if (valueToNode !== null && valueToNode !== void 0 && valueToNode[childrenKey]) {\n      columns.unshift(valueToNode[childrenKey]);\n    }\n  }\n\n  columns.reverse();\n  paths.reverse();\n  return {\n    columns: columns,\n    paths: paths\n  };\n}\nexport function usePaths(params) {\n  var data = params.data,\n      valueKey = params.valueKey,\n      childrenKey = params.childrenKey,\n      value = params.value;\n\n  var _useMemo = useMemo(function () {\n    return getColumnsAndPaths(data, value, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n  }, [data, value, valueKey, childrenKey]),\n      columns = _useMemo.columns,\n      paths = _useMemo.paths; // The columns displayed in the cascading panel.\n\n\n  var _useState = useState(columns),\n      columnData = _useState[0],\n      setColumnData = _useState[1]; // The path after cascading data selection.\n\n\n  var _useState2 = useState(paths),\n      selectedPaths = _useState2[0],\n      setSelectedPaths = _useState2[1]; // The path corresponding to the selected value.\n\n\n  var _useState3 = useState(paths),\n      valueToPaths = _useState3[0],\n      setValueToPaths = _useState3[1];\n  /**\n   * Add a list of options to the cascading panel. Used for lazy loading options.\n   * @param column\n   * @param index The index of the current column.\n   */\n\n\n  function addColumn(column, index) {\n    setColumnData([].concat(slice(columnData, 0, index), [column]));\n  }\n  /**\n   * Remove subsequent columns of the specified column\n   * @param index\n   */\n\n\n  function removeColumnByIndex(index) {\n    setColumnData([].concat(slice(columnData, 0, index)));\n  }\n  /**\n   * Enforce update of columns and paths.\n   * @param nextValue  Selected value\n   * @param isAttachChildren  Whether to attach the children of the selected node.\n   */\n\n\n  function enforceUpdate(nextValue, isAttachChildren) {\n    var _getColumnsAndPaths = getColumnsAndPaths(data, nextValue, {\n      valueKey: valueKey,\n      childrenKey: childrenKey,\n      isAttachChildren: isAttachChildren\n    }),\n        columns = _getColumnsAndPaths.columns,\n        paths = _getColumnsAndPaths.paths;\n\n    setColumnData(columns);\n    setSelectedPaths(paths);\n  }\n\n  useUpdateEffect(function () {\n    // Update paths when value is updated, then update valueToPaths.\n    setValueToPaths(paths);\n  }, [paths]);\n  useUpdateEffect(function () {\n    enforceUpdate(value);\n  }, [data]);\n  return {\n    enforceUpdate: enforceUpdate,\n    columnData: columnData,\n    valueToPaths: valueToPaths,\n    selectedPaths: selectedPaths,\n    setValueToPaths: setValueToPaths,\n    setColumnData: setColumnData,\n    setSelectedPaths: setSelectedPaths,\n    addColumn: addColumn,\n    removeColumnByIndex: removeColumnByIndex\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}