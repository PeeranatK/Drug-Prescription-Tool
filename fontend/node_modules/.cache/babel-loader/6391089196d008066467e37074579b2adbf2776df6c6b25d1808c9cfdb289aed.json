{"ast":null,"code":"import React from 'react';\nimport isFunction from 'lodash/isFunction';\nimport get from 'lodash/get';\nimport isNil from 'lodash/isNil';\nimport ColumnGroup from '../ColumnGroup';\nimport HeaderCell from '../HeaderCell';\nfunction cloneCell(Cell, props) {\n  return /*#__PURE__*/React.cloneElement(Cell, props);\n}\nfunction mergeCells(cells) {\n  var nextCells = [];\n  for (var i = 0; i < cells.length; i += 1) {\n    var _cells$i$props = cells[i].props,\n      width = _cells$i$props.width,\n      colSpan = _cells$i$props.colSpan,\n      groupCount = _cells$i$props.groupCount,\n      groupHeader = _cells$i$props.groupHeader,\n      groupAlign = _cells$i$props.groupAlign,\n      groupVerticalAlign = _cells$i$props.groupVerticalAlign,\n      isHeaderCell = _cells$i$props.isHeaderCell,\n      headerHeight = _cells$i$props.headerHeight,\n      groupHeaderHeight = _cells$i$props.groupHeaderHeight;\n    var groupChildren = []; // Add grouping to column headers.\n\n    if (groupCount && isHeaderCell) {\n      var nextWidth = width;\n      var left = 0;\n      for (var j = 0; j < groupCount; j += 1) {\n        var nextCell = cells[i + j];\n        var _nextCell$props = nextCell.props,\n          nextCellWidth = _nextCell$props.width,\n          sortable = _nextCell$props.sortable,\n          children = _nextCell$props.children,\n          dataKey = _nextCell$props.dataKey,\n          onSortColumn = _nextCell$props.onSortColumn,\n          sortColumn = _nextCell$props.sortColumn,\n          sortType = _nextCell$props.sortType,\n          align = _nextCell$props.align,\n          verticalAlign = _nextCell$props.verticalAlign;\n        if (j !== 0) {\n          nextWidth += nextCellWidth;\n          left += cells[i + j - 1].props.width;\n          cells[i + j] = cloneCell(nextCell, {\n            removed: true\n          });\n        }\n        groupChildren.push( /*#__PURE__*/React.createElement(HeaderCell, {\n          key: j,\n          left: left,\n          align: align,\n          verticalAlign: verticalAlign,\n          dataKey: dataKey,\n          width: nextCellWidth,\n          sortable: sortable,\n          sortColumn: sortColumn,\n          sortType: sortType,\n          onSortColumn: onSortColumn\n        }, children));\n      }\n      nextCells.push(cloneCell(cells[i], {\n        width: nextWidth,\n        children: /*#__PURE__*/React.createElement(ColumnGroup, {\n          width: nextWidth,\n          headerHeight: headerHeight,\n          header: groupHeader,\n          align: groupAlign,\n          verticalAlign: groupVerticalAlign,\n          groupHeaderHeight: groupHeaderHeight\n        }, groupChildren)\n      }));\n      continue;\n    } else if (colSpan) {\n      // If there is a colSpan attribute, go to its next Cell.\n      // Determine whether the value is null or undefined, then merge this cell.\n      var _nextWidth = width;\n      for (var _j = 0; _j < colSpan; _j += 1) {\n        var _nextCell = cells[i + _j];\n        if (_nextCell) {\n          var _nextCell$props2 = _nextCell.props,\n            rowData = _nextCell$props2.rowData,\n            rowIndex = _nextCell$props2.rowIndex,\n            _children = _nextCell$props2.children,\n            colSpanWidth = _nextCell$props2.width,\n            _isHeaderCell = _nextCell$props2.isHeaderCell,\n            _dataKey = _nextCell$props2.dataKey;\n          var cellText = isFunction(_children) ? _children(rowData, rowIndex) : get(rowData, _dataKey);\n          if (rowData && isNil(cellText) || _isHeaderCell && isNil(_children)) {\n            _nextWidth += colSpanWidth;\n            cells[i + _j] = cloneCell(_nextCell, {\n              removed: true\n            });\n          }\n        }\n      }\n      nextCells.push(cloneCell(cells[i], {\n        width: _nextWidth,\n        'aria-colspan': _nextWidth > width ? colSpan : undefined\n      }));\n      continue;\n    }\n    nextCells.push(cells[i]);\n  }\n  return nextCells;\n}\nexport default mergeCells;","map":{"version":3,"names":["React","isFunction","get","isNil","ColumnGroup","HeaderCell","cloneCell","Cell","props","cloneElement","mergeCells","cells","nextCells","i","length","_cells$i$props","width","colSpan","groupCount","groupHeader","groupAlign","groupVerticalAlign","isHeaderCell","headerHeight","groupHeaderHeight","groupChildren","nextWidth","left","j","nextCell","_nextCell$props","nextCellWidth","sortable","children","dataKey","onSortColumn","sortColumn","sortType","align","verticalAlign","removed","push","createElement","key","header","_nextWidth","_j","_nextCell","_nextCell$props2","rowData","rowIndex","_children","colSpanWidth","_isHeaderCell","_dataKey","cellText","undefined"],"sources":["/Users/peeranat/Desktop/Project/fontend/node_modules/rsuite-table/es/utils/mergeCells.js"],"sourcesContent":["import React from 'react';\nimport isFunction from 'lodash/isFunction';\nimport get from 'lodash/get';\nimport isNil from 'lodash/isNil';\nimport ColumnGroup from '../ColumnGroup';\nimport HeaderCell from '../HeaderCell';\n\nfunction cloneCell(Cell, props) {\n  return /*#__PURE__*/React.cloneElement(Cell, props);\n}\n\nfunction mergeCells(cells) {\n  var nextCells = [];\n\n  for (var i = 0; i < cells.length; i += 1) {\n    var _cells$i$props = cells[i].props,\n        width = _cells$i$props.width,\n        colSpan = _cells$i$props.colSpan,\n        groupCount = _cells$i$props.groupCount,\n        groupHeader = _cells$i$props.groupHeader,\n        groupAlign = _cells$i$props.groupAlign,\n        groupVerticalAlign = _cells$i$props.groupVerticalAlign,\n        isHeaderCell = _cells$i$props.isHeaderCell,\n        headerHeight = _cells$i$props.headerHeight,\n        groupHeaderHeight = _cells$i$props.groupHeaderHeight;\n    var groupChildren = []; // Add grouping to column headers.\n\n    if (groupCount && isHeaderCell) {\n      var nextWidth = width;\n      var left = 0;\n\n      for (var j = 0; j < groupCount; j += 1) {\n        var nextCell = cells[i + j];\n        var _nextCell$props = nextCell.props,\n            nextCellWidth = _nextCell$props.width,\n            sortable = _nextCell$props.sortable,\n            children = _nextCell$props.children,\n            dataKey = _nextCell$props.dataKey,\n            onSortColumn = _nextCell$props.onSortColumn,\n            sortColumn = _nextCell$props.sortColumn,\n            sortType = _nextCell$props.sortType,\n            align = _nextCell$props.align,\n            verticalAlign = _nextCell$props.verticalAlign;\n\n        if (j !== 0) {\n          nextWidth += nextCellWidth;\n          left += cells[i + j - 1].props.width;\n          cells[i + j] = cloneCell(nextCell, {\n            removed: true\n          });\n        }\n\n        groupChildren.push( /*#__PURE__*/React.createElement(HeaderCell, {\n          key: j,\n          left: left,\n          align: align,\n          verticalAlign: verticalAlign,\n          dataKey: dataKey,\n          width: nextCellWidth,\n          sortable: sortable,\n          sortColumn: sortColumn,\n          sortType: sortType,\n          onSortColumn: onSortColumn\n        }, children));\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: nextWidth,\n        children: /*#__PURE__*/React.createElement(ColumnGroup, {\n          width: nextWidth,\n          headerHeight: headerHeight,\n          header: groupHeader,\n          align: groupAlign,\n          verticalAlign: groupVerticalAlign,\n          groupHeaderHeight: groupHeaderHeight\n        }, groupChildren)\n      }));\n      continue;\n    } else if (colSpan) {\n      // If there is a colSpan attribute, go to its next Cell.\n      // Determine whether the value is null or undefined, then merge this cell.\n      var _nextWidth = width;\n\n      for (var _j = 0; _j < colSpan; _j += 1) {\n        var _nextCell = cells[i + _j];\n\n        if (_nextCell) {\n          var _nextCell$props2 = _nextCell.props,\n              rowData = _nextCell$props2.rowData,\n              rowIndex = _nextCell$props2.rowIndex,\n              _children = _nextCell$props2.children,\n              colSpanWidth = _nextCell$props2.width,\n              _isHeaderCell = _nextCell$props2.isHeaderCell,\n              _dataKey = _nextCell$props2.dataKey;\n          var cellText = isFunction(_children) ? _children(rowData, rowIndex) : get(rowData, _dataKey);\n\n          if (rowData && isNil(cellText) || _isHeaderCell && isNil(_children)) {\n            _nextWidth += colSpanWidth;\n            cells[i + _j] = cloneCell(_nextCell, {\n              removed: true\n            });\n          }\n        }\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: _nextWidth,\n        'aria-colspan': _nextWidth > width ? colSpan : undefined\n      }));\n      continue;\n    }\n\n    nextCells.push(cells[i]);\n  }\n\n  return nextCells;\n}\n\nexport default mergeCells;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}