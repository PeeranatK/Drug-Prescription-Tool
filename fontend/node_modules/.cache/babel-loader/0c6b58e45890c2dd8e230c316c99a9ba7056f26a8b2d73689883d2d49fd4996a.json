{"ast":null,"code":"import { MixedType } from './MixedType';\nfunction toNumber(value) {\n  return +value;\n}\nexport class NumberType extends MixedType {\n  constructor(errorMessage) {\n    super('number');\n    super.pushRule({\n      onValid: value => /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/.test(value + ''),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n  isInteger() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.isInteger;\n    super.pushRule({\n      onValid: value => /^-?\\d+$/.test(value + ''),\n      errorMessage\n    });\n    return this;\n  }\n  pattern(regexp) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.pattern;\n    super.pushRule({\n      onValid: value => regexp.test(value + ''),\n      errorMessage,\n      params: {\n        regexp\n      }\n    });\n    return this;\n  }\n  isOneOf(values) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.isOneOf;\n    super.pushRule({\n      onValid: value => values.includes(toNumber(value)),\n      errorMessage,\n      params: {\n        values\n      }\n    });\n    return this;\n  }\n  range(min, max) {\n    let errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.range;\n    super.pushRule({\n      onValid: value => toNumber(value) >= min && toNumber(value) <= max,\n      errorMessage,\n      params: {\n        min,\n        max\n      }\n    });\n    return this;\n  }\n  min(min) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.min;\n    super.pushRule({\n      onValid: value => toNumber(value) >= min,\n      errorMessage,\n      params: {\n        min\n      }\n    });\n    return this;\n  }\n  max(max) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.max;\n    super.pushRule({\n      onValid: value => toNumber(value) <= max,\n      errorMessage,\n      params: {\n        max\n      }\n    });\n    return this;\n  }\n}\nexport default function getNumberType(errorMessage) {\n  return new NumberType(errorMessage);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AAIvC,SAASC,QAAQ,CAACC,KAAsB;EACtC,OAAO,CAACA,KAAK;AACf;AAEA,OAAM,MAAOC,UAAiD,SAAQH,SAKrE;EACCI,YAAYC,YAAyB;IACnC,KAAK,CAAC,QAAQ,CAAC;IACf,KAAK,CAACC,QAAQ,CAAC;MACbC,OAAO,EAAEL,KAAK,IAAI,0CAA0C,CAACM,IAAI,CAACN,KAAK,GAAG,EAAE,CAAC;MAC7EG,YAAY,EAAEA,YAAY,IAAI,IAAI,CAACI,MAAM,CAACC;KAC3C,CAAC;EACJ;EAEAC,SAAS,GAAiD;IAAA,IAAhDN,mFAA2B,IAAI,CAACI,MAAM,CAACE,SAAS;IACxD,KAAK,CAACL,QAAQ,CAAC;MACbC,OAAO,EAAEL,KAAK,IAAI,SAAS,CAACM,IAAI,CAACN,KAAK,GAAG,EAAE,CAAC;MAC5CG;KACD,CAAC;IAEF,OAAO,IAAI;EACb;EAEAO,OAAO,CAACC,MAAc,EAAgD;IAAA,IAA9CR,mFAA2B,IAAI,CAACI,MAAM,CAACG,OAAO;IACpE,KAAK,CAACN,QAAQ,CAAC;MACbC,OAAO,EAAEL,KAAK,IAAIW,MAAM,CAACL,IAAI,CAACN,KAAK,GAAG,EAAE,CAAC;MACzCG,YAAY;MACZS,MAAM,EAAE;QAAED;MAAM;KACjB,CAAC;IACF,OAAO,IAAI;EACb;EAEAE,OAAO,CAACC,MAAgB,EAAgD;IAAA,IAA9CX,mFAA2B,IAAI,CAACI,MAAM,CAACM,OAAO;IACtE,KAAK,CAACT,QAAQ,CAAC;MACbC,OAAO,EAAEL,KAAK,IAAIc,MAAM,CAACC,QAAQ,CAAChB,QAAQ,CAACC,KAAK,CAAC,CAAC;MAClDG,YAAY;MACZS,MAAM,EAAE;QAAEE;MAAM;KACjB,CAAC;IACF,OAAO,IAAI;EACb;EAEAE,KAAK,CAACC,GAAW,EAAEC,GAAW,EAA8C;IAAA,IAA5Cf,mFAA2B,IAAI,CAACI,MAAM,CAACS,KAAK;IAC1E,KAAK,CAACZ,QAAQ,CAAC;MACbC,OAAO,EAAEL,KAAK,IAAID,QAAQ,CAACC,KAAK,CAAC,IAAIiB,GAAG,IAAIlB,QAAQ,CAACC,KAAK,CAAC,IAAIkB,GAAG;MAClEf,YAAY;MACZS,MAAM,EAAE;QAAEK,GAAG;QAAEC;MAAG;KACnB,CAAC;IACF,OAAO,IAAI;EACb;EAEAD,GAAG,CAACA,GAAW,EAA4C;IAAA,IAA1Cd,mFAA2B,IAAI,CAACI,MAAM,CAACU,GAAG;IACzD,KAAK,CAACb,QAAQ,CAAC;MACbC,OAAO,EAAEL,KAAK,IAAID,QAAQ,CAACC,KAAK,CAAC,IAAIiB,GAAG;MACxCd,YAAY;MACZS,MAAM,EAAE;QAAEK;MAAG;KACd,CAAC;IACF,OAAO,IAAI;EACb;EAEAC,GAAG,CAACA,GAAW,EAA4C;IAAA,IAA1Cf,mFAA2B,IAAI,CAACI,MAAM,CAACW,GAAG;IACzD,KAAK,CAACd,QAAQ,CAAC;MACbC,OAAO,EAAEL,KAAK,IAAID,QAAQ,CAACC,KAAK,CAAC,IAAIkB,GAAG;MACxCf,YAAY;MACZS,MAAM,EAAE;QAAEM;MAAG;KACd,CAAC;IACF,OAAO,IAAI;EACb;;AAGF,eAAc,SAAUC,aAAa,CAA6BhB,YAAgB;EAChF,OAAO,IAAIF,UAAU,CAAcE,YAAY,CAAC;AAClD","names":["MixedType","toNumber","value","NumberType","constructor","errorMessage","pushRule","onValid","test","locale","type","isInteger","pattern","regexp","params","isOneOf","values","includes","range","min","max","getNumberType"],"sources":["/Users/peeranat/Desktop/Project/fontend/node_modules/schema-typed/src/NumberType.ts"],"sourcesContent":["import { MixedType } from './MixedType';\nimport { ErrorMessageType } from './types';\nimport { NumberTypeLocale } from './locales';\n\nfunction toNumber(value: string | number) {\n  return +value;\n}\n\nexport class NumberType<DataType = any, E = ErrorMessageType> extends MixedType<\n  number | string,\n  DataType,\n  E,\n  NumberTypeLocale\n> {\n  constructor(errorMessage?: E | string) {\n    super('number');\n    super.pushRule({\n      onValid: value => /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/.test(value + ''),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  isInteger(errorMessage: E | string = this.locale.isInteger) {\n    super.pushRule({\n      onValid: value => /^-?\\d+$/.test(value + ''),\n      errorMessage\n    });\n\n    return this;\n  }\n\n  pattern(regexp: RegExp, errorMessage: E | string = this.locale.pattern) {\n    super.pushRule({\n      onValid: value => regexp.test(value + ''),\n      errorMessage,\n      params: { regexp }\n    });\n    return this;\n  }\n\n  isOneOf(values: number[], errorMessage: E | string = this.locale.isOneOf) {\n    super.pushRule({\n      onValid: value => values.includes(toNumber(value)),\n      errorMessage,\n      params: { values }\n    });\n    return this;\n  }\n\n  range(min: number, max: number, errorMessage: E | string = this.locale.range) {\n    super.pushRule({\n      onValid: value => toNumber(value) >= min && toNumber(value) <= max,\n      errorMessage,\n      params: { min, max }\n    });\n    return this;\n  }\n\n  min(min: number, errorMessage: E | string = this.locale.min) {\n    super.pushRule({\n      onValid: value => toNumber(value) >= min,\n      errorMessage,\n      params: { min }\n    });\n    return this;\n  }\n\n  max(max: number, errorMessage: E | string = this.locale.max) {\n    super.pushRule({\n      onValid: value => toNumber(value) <= max,\n      errorMessage,\n      params: { max }\n    });\n    return this;\n  }\n}\n\nexport default function getNumberType<DataType = any, E = string>(errorMessage?: E) {\n  return new NumberType<DataType, E>(errorMessage);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}