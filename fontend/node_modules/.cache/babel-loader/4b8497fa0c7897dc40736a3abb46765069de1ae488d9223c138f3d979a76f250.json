{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport * as ReactIs from 'react-is';\nimport flatten from 'lodash/flatten';\nimport ColumnGroup from '../ColumnGroup';\n/**\n * Get the columns ReactElement array.\n * - Handling the case where there is an array of <Column> in children.\n * - Filter empty items in children.\n */\n\nfunction getTableColumns(children) {\n  var childrenArray = Array.isArray(children) ? children : [children];\n  var flattenColumns = flatten(childrenArray).map(function (column) {\n    // If the column is a group, we need to get the columns from the children.\n    if ((column === null || column === void 0 ? void 0 : column.type) === ColumnGroup) {\n      var _column$props = column === null || column === void 0 ? void 0 : column.props,\n        header = _column$props.header,\n        groupChildren = _column$props.children,\n        align = _column$props.align,\n        fixed = _column$props.fixed,\n        verticalAlign = _column$props.verticalAlign,\n        groupHeaderHeight = _column$props.groupHeaderHeight;\n      var childColumns = getTableColumns(groupChildren);\n      return childColumns.map(function (childColumn, index) {\n        // Overwrite the props set by ColumnGroup to Column.\n        var groupCellProps = _extends({}, childColumn === null || childColumn === void 0 ? void 0 : childColumn.props, {\n          groupHeaderHeight: groupHeaderHeight,\n          fixed: fixed,\n          // Column extends the properties of Group （align，verticalAlign）\n          align: (childColumn === null || childColumn === void 0 ? void 0 : childColumn.props.align) || align,\n          verticalAlign: (childColumn === null || childColumn === void 0 ? void 0 : childColumn.props.verticalAlign) || verticalAlign\n        });\n        /**\n         * Set attributes for the first column in the group:\n         * @field groupCount: The number of grouping sub-items.\n         * @field groupHeader: Group header title.\n         * @field resizable: Set to not resizable.\n         */\n\n        if (index === 0) {\n          groupCellProps.groupAlign = align;\n          groupCellProps.groupVerticalAlign = verticalAlign;\n          groupCellProps.groupCount = childColumns.length;\n          groupCellProps.groupHeader = header;\n          groupCellProps.resizable = false;\n        }\n        return /*#__PURE__*/React.cloneElement(childColumn, groupCellProps);\n      });\n    } else if (ReactIs.isFragment(column)) {\n      var _column$props2;\n\n      // If the column is a fragment, we need to get the columns from the children.\n      return getTableColumns((_column$props2 = column.props) === null || _column$props2 === void 0 ? void 0 : _column$props2.children);\n    } else if (Array.isArray(column)) {\n      // If the column is an array, need check item in the array.\n      return getTableColumns(column);\n    } // If the column is not a group, we just return the column.\n\n    return column;\n  }); // Flatten the array in Columns into a one-dimensional array, and calculate lastColumn and firstColumn.\n\n  return flatten(flattenColumns).filter(Boolean);\n}\nexport default getTableColumns;","map":{"version":3,"names":["_extends","React","ReactIs","flatten","ColumnGroup","getTableColumns","children","childrenArray","Array","isArray","flattenColumns","map","column","type","_column$props","props","header","groupChildren","align","fixed","verticalAlign","groupHeaderHeight","childColumns","childColumn","index","groupCellProps","groupAlign","groupVerticalAlign","groupCount","length","groupHeader","resizable","cloneElement","isFragment","_column$props2","filter","Boolean"],"sources":["/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/rsuite-table/es/utils/getTableColumns.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport * as ReactIs from 'react-is';\nimport flatten from 'lodash/flatten';\nimport ColumnGroup from '../ColumnGroup';\n/**\n * Get the columns ReactElement array.\n * - Handling the case where there is an array of <Column> in children.\n * - Filter empty items in children.\n */\n\nfunction getTableColumns(children) {\n  var childrenArray = Array.isArray(children) ? children : [children];\n  var flattenColumns = flatten(childrenArray).map(function (column) {\n    // If the column is a group, we need to get the columns from the children.\n    if ((column === null || column === void 0 ? void 0 : column.type) === ColumnGroup) {\n      var _column$props = column === null || column === void 0 ? void 0 : column.props,\n          header = _column$props.header,\n          groupChildren = _column$props.children,\n          align = _column$props.align,\n          fixed = _column$props.fixed,\n          verticalAlign = _column$props.verticalAlign,\n          groupHeaderHeight = _column$props.groupHeaderHeight;\n\n      var childColumns = getTableColumns(groupChildren);\n      return childColumns.map(function (childColumn, index) {\n        // Overwrite the props set by ColumnGroup to Column.\n        var groupCellProps = _extends({}, childColumn === null || childColumn === void 0 ? void 0 : childColumn.props, {\n          groupHeaderHeight: groupHeaderHeight,\n          fixed: fixed,\n          // Column extends the properties of Group （align，verticalAlign）\n          align: (childColumn === null || childColumn === void 0 ? void 0 : childColumn.props.align) || align,\n          verticalAlign: (childColumn === null || childColumn === void 0 ? void 0 : childColumn.props.verticalAlign) || verticalAlign\n        });\n        /**\n         * Set attributes for the first column in the group:\n         * @field groupCount: The number of grouping sub-items.\n         * @field groupHeader: Group header title.\n         * @field resizable: Set to not resizable.\n         */\n\n\n        if (index === 0) {\n          groupCellProps.groupAlign = align;\n          groupCellProps.groupVerticalAlign = verticalAlign;\n          groupCellProps.groupCount = childColumns.length;\n          groupCellProps.groupHeader = header;\n          groupCellProps.resizable = false;\n        }\n\n        return /*#__PURE__*/React.cloneElement(childColumn, groupCellProps);\n      });\n    } else if (ReactIs.isFragment(column)) {\n      var _column$props2;\n\n      // If the column is a fragment, we need to get the columns from the children.\n      return getTableColumns((_column$props2 = column.props) === null || _column$props2 === void 0 ? void 0 : _column$props2.children);\n    } else if (Array.isArray(column)) {\n      // If the column is an array, need check item in the array.\n      return getTableColumns(column);\n    } // If the column is not a group, we just return the column.\n\n\n    return column;\n  }); // Flatten the array in Columns into a one-dimensional array, and calculate lastColumn and firstColumn.\n\n  return flatten(flattenColumns).filter(Boolean);\n}\n\nexport default getTableColumns;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}