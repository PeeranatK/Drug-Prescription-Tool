{"ast":null,"code":"import formatErrorMessage from './formatErrorMessage';\n/**\n * Create a data asynchronous validator\n * @param data\n */\nexport function createValidatorAsync(data, name) {\n  function check(errorMessage) {\n    return checkResult => {\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage\n        };\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n      return null;\n    };\n  }\n  return (value, rules) => {\n    const promises = rules.map(rule => {\n      const {\n        onValid,\n        errorMessage,\n        params\n      } = rule;\n      return Promise.resolve(onValid(value, data, name)).then(check(formatErrorMessage(errorMessage, {\n        ...params,\n        name: Array.isArray(name) ? name.join('.') : name\n      })));\n    });\n    return Promise.all(promises).then(results => results.find(item => item && (item === null || item === void 0 ? void 0 : item.hasError)));\n  };\n}\nexport default createValidatorAsync;","map":{"version":3,"mappings":"AACA,OAAOA,kBAAkB,MAAM,sBAAsB;AAErD;;;;AAIA,OAAM,SAAUC,oBAAoB,CAAUC,IAAQ,EAAEC,IAAwB;EAC9E,SAASC,KAAK,CAACC,YAAyB;IACtC,OAAQC,WAAqC,IAA2B;MACtE,IAAIA,WAAW,KAAK,KAAK,EAAE;QACzB,OAAO;UAAEC,QAAQ,EAAE,IAAI;UAAEF;QAAY,CAAE;OACxC,MAAM,IAAI,OAAOC,WAAW,KAAK,QAAQ,KAAKA,WAAW,CAACC,QAAQ,IAAID,WAAW,CAACE,KAAK,CAAC,EAAE;QACzF,OAAOF,WAAW;;MAEpB,OAAO,IAAI;IACb,CAAC;EACH;EAEA,OAAO,CAACG,KAAQ,EAAEC,KAA0B,KAAI;IAC9C,MAAMC,QAAQ,GAAGD,KAAK,CAACE,GAAG,CAACC,IAAI,IAAG;MAChC,MAAM;QAAEC,OAAO;QAAET,YAAY;QAAEU;MAAM,CAAE,GAAGF,IAAI;MAC9C,OAAOG,OAAO,CAACC,OAAO,CAACH,OAAO,CAACL,KAAK,EAAEP,IAAI,EAAEC,IAAI,CAAC,CAAC,CAACe,IAAI,CACrDd,KAAK,CACHJ,kBAAkB,CAAIK,YAAY,EAAE;QAClC,GAAGU,MAAM;QACTZ,IAAI,EAAEgB,KAAK,CAACC,OAAO,CAACjB,IAAI,CAAC,GAAGA,IAAI,CAACkB,IAAI,CAAC,GAAG,CAAC,GAAGlB;OAC9C,CAAC,CACH,CACF;IACH,CAAC,CAAC;IAEF,OAAOa,OAAO,CAACM,GAAG,CAACX,QAAQ,CAAC,CAACO,IAAI,CAACK,OAAO,IACvCA,OAAO,CAACC,IAAI,CAAEC,IAA2B,IAAKA,IAAI,KAAIA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAElB,QAAQ,EAAC,CACtE;EACH,CAAC;AACH;AAEA,eAAeN,oBAAoB","names":["formatErrorMessage","createValidatorAsync","data","name","check","errorMessage","checkResult","hasError","array","value","rules","promises","map","rule","onValid","params","Promise","resolve","then","Array","isArray","join","all","results","find","item"],"sources":["/Users/peeranat/Desktop/Project/fontend/node_modules/schema-typed/src/utils/createValidatorAsync.ts"],"sourcesContent":["import { CheckResult, RuleType } from '../types';\nimport formatErrorMessage from './formatErrorMessage';\n\n/**\n * Create a data asynchronous validator\n * @param data\n */\nexport function createValidatorAsync<V, D, E>(data?: D, name?: string | string[]) {\n  function check(errorMessage?: E | string) {\n    return (checkResult: CheckResult<E> | boolean): CheckResult<E> | null => {\n      if (checkResult === false) {\n        return { hasError: true, errorMessage };\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n      return null;\n    };\n  }\n\n  return (value: V, rules: RuleType<V, D, E>[]) => {\n    const promises = rules.map(rule => {\n      const { onValid, errorMessage, params } = rule;\n      return Promise.resolve(onValid(value, data, name)).then(\n        check(\n          formatErrorMessage<E>(errorMessage, {\n            ...params,\n            name: Array.isArray(name) ? name.join('.') : name\n          })\n        )\n      );\n    });\n\n    return Promise.all(promises).then(results =>\n      results.find((item: CheckResult<E> | null) => item && item?.hasError)\n    );\n  };\n}\n\nexport default createValidatorAsync;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}