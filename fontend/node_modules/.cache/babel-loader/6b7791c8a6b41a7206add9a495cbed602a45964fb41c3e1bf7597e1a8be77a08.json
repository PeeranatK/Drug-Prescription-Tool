{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\nvar now = hasNativePerformanceNow ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\nfunction cancelTimeout(timeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\nfunction requestTimeout(callback, delay) {\n  var start = now();\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n  var timeoutID = {\n    id: requestAnimationFrame(tick)\n  };\n  return timeoutID;\n}\nvar size = -1; // This utility copied from \"dom-helpers\" package.\n\nfunction getScrollbarSize(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n  if (size === -1 || recalculate) {\n    var div = document.createElement('div');\n    var style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n    document.body.appendChild(div);\n    size = div.offsetWidth - div.clientWidth;\n    document.body.removeChild(div);\n  }\n  return size;\n}\nvar cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\n\nfunction getRTLOffsetType(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n  if (cachedRTLResult === null || recalculate) {\n    var outerDiv = document.createElement('div');\n    var outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n    var innerDiv = document.createElement('div');\n    var innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n    outerDiv.appendChild(innerDiv);\n    document.body.appendChild(outerDiv);\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n    document.body.removeChild(outerDiv);\n    return cachedRTLResult;\n  }\n  return cachedRTLResult;\n}\nvar IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\nvar defaultItemKey = function defaultItemKey(_ref) {\n  var columnIndex = _ref.columnIndex,\n    data = _ref.data,\n    rowIndex = _ref.rowIndex;\n  return rowIndex + \":\" + columnIndex;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\nvar devWarningsOverscanCount = null;\nvar devWarningsOverscanRowsColumnsCount = null;\nvar devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = /*#__PURE__*/new WeakSet();\n    devWarningsOverscanRowsColumnsCount = /*#__PURE__*/new WeakSet();\n    devWarningsTagName = /*#__PURE__*/new WeakSet();\n  }\n}\nfunction createGridComponent(_ref2) {\n  var _class;\n  var getColumnOffset = _ref2.getColumnOffset,\n    getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset,\n    getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex,\n    getColumnWidth = _ref2.getColumnWidth,\n    getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight,\n    getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth,\n    getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment,\n    getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment,\n    getRowHeight = _ref2.getRowHeight,\n    getRowOffset = _ref2.getRowOffset,\n    getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset,\n    getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex,\n    initInstanceProps = _ref2.initInstanceProps,\n    shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange,\n    validateProps = _ref2.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(Grid, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function Grid(props) {\n      var _this;\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));\n      _this._resetIsScrollingTimeoutId = null;\n      _this._outerRef = void 0;\n      _this.state = {\n        instance: _assertThisInitialized(_this),\n        isScrolling: false,\n        horizontalScrollDirection: 'forward',\n        scrollLeft: typeof _this.props.initialScrollLeft === 'number' ? _this.props.initialScrollLeft : 0,\n        scrollTop: typeof _this.props.initialScrollTop === 'number' ? _this.props.initialScrollTop : 0,\n        scrollUpdateWasRequested: false,\n        verticalScrollDirection: 'forward'\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanColumnStartIndex: overscanColumnStartIndex,\n          overscanColumnStopIndex: overscanColumnStopIndex,\n          overscanRowStartIndex: overscanRowStartIndex,\n          overscanRowStopIndex: overscanRowStopIndex,\n          visibleColumnStartIndex: visibleColumnStartIndex,\n          visibleColumnStopIndex: visibleColumnStopIndex,\n          visibleRowStartIndex: visibleRowStartIndex,\n          visibleRowStopIndex: visibleRowStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          horizontalScrollDirection: horizontalScrollDirection,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          verticalScrollDirection: verticalScrollDirection,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n      _this._getItemStyle = function (rowIndex, columnIndex) {\n        var _this$props = _this.props,\n          columnWidth = _this$props.columnWidth,\n          direction = _this$props.direction,\n          rowHeight = _this$props.rowHeight;\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);\n        var key = rowIndex + \":\" + columnIndex;\n        var style;\n        if (itemStyleCache.hasOwnProperty(key)) {\n          style = itemStyleCache[key];\n        } else {\n          var _offset = getColumnOffset(_this.props, columnIndex, _this._instanceProps);\n          var isRtl = direction === 'rtl';\n          itemStyleCache[key] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : _offset,\n            right: isRtl ? _offset : undefined,\n            top: getRowOffset(_this.props, rowIndex, _this._instanceProps),\n            height: getRowHeight(_this.props, rowIndex, _this._instanceProps),\n            width: getColumnWidth(_this.props, columnIndex, _this._instanceProps)\n          };\n        }\n        return style;\n      };\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n      _this._onScroll = function (event) {\n        var _event$currentTarget = event.currentTarget,\n          clientHeight = _event$currentTarget.clientHeight,\n          clientWidth = _event$currentTarget.clientWidth,\n          scrollLeft = _event$currentTarget.scrollLeft,\n          scrollTop = _event$currentTarget.scrollTop,\n          scrollHeight = _event$currentTarget.scrollHeight,\n          scrollWidth = _event$currentTarget.scrollWidth;\n        _this.setState(function (prevState) {\n          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n          var direction = _this.props.direction; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n\n          var calculatedScrollLeft = scrollLeft;\n          if (direction === 'rtl') {\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                calculatedScrollLeft = -scrollLeft;\n                break;\n              case 'positive-descending':\n                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));\n          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n            scrollLeft: calculatedScrollLeft,\n            scrollTop: calculatedScrollTop,\n            verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);\n      };\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1);\n        });\n      };\n      return _this;\n    }\n    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n    var _proto = Grid.prototype;\n    _proto.scrollTo = function scrollTo(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n        scrollTop = _ref3.scrollTop;\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n      this.setState(function (prevState) {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n          return null;\n        }\n        return {\n          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward'\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n    _proto.scrollToItem = function scrollToItem(_ref4) {\n      var _ref4$align = _ref4.align,\n        align = _ref4$align === void 0 ? 'auto' : _ref4$align,\n        columnIndex = _ref4.columnIndex,\n        rowIndex = _ref4.rowIndex;\n      var _this$props2 = this.props,\n        columnCount = _this$props2.columnCount,\n        height = _this$props2.height,\n        rowCount = _this$props2.rowCount,\n        width = _this$props2.width;\n      var _this$state = this.state,\n        scrollLeft = _this$state.scrollLeft,\n        scrollTop = _this$state.scrollTop;\n      var scrollbarSize = getScrollbarSize();\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps); // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n\n      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;\n      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;\n      this.scrollTo({\n        scrollLeft: columnIndex !== undefined ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,\n        scrollTop: rowIndex !== undefined ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop\n      });\n    };\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n        initialScrollLeft = _this$props3.initialScrollLeft,\n        initialScrollTop = _this$props3.initialScrollTop;\n      if (this._outerRef != null) {\n        var outerRef = this._outerRef;\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var direction = this.props.direction;\n      var _this$state2 = this.state,\n        scrollLeft = _this$state2.scrollLeft,\n        scrollTop = _this$state2.scrollTop,\n        scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        var outerRef = this._outerRef;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              var clientWidth = outerRef.clientWidth,\n                scrollWidth = outerRef.scrollWidth;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n        children = _this$props4.children,\n        className = _this$props4.className,\n        columnCount = _this$props4.columnCount,\n        direction = _this$props4.direction,\n        height = _this$props4.height,\n        innerRef = _this$props4.innerRef,\n        innerElementType = _this$props4.innerElementType,\n        innerTagName = _this$props4.innerTagName,\n        itemData = _this$props4.itemData,\n        _this$props4$itemKey = _this$props4.itemKey,\n        itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey,\n        outerElementType = _this$props4.outerElementType,\n        outerTagName = _this$props4.outerTagName,\n        rowCount = _this$props4.rowCount,\n        style = _this$props4.style,\n        useIsScrolling = _this$props4.useIsScrolling,\n        width = _this$props4.width;\n      var isScrolling = this.state.isScrolling;\n      var _this$_getHorizontalR = this._getHorizontalRangeToRender(),\n        columnStartIndex = _this$_getHorizontalR[0],\n        columnStopIndex = _this$_getHorizontalR[1];\n      var _this$_getVerticalRan = this._getVerticalRangeToRender(),\n        rowStartIndex = _this$_getVerticalRan[0],\n        rowStopIndex = _this$_getVerticalRan[1];\n      var items = [];\n      if (columnCount > 0 && rowCount) {\n        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {\n          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {\n            items.push(createElement(children, {\n              columnIndex: _columnIndex,\n              data: itemData,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              key: itemKey({\n                columnIndex: _columnIndex,\n                data: itemData,\n                rowIndex: _rowIndex\n              }),\n              rowIndex: _rowIndex,\n              style: this._getItemStyle(_rowIndex, _columnIndex)\n            }));\n          }\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: this._onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: estimatedTotalHeight,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: estimatedTotalWidth\n        }\n      }));\n    };\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      var _this$props5 = this.props,\n        columnCount = _this$props5.columnCount,\n        onItemsRendered = _this$props5.onItemsRendered,\n        onScroll = _this$props5.onScroll,\n        rowCount = _this$props5.rowCount;\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(),\n            _overscanColumnStartIndex = _this$_getHorizontalR2[0],\n            _overscanColumnStopIndex = _this$_getHorizontalR2[1],\n            _visibleColumnStartIndex = _this$_getHorizontalR2[2],\n            _visibleColumnStopIndex = _this$_getHorizontalR2[3];\n          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(),\n            _overscanRowStartIndex = _this$_getVerticalRan2[0],\n            _overscanRowStopIndex = _this$_getVerticalRan2[1],\n            _visibleRowStartIndex = _this$_getVerticalRan2[2],\n            _visibleRowStopIndex = _this$_getVerticalRan2[3];\n          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);\n        }\n      }\n      if (typeof onScroll === 'function') {\n        var _this$state3 = this.state,\n          _horizontalScrollDirection = _this$state3.horizontalScrollDirection,\n          _scrollLeft = _this$state3.scrollLeft,\n          _scrollTop = _this$state3.scrollTop,\n          _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested,\n          _verticalScrollDirection = _this$state3.verticalScrollDirection;\n        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n\n    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {\n      var _this$props6 = this.props,\n        columnCount = _this$props6.columnCount,\n        overscanColumnCount = _this$props6.overscanColumnCount,\n        overscanColumnsCount = _this$props6.overscanColumnsCount,\n        overscanCount = _this$props6.overscanCount,\n        rowCount = _this$props6.rowCount;\n      var _this$state4 = this.state,\n        horizontalScrollDirection = _this$state4.horizontalScrollDirection,\n        isScrolling = _this$state4.isScrolling,\n        scrollLeft = _this$state4.scrollLeft;\n      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n      var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);\n      var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || horizontalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || horizontalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {\n      var _this$props7 = this.props,\n        columnCount = _this$props7.columnCount,\n        overscanCount = _this$props7.overscanCount,\n        overscanRowCount = _this$props7.overscanRowCount,\n        overscanRowsCount = _this$props7.overscanRowsCount,\n        rowCount = _this$props7.rowCount;\n      var _this$state5 = this.state,\n        isScrolling = _this$state5.isScrolling,\n        verticalScrollDirection = _this$state5.verticalScrollDirection,\n        scrollTop = _this$state5.scrollTop;\n      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n      var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);\n      var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || verticalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || verticalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n    return Grid;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    useIsScrolling: false\n  }, _class;\n}\nvar validateSharedProps = function validateSharedProps(_ref5, _ref6) {\n  var children = _ref5.children,\n    direction = _ref5.direction,\n    height = _ref5.height,\n    innerTagName = _ref5.innerTagName,\n    outerTagName = _ref5.outerTagName,\n    overscanColumnsCount = _ref5.overscanColumnsCount,\n    overscanCount = _ref5.overscanCount,\n    overscanRowsCount = _ref5.overscanRowsCount,\n    width = _ref5.width;\n  var instance = _ref6.instance;\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn('The overscanCount prop has been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n    if (typeof overscanColumnsCount === 'number' || typeof overscanRowsCount === 'number') {\n      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn('The overscanColumnsCount and overscanRowsCount props have been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    }\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n    if (typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Grids must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    }\n    if (typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Grids must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\nvar DEFAULT_ESTIMATED_ITEM_SIZE = 50;\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {\n  var rowCount = _ref.rowCount;\n  var rowMetadataMap = _ref2.rowMetadataMap,\n    estimatedRowHeight = _ref2.estimatedRowHeight,\n    lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n  if (lastMeasuredRowIndex >= 0) {\n    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {\n  var columnCount = _ref3.columnCount;\n  var columnMetadataMap = _ref4.columnMetadataMap,\n    estimatedColumnWidth = _ref4.estimatedColumnWidth,\n    lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n  if (lastMeasuredColumnIndex >= 0) {\n    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\nvar getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {\n  var itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = props.columnWidth;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = props.rowHeight;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n  return itemMetadataMap[index];\n};\nvar findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {\n  var itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\nvar findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nvar findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {\n  var itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  var interval = 1;\n  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\nvar getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n  var size = itemType === 'column' ? props.width : props.height;\n  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n\n  var estimatedTotalSize = itemType === 'column' ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);\n  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n  var minOffset = Math.max(0, itemMetadata.offset - size + scrollbarSize + itemMetadata.size);\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\nvar VariableSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(props, index, instanceProps) {\n    return getItemMetadata('column', props, index, instanceProps).offset;\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {\n    return findNearestItem('column', props, instanceProps, scrollLeft);\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {\n    var columnCount = props.columnCount,\n      width = props.width;\n    var itemMetadata = getItemMetadata('column', props, startIndex, instanceProps);\n    var maxOffset = scrollLeft + width;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n    return stopIndex;\n  },\n  getColumnWidth: function getColumnWidth(props, index, instanceProps) {\n    return instanceProps.columnMetadataMap[index].size;\n  },\n  getEstimatedTotalHeight: getEstimatedTotalHeight,\n  getEstimatedTotalWidth: getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('column', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('row', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getRowOffset: function getRowOffset(props, index, instanceProps) {\n    return getItemMetadata('row', props, index, instanceProps).offset;\n  },\n  getRowHeight: function getRowHeight(props, index, instanceProps) {\n    return instanceProps.rowMetadataMap[index].size;\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {\n    return findNearestItem('row', props, instanceProps, scrollTop);\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {\n    var rowCount = props.rowCount,\n      height = props.height;\n    var itemMetadata = getItemMetadata('row', props, startIndex, instanceProps);\n    var maxOffset = scrollTop + height;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref5 = props,\n      estimatedColumnWidth = _ref5.estimatedColumnWidth,\n      estimatedRowHeight = _ref5.estimatedRowHeight;\n    var instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {}\n    };\n    instance.resetAfterColumnIndex = function (columnIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n      instance.resetAfterIndices({\n        columnIndex: columnIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n    instance.resetAfterRowIndex = function (rowIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n      instance.resetAfterIndices({\n        rowIndex: rowIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n    instance.resetAfterIndices = function (_ref6) {\n      var columnIndex = _ref6.columnIndex,\n        rowIndex = _ref6.rowIndex,\n        _ref6$shouldForceUpda = _ref6.shouldForceUpdate,\n        shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);\n      } // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref7) {\n    var columnWidth = _ref7.columnWidth,\n      rowHeight = _ref7.rowHeight;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      } else if (typeof rowHeight !== 'function') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;\nvar defaultItemKey$1 = function defaultItemKey(index, data) {\n  return index;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\nvar devWarningsDirection = null;\nvar devWarningsTagName$1 = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = /*#__PURE__*/new WeakSet();\n    devWarningsTagName$1 = /*#__PURE__*/new WeakSet();\n  }\n}\nfunction createListComponent(_ref) {\n  var _class;\n  var getItemOffset = _ref.getItemOffset,\n    getEstimatedTotalSize = _ref.getEstimatedTotalSize,\n    getItemSize = _ref.getItemSize,\n    getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,\n    getStartIndexForOffset = _ref.getStartIndexForOffset,\n    getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,\n    initInstanceProps = _ref.initInstanceProps,\n    shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,\n    validateProps = _ref.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(List, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function List(props) {\n      var _this;\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));\n      _this._outerRef = void 0;\n      _this._resetIsScrollingTimeoutId = null;\n      _this.state = {\n        instance: _assertThisInitialized(_this),\n        isScrolling: false,\n        scrollDirection: 'forward',\n        scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,\n        scrollUpdateWasRequested: false\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanStartIndex: overscanStartIndex,\n          overscanStopIndex: overscanStopIndex,\n          visibleStartIndex: visibleStartIndex,\n          visibleStopIndex: visibleStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          scrollDirection: scrollDirection,\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n      _this._getItemStyle = function (index) {\n        var _this$props = _this.props,\n          direction = _this$props.direction,\n          itemSize = _this$props.itemSize,\n          layout = _this$props.layout;\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);\n        var style;\n        if (itemStyleCache.hasOwnProperty(index)) {\n          style = itemStyleCache[index];\n        } else {\n          var _offset = getItemOffset(_this.props, index, _this._instanceProps);\n          var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction \"horizontal\"\n\n          var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n          var isRtl = direction === 'rtl';\n          var offsetHorizontal = isHorizontal ? _offset : 0;\n          itemStyleCache[index] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : offsetHorizontal,\n            right: isRtl ? offsetHorizontal : undefined,\n            top: !isHorizontal ? _offset : 0,\n            height: !isHorizontal ? size : '100%',\n            width: isHorizontal ? size : '100%'\n          };\n        }\n        return style;\n      };\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n      _this._onScrollHorizontal = function (event) {\n        var _event$currentTarget = event.currentTarget,\n          clientWidth = _event$currentTarget.clientWidth,\n          scrollLeft = _event$currentTarget.scrollLeft,\n          scrollWidth = _event$currentTarget.scrollWidth;\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollLeft) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n          var direction = _this.props.direction;\n          var scrollOffset = scrollLeft;\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n            // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                scrollOffset = -scrollLeft;\n                break;\n              case 'positive-descending':\n                scrollOffset = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n      _this._onScrollVertical = function (event) {\n        var _event$currentTarget2 = event.currentTarget,\n          clientHeight = _event$currentTarget2.clientHeight,\n          scrollHeight = _event$currentTarget2.scrollHeight,\n          scrollTop = _event$currentTarget2.scrollTop;\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);\n      };\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1, null);\n        });\n      };\n      return _this;\n    }\n    List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps$1(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n    var _proto = List.prototype;\n    _proto.scrollTo = function scrollTo(scrollOffset) {\n      scrollOffset = Math.max(0, scrollOffset);\n      this.setState(function (prevState) {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n    _proto.scrollToItem = function scrollToItem(index, align) {\n      if (align === void 0) {\n        align = 'auto';\n      }\n      var _this$props2 = this.props,\n        itemCount = _this$props2.itemCount,\n        layout = _this$props2.layout;\n      var scrollOffset = this.state.scrollOffset;\n      index = Math.max(0, Math.min(index, itemCount - 1)); // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n\n      var scrollbarSize = 0;\n      if (this._outerRef) {\n        var outerRef = this._outerRef;\n        if (layout === 'vertical') {\n          scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;\n        } else {\n          scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;\n        }\n      }\n      this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps, scrollbarSize));\n    };\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n        direction = _this$props3.direction,\n        initialScrollOffset = _this$props3.initialScrollOffset,\n        layout = _this$props3.layout;\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var _this$props4 = this.props,\n        direction = _this$props4.direction,\n        layout = _this$props4.layout;\n      var _this$state = this.state,\n        scrollOffset = _this$state.scrollOffset,\n        scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                var clientWidth = outerRef.clientWidth,\n                  scrollWidth = outerRef.scrollWidth;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n    _proto.render = function render() {\n      var _this$props5 = this.props,\n        children = _this$props5.children,\n        className = _this$props5.className,\n        direction = _this$props5.direction,\n        height = _this$props5.height,\n        innerRef = _this$props5.innerRef,\n        innerElementType = _this$props5.innerElementType,\n        innerTagName = _this$props5.innerTagName,\n        itemCount = _this$props5.itemCount,\n        itemData = _this$props5.itemData,\n        _this$props5$itemKey = _this$props5.itemKey,\n        itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey,\n        layout = _this$props5.layout,\n        outerElementType = _this$props5.outerElementType,\n        outerTagName = _this$props5.outerTagName,\n        style = _this$props5.style,\n        useIsScrolling = _this$props5.useIsScrolling,\n        width = _this$props5.width;\n      var isScrolling = this.state.isScrolling; // TODO Deprecate direction \"horizontal\"\n\n      var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;\n      var _this$_getRangeToRend = this._getRangeToRender(),\n        startIndex = _this$_getRangeToRend[0],\n        stopIndex = _this$_getRangeToRend[1];\n      var items = [];\n      if (itemCount > 0) {\n        for (var _index = startIndex; _index <= stopIndex; _index++) {\n          items.push(createElement(children, {\n            data: itemData,\n            key: itemKey(_index, itemData),\n            index: _index,\n            isScrolling: useIsScrolling ? isScrolling : undefined,\n            style: this._getItemStyle(_index)\n          }));\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n      var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: isHorizontal ? '100%' : estimatedTotalSize,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: isHorizontal ? estimatedTotalSize : '100%'\n        }\n      }));\n    };\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        var itemCount = this.props.itemCount;\n        if (itemCount > 0) {\n          var _this$_getRangeToRend2 = this._getRangeToRender(),\n            _overscanStartIndex = _this$_getRangeToRend2[0],\n            _overscanStopIndex = _this$_getRangeToRend2[1],\n            _visibleStartIndex = _this$_getRangeToRend2[2],\n            _visibleStopIndex = _this$_getRangeToRend2[3];\n          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);\n        }\n      }\n      if (typeof this.props.onScroll === 'function') {\n        var _this$state2 = this.state,\n          _scrollDirection = _this$state2.scrollDirection,\n          _scrollOffset = _this$state2.scrollOffset,\n          _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n\n    _proto._getRangeToRender = function _getRangeToRender() {\n      var _this$props6 = this.props,\n        itemCount = _this$props6.itemCount,\n        overscanCount = _this$props6.overscanCount;\n      var _this$state3 = this.state,\n        isScrolling = _this$state3.isScrolling,\n        scrollDirection = _this$state3.scrollDirection,\n        scrollOffset = _this$state3.scrollOffset;\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n      var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);\n      var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;\n      var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n    return List;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    layout: 'vertical',\n    overscanCount: 2,\n    useIsScrolling: false\n  }, _class;\n} // NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nvar validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {\n  var children = _ref2.children,\n    direction = _ref2.direction,\n    height = _ref2.height,\n    layout = _ref2.layout,\n    innerTagName = _ref2.innerTagName,\n    outerTagName = _ref2.outerTagName,\n    width = _ref2.width;\n  var instance = _ref3.instance;\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {\n        devWarningsTagName$1.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    } // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn('The direction prop should be either \"ltr\" (default) or \"rtl\". ' + 'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.');\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error('An invalid \"layout\" prop has been specified. ' + 'Value should be either \"horizontal\" or \"vertical\". ' + (\"\\\"\" + layout + \"\\\" was specified.\"));\n    }\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Horizontal lists must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Vertical lists must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\nvar DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;\nvar getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {\n  var _ref = props,\n    itemSize = _ref.itemSize;\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n    lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n    instanceProps.lastMeasuredIndex = index;\n  }\n  return itemMetadataMap[index];\n};\nvar findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n    lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\nvar findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nvar findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {\n  var itemCount = props.itemCount;\n  var interval = 1;\n  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\nvar getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {\n  var itemCount = _ref2.itemCount;\n  var itemMetadataMap = _ref3.itemMetadataMap,\n    estimatedItemSize = _ref3.estimatedItemSize,\n    lastMeasuredIndex = _ref3.lastMeasuredIndex;\n  var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n  if (lastMeasuredIndex >= 0) {\n    var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\nvar VariableSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(props, index, instanceProps) {\n    return getItemMetadata$1(props, index, instanceProps).offset;\n  },\n  getItemSize: function getItemSize(props, index, instanceProps) {\n    return instanceProps.itemMetadataMap[index].size;\n  },\n  getEstimatedTotalSize: getEstimatedTotalSize,\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    var direction = props.direction,\n      height = props.height,\n      layout = props.layout,\n      width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n\n    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n    var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size + scrollbarSize);\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {\n    return findNearestItem$1(props, instanceProps, offset);\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {\n    var direction = props.direction,\n      height = props.height,\n      itemCount = props.itemCount,\n      layout = props.layout,\n      width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);\n    var maxOffset = scrollOffset + size;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;\n    }\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref4 = props,\n      estimatedItemSize = _ref4.estimatedItemSize;\n    var instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,\n      lastMeasuredIndex: -1\n    };\n    instance.resetAfterIndex = function (index, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref5) {\n    var itemSize = _ref5.itemSize;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return index * columnWidth;\n  },\n  getColumnWidth: function getColumnWidth(_ref2, index) {\n    var columnWidth = _ref2.columnWidth;\n    return columnWidth;\n  },\n  getRowOffset: function getRowOffset(_ref3, index) {\n    var rowHeight = _ref3.rowHeight;\n    return index * rowHeight;\n  },\n  getRowHeight: function getRowHeight(_ref4, index) {\n    var rowHeight = _ref4.rowHeight;\n    return rowHeight;\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {\n    var rowCount = _ref5.rowCount,\n      rowHeight = _ref5.rowHeight;\n    return rowHeight * rowCount;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {\n    var columnCount = _ref6.columnCount,\n      columnWidth = _ref6.columnWidth;\n    return columnWidth * columnCount;\n  },\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {\n    var columnCount = _ref7.columnCount,\n      columnWidth = _ref7.columnWidth,\n      width = _ref7.width;\n    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);\n    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {\n    var rowHeight = _ref8.rowHeight,\n      height = _ref8.height,\n      rowCount = _ref8.rowCount;\n    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);\n    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {\n    var columnWidth = _ref9.columnWidth,\n      columnCount = _ref9.columnCount;\n    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {\n    var columnWidth = _ref10.columnWidth,\n      columnCount = _ref10.columnCount,\n      width = _ref10.width;\n    var left = startIndex * columnWidth;\n    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(columnCount - 1, startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n    ));\n  },\n\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {\n    var rowHeight = _ref11.rowHeight,\n      rowCount = _ref11.rowCount;\n    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {\n    var rowHeight = _ref12.rowHeight,\n      rowCount = _ref12.rowCount,\n      height = _ref12.height;\n    var top = startIndex * rowHeight;\n    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(rowCount - 1, startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n    ));\n  },\n\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref13) {\n    var columnWidth = _ref13.columnWidth,\n      rowHeight = _ref13.rowHeight;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      }\n      if (typeof rowHeight !== 'number') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(_ref, index) {\n    var itemSize = _ref.itemSize;\n    return index * itemSize;\n  },\n  getItemSize: function getItemSize(_ref2, index) {\n    var itemSize = _ref2.itemSize;\n    return itemSize;\n  },\n  getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {\n    var itemCount = _ref3.itemCount,\n      itemSize = _ref3.itemSize;\n    return itemSize * itemCount;\n  },\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    var direction = _ref4.direction,\n      height = _ref4.height,\n      itemCount = _ref4.itemCount,\n      itemSize = _ref4.itemSize,\n      layout = _ref4.layout,\n      width = _ref4.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var lastItemOffset = Math.max(0, itemCount * itemSize - size);\n    var maxOffset = Math.min(lastItemOffset, index * itemSize);\n    var minOffset = Math.max(0, index * itemSize - size + itemSize + scrollbarSize);\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        {\n          // \"Centered\" offset is usually the average of the min and max.\n          // But near the edges of the list, this doesn't hold true.\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(size / 2)) {\n            return 0; // near the beginning\n          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n            return lastItemOffset; // near the end\n          } else {\n            return middleOffset;\n          }\n        }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {\n    var itemCount = _ref5.itemCount,\n      itemSize = _ref5.itemSize;\n    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {\n    var direction = _ref6.direction,\n      height = _ref6.height,\n      itemCount = _ref6.itemCount,\n      itemSize = _ref6.itemSize,\n      layout = _ref6.layout,\n      width = _ref6.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var offset = startIndex * itemSize;\n    var size = isHorizontal ? width : height;\n    var numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n    return Math.max(0, Math.min(itemCount - 1, startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n    ));\n  },\n\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref7) {\n    var itemSize = _ref7.itemSize;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nfunction shallowDiffers(prev, next) {\n  for (var attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (var _attribute in next) {\n    if (prev[_attribute] !== next[_attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\nvar _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\n\nfunction areEqual(prevProps, nextProps) {\n  var prevStyle = prevProps.style,\n    prevRest = _objectWithoutPropertiesLoose(prevProps, _excluded);\n  var nextStyle = nextProps.style,\n    nextRest = _objectWithoutPropertiesLoose(nextProps, _excluded2);\n  return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);\n}\n\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\n\nfunction shouldComponentUpdate(nextProps, nextState) {\n  return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);\n}\nexport { FixedSizeGrid, FixedSizeList, VariableSizeGrid, VariableSizeList, areEqual, shouldComponentUpdate };","map":{"version":3,"mappings":";;;;;;;AAEA;AACA;AAEA,IAAMA,uBAAuB,GAC3B,OAAOC,WAAP,KAAuB,QAAvB,IAAmC,OAAOA,WAAW,CAACC,GAAnB,KAA2B,UADhE;AAGA,IAAMA,GAAG,GAAGF,uBAAuB,GAC/B;EAAA,OAAMC,WAAW,CAACC,GAAZ,EAAN;AAAA,CAD+B,GAE/B;EAAA,OAAMC,IAAI,CAACD,GAAL,EAAN;AAAA,CAFJ;AAQO,SAASE,aAAT,CAAuBC,SAAvB,EAA6C;EAClDC,oBAAoB,CAACD,SAAS,CAACE,EAAX,CAApB;AACD;AAEM,SAASC,cAAT,CAAwBC,QAAxB,EAA4CC,KAA5C,EAAsE;EAC3E,IAAMC,KAAK,GAAGT,GAAG,EAAjB;EAEA,SAASU,IAAT,GAAgB;IACd,IAAIV,GAAG,KAAKS,KAAR,IAAiBD,KAArB,EAA4B;MAC1BD,QAAQ,CAACI,IAAT,CAAc,IAAd;IACD,CAFD,MAEO;MACLR,SAAS,CAACE,EAAV,GAAeO,qBAAqB,CAACF,IAAD,CAApC;IACD;EACF;EAED,IAAMP,SAAoB,GAAG;IAC3BE,EAAE,EAAEO,qBAAqB,CAACF,IAAD;EADE,CAA7B;EAIA,OAAOP,SAAP;AACD;AClCD,IAAIU,IAAY,GAAG,CAAC,CAApB;;AAGA,SAAgBC,gBAAT,CAA0BC,WAA1B,EAAiE;EAAA,IAAvCA,WAAuC;IAAvCA,WAAuC,GAAf,KAAe;EAAA;EACtE,IAAIF,IAAI,KAAK,CAAC,CAAV,IAAeE,WAAnB,EAAgC;IAC9B,IAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAZ;IACA,IAAMC,KAAK,GAAGH,GAAG,CAACG,KAAlB;IACAA,KAAK,CAACC,KAAN,GAAc,MAAd;IACAD,KAAK,CAACE,MAAN,GAAe,MAAf;IACAF,KAAK,CAACG,QAAN,GAAiB,QAAjB;IAEEL,QAAQ,CAACM,IAAX,CAAwCC,WAAxC,CAAoDR,GAApD;IAEAH,IAAI,GAAGG,GAAG,CAACS,WAAJ,GAAkBT,GAAG,CAACU,WAA7B;IAEET,QAAQ,CAACM,IAAX,CAAwCI,WAAxC,CAAoDX,GAApD;EACD;EAED,OAAOH,IAAP;AACD;AAOD,IAAIe,eAAqC,GAAG,IAA5C;AAGA;AACA;AACA;AACA;AACA;;AACA,SAAgBC,gBAAT,CAA0Bd,WAA1B,EAAwE;EAAA,IAA9CA,WAA8C;IAA9CA,WAA8C,GAAtB,KAAsB;EAAA;EAC7E,IAAIa,eAAe,KAAK,IAApB,IAA4Bb,WAAhC,EAA6C;IAC3C,IAAMe,QAAQ,GAAGb,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAjB;IACA,IAAMa,UAAU,GAAGD,QAAQ,CAACX,KAA5B;IACAY,UAAU,CAACX,KAAX,GAAmB,MAAnB;IACAW,UAAU,CAACV,MAAX,GAAoB,MAApB;IACAU,UAAU,CAACT,QAAX,GAAsB,QAAtB;IACAS,UAAU,CAACC,SAAX,GAAuB,KAAvB;IAEA,IAAMC,QAAQ,GAAGhB,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAjB;IACA,IAAMgB,UAAU,GAAGD,QAAQ,CAACd,KAA5B;IACAe,UAAU,CAACd,KAAX,GAAmB,OAAnB;IACAc,UAAU,CAACb,MAAX,GAAoB,OAApB;IAEAS,QAAQ,CAACN,WAAT,CAAqBS,QAArB;IAEEhB,QAAQ,CAACM,IAAX,CAAwCC,WAAxC,CAAoDM,QAApD;IAEA,IAAIA,QAAQ,CAACK,UAAT,GAAsB,CAA1B,EAA6B;MAC3BP,eAAe,GAAG,qBAAlB;IACD,CAFD,MAEO;MACLE,QAAQ,CAACK,UAAT,GAAsB,CAAtB;MACA,IAAIL,QAAQ,CAACK,UAAT,KAAwB,CAA5B,EAA+B;QAC7BP,eAAe,GAAG,UAAlB;MACD,CAFD,MAEO;QACLA,eAAe,GAAG,oBAAlB;MACD;IACF;IAECX,QAAQ,CAACM,IAAX,CAAwCI,WAAxC,CAAoDG,QAApD;IAEA,OAAOF,eAAP;EACD;EAED,OAAOA,eAAP;AACD;ACuED,IAAMQ,8BAA8B,GAAG,GAAvC;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;EAAA,IAAGC,WAAH,QAAGA,WAAH;IAAgBC,IAAhB,QAAgBA,IAAhB;IAAsBC,QAAtB,QAAsBA,QAAtB;EAAA,OAClBA,QADkB,SACNF,WADM;AAAA,CAAvB;AAIA;;AACA,IAAIG,wBAAwB,GAAG,IAA/B;AACA,IAAIC,mCAAmC,GAAG,IAA1C;AACA,IAAIC,kBAAkB,GAAG,IAAzB;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;EACzC,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,OAAd,KAA0B,WAA/D,EAA4E;IAC1EP,wBAAwB,gBAAG,IAAIO,OAAJ,EAA3B;IACAN,mCAAmC,gBAAG,IAAIM,OAAJ,EAAtC;IACAL,kBAAkB,gBAAG,IAAIK,OAAJ,EAArB;EACD;AACF;AAED,SAAwBC,mBAAT,QAgCX;EAAA;EAAA,IA/BFC,eA+BE,SA/BFA,eA+BE;IA9BFC,4BA8BE,SA9BFA,4BA8BE;IA7BFC,+BA6BE,SA7BFA,+BA6BE;IA5BFC,cA4BE,SA5BFA,cA4BE;IA3BFC,uBA2BE,SA3BFA,uBA2BE;IA1BFC,sBA0BE,SA1BFA,sBA0BE;IAzBFC,8BAyBE,SAzBFA,8BAyBE;IAxBFC,2BAwBE,SAxBFA,2BAwBE;IAvBFC,YAuBE,SAvBFA,YAuBE;IAtBFC,YAsBE,SAtBFA,YAsBE;IArBFC,yBAqBE,SArBFA,yBAqBE;IApBFC,4BAoBE,SApBFA,4BAoBE;IAnBFC,iBAmBE,SAnBFA,iBAmBE;IAlBFC,qCAkBE,SAlBFA,qCAkBE;IAjBFC,aAiBE,SAjBFA,aAiBE;EACF;IAAAC;;IA2BE;IACA;IACA;IACA,cAAYC,KAAZ,EAA6B;MAAA;MAC3BC,kCAAMD,KAAN;MAD2BC,MA7B7BC,cA6B6B,GA7BPN,iBAAiB,CAACK,MAAKD,KAAN,gCA6BV;MAAAC,MA5B7BE,0BA4B6B,GA5BkB,IA4BlB;MAAAF,MA3B7BG,SA2B6B;MAAAH,MAnB7BI,KAmB6B,GAnBd;QACbC,QAAQ,+BADK;QAEbC,WAAW,EAAE,KAFA;QAGbC,yBAAyB,EAAE,SAHd;QAIbvC,UAAU,EACR,OAAOgC,MAAKD,KAAL,CAAWS,iBAAlB,KAAwC,QAAxC,GACIR,MAAKD,KAAL,CAAWS,iBADf,GAEI,CAPO;QAQbC,SAAS,EACP,OAAOT,MAAKD,KAAL,CAAWW,gBAAlB,KAAuC,QAAvC,GACIV,MAAKD,KAAL,CAAWW,gBADf,GAEI,CAXO;QAYbC,wBAAwB,EAAE,KAZb;QAabC,uBAAuB,EAAE;MAbZ,CAmBc;MAAAZ,MAwQ7Ba,oBAxQ6B;MAAAb,MAkR7Ba,oBAlR6B,GAkRNC,UAAU,CAC/B,UACEC,wBADF,EAEEC,uBAFF,EAGEC,qBAHF,EAIEC,oBAJF,EAKEC,uBALF,EAMEC,sBANF,EAOEC,oBAPF,EAQEC,mBARF;QAAA,OAUItB,MAAKD,KAAL,CAAWwB,eAAb,CAA6D;UAC3DR,wBAAwB,EAAxBA,wBAD2D;UAE3DC,uBAAuB,EAAvBA,uBAF2D;UAG3DC,qBAAqB,EAArBA,qBAH2D;UAI3DC,oBAAoB,EAApBA,oBAJ2D;UAK3DC,uBAAuB,EAAvBA,uBAL2D;UAM3DC,sBAAsB,EAAtBA,sBAN2D;UAO3DC,oBAAoB,EAApBA,oBAP2D;UAQ3DC,mBAAmB,EAAnBA;QAR2D,CAA7D,CAVF;MAAA,CAD+B,CAlRJ;MAAAtB,MAyS7BwB,aAzS6B;MAAAxB,MAgT7BwB,aAhT6B,GAgTbV,UAAU,CACxB,UACE9C,UADF,EAEEyC,SAFF,EAGEF,yBAHF,EAIEK,uBAJF,EAKED,wBALF;QAAA,OAOIX,MAAKD,KAAL,CAAW0B,QAAb,CAA+C;UAC7ClB,yBAAyB,EAAzBA,yBAD6C;UAE7CvC,UAAU,EAAVA,UAF6C;UAG7CyC,SAAS,EAATA,SAH6C;UAI7CG,uBAAuB,EAAvBA,uBAJ6C;UAK7CD,wBAAwB,EAAxBA;QAL6C,CAA/C,CAPF;MAAA,CADwB,CAhTG;MAAAX,MAqX7B0B,aArX6B;MAAA1B,MAsX7B0B,aAtX6B,GAsXb,UAACrD,QAAD,EAAmBF,WAAnB,EAAmD;QACjE,kBAA8C6B,MAAKD,KAAnD;UAAQ4B,WAAR,eAAQA,WAAR;UAAqB9D,SAArB,eAAqBA,SAArB;UAAgC+D,SAAhC,eAAgCA,SAAhC;QAEA,IAAMC,cAAc,GAAG7B,MAAK8B,kBAAL,CACrBlC,qCAAqC,IAAI+B,WADpB,EAErB/B,qCAAqC,IAAI/B,SAFpB,EAGrB+B,qCAAqC,IAAIgC,SAHpB,CAAvB;QAMA,IAAMG,GAAG,GAAM1D,QAAN,SAAkBF,WAA3B;QAEA,IAAInB,KAAJ;QACA,IAAI6E,cAAc,CAACG,cAAf,CAA8BD,GAA9B,CAAJ,EAAwC;UACtC/E,KAAK,GAAG6E,cAAc,CAACE,GAAD,CAAtB;QACD,CAFD,MAEO;UACL,IAAME,OAAM,GAAGlD,eAAe,CAC5BiB,MAAKD,KADuB,EAE5B5B,WAF4B,EAG5B6B,MAAKC,cAHuB,CAA9B;UAKA,IAAMiC,KAAK,GAAGrE,SAAS,KAAK,KAA5B;UACAgE,cAAc,CAACE,GAAD,CAAd,GAAsB/E,KAAK,GAAG;YAC5BmF,QAAQ,EAAE,UADkB;YAE5BC,IAAI,EAAEF,KAAK,GAAGG,SAAH,GAAeJ,OAFE;YAG5BK,KAAK,EAAEJ,KAAK,GAAGD,OAAH,GAAYI,SAHI;YAI5BE,GAAG,EAAE/C,YAAY,CAACQ,MAAKD,KAAN,EAAa1B,QAAb,EAAuB2B,MAAKC,cAA5B,CAJW;YAK5B/C,MAAM,EAAEqC,YAAY,CAACS,MAAKD,KAAN,EAAa1B,QAAb,EAAuB2B,MAAKC,cAA5B,CALQ;YAM5BhD,KAAK,EAAEiC,cAAc,CAACc,MAAKD,KAAN,EAAa5B,WAAb,EAA0B6B,MAAKC,cAA/B;UANO,CAA9B;QAQD;QAED,OAAOjD,KAAP;MACD,CAtZ4B;MAAAgD,MAwZ7B8B,kBAxZ6B;MAAA9B,MAyZ7B8B,kBAzZ6B,GAyZRhB,UAAU,CAAC,UAAC0B,CAAD,EAASC,EAAT,EAAkBC,GAAlB;QAAA,OAAgC,EAAhC;MAAA,CAAD,CAzZF;MAAA1C,MA2f7B2C,SA3f6B,GA2fjB,UAACC,KAAD,EAA8B;QACxC,2BAOIA,KAAK,CAACC,aAPV;UACEC,YADF,wBACEA,YADF;UAEEvF,WAFF,wBAEEA,WAFF;UAGES,UAHF,wBAGEA,UAHF;UAIEyC,SAJF,wBAIEA,SAJF;UAKEsC,YALF,wBAKEA,YALF;UAMEC,WANF,wBAMEA,WANF;QAQAhD,MAAKiD,QAAL,CAAc,mBAAS,EAAI;UACzB,IACEC,SAAS,CAAClF,UAAV,KAAyBA,UAAzB,IACAkF,SAAS,CAACzC,SAAV,KAAwBA,SAF1B,EAGE;YACA;YACA;YACA;YACA,OAAO,IAAP;UACD;UAED,IAAQ5C,SAAR,GAAsBmC,MAAKD,KAA3B,CAAQlC,SAAR,CAXyB;UAczB;UACA;UACA;;UACA,IAAIsF,oBAAoB,GAAGnF,UAA3B;UACA,IAAIH,SAAS,KAAK,KAAlB,EAAyB;YACvB,QAAQH,gBAAgB,EAAxB;cACE,KAAK,UAAL;gBACEyF,oBAAoB,GAAG,CAACnF,UAAxB;gBACA;cACF,KAAK,qBAAL;gBACEmF,oBAAoB,GAAGH,WAAW,GAAGzF,WAAd,GAA4BS,UAAnD;gBACA;YAAA;UAEL,CA3BwB;;UA8BzBmF,oBAAoB,GAAGC,IAAI,CAACC,GAAL,CACrB,CADqB,EAErBD,IAAI,CAACE,GAAL,CAASH,oBAAT,EAA+BH,WAAW,GAAGzF,WAA7C,CAFqB,CAAvB;UAIA,IAAMgG,mBAAmB,GAAGH,IAAI,CAACC,GAAL,CAC1B,CAD0B,EAE1BD,IAAI,CAACE,GAAL,CAAS7C,SAAT,EAAoBsC,YAAY,GAAGD,YAAnC,CAF0B,CAA5B;UAKA,OAAO;YACLxC,WAAW,EAAE,IADR;YAELC,yBAAyB,EACvB2C,SAAS,CAAClF,UAAV,GAAuBA,UAAvB,GAAoC,SAApC,GAAgD,UAH7C;YAILA,UAAU,EAAEmF,oBAJP;YAKL1C,SAAS,EAAE8C,mBALN;YAML3C,uBAAuB,EACrBsC,SAAS,CAACzC,SAAV,GAAsBA,SAAtB,GAAkC,SAAlC,GAA8C,UAP3C;YAQLE,wBAAwB,EAAE;UARrB,CAAP;QAUD,CAjDD,EAiDGX,MAAKwD,0BAjDR;MAkDD,CAtjB4B;MAAAxD,MAwjB7ByD,eAxjB6B,GAwjBX,UAACC,GAAD,EAAoB;QACpC,IAAQC,QAAR,GAAqB3D,MAAKD,KAA1B,CAAQ4D,QAAR;QAEA3D,MAAKG,SAAL,GAAmBuD,GAAnB;QAEA,IAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;UAClCA,QAAQ,CAACD,GAAD,CAAR;QACD,CAFD,MAEO,IACLC,QAAQ,IAAI,IAAZ,IACA,OAAOA,QAAP,KAAoB,QADpB,IAEAA,QAAQ,CAAC3B,cAAT,CAAwB,SAAxB,CAHK,EAIL;UACA2B,QAAQ,CAACC,OAAT,GAAmBF,GAAnB;QACD;MACF,CAtkB4B;MAAA1D,MAwkB7BwD,0BAxkB6B,GAwkBA,YAAM;QACjC,IAAIxD,MAAKE,0BAAL,KAAoC,IAAxC,EAA8C;UAC5CnE,aAAa,CAACiE,MAAKE,0BAAN,CAAb;QACD;QAEDF,MAAKE,0BAAL,GAAkC/D,cAAc,CAC9C6D,MAAK6D,iBADyC,EAE9C5F,8BAF8C,CAAhD;MAID,CAjlB4B;MAAA+B,MAmlB7B6D,iBAnlB6B,GAmlBT,YAAM;QACxB7D,MAAKE,0BAAL,GAAkC,IAAlC;QAEAF,MAAKiD,QAAL,CAAc;UAAE3C,WAAW,EAAE;QAAf,CAAd,EAAsC,YAAM;UAC1C;UACA;UACAN,MAAK8B,kBAAL,CAAwB,CAAC,CAAzB;QACD,CAJD;MAKD,CA3lB4B;MAAA;IAE5B;IAhCHgC,KAkCSC,wBAlCT,GAkCE,kCACEC,SADF,EAEEd,SAFF,EAGwB;MACtBe,mBAAmB,CAACD,SAAD,EAAYd,SAAZ,CAAnB;MACArD,aAAa,CAACmE,SAAD,CAAb;MACA,OAAO,IAAP;IACD,CAzCH;IAAA;IAAAE,OA2CEC,QA3CF,GA2CE,yBAMS;MAAA,IALPnG,UAKO,SALPA,UAKO;QAJPyC,SAIO,SAJPA,SAIO;MACP,IAAIzC,UAAU,KAAKqE,SAAnB,EAA8B;QAC5BrE,UAAU,GAAGoF,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYrF,UAAZ,CAAb;MACD;MACD,IAAIyC,SAAS,KAAK4B,SAAlB,EAA6B;QAC3B5B,SAAS,GAAG2C,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY5C,SAAZ,CAAZ;MACD;MAED,KAAKwC,QAAL,CAAc,mBAAS,EAAI;QACzB,IAAIjF,UAAU,KAAKqE,SAAnB,EAA8B;UAC5BrE,UAAU,GAAGkF,SAAS,CAAClF,UAAvB;QACD;QACD,IAAIyC,SAAS,KAAK4B,SAAlB,EAA6B;UAC3B5B,SAAS,GAAGyC,SAAS,CAACzC,SAAtB;QACD;QAED,IACEyC,SAAS,CAAClF,UAAV,KAAyBA,UAAzB,IACAkF,SAAS,CAACzC,SAAV,KAAwBA,SAF1B,EAGE;UACA,OAAO,IAAP;QACD;QAED,OAAO;UACLF,yBAAyB,EACvB2C,SAAS,CAAClF,UAAV,GAAuBA,UAAvB,GAAoC,SAApC,GAAgD,UAF7C;UAGLA,UAAU,EAAEA,UAHP;UAILyC,SAAS,EAAEA,SAJN;UAKLE,wBAAwB,EAAE,IALrB;UAMLC,uBAAuB,EACrBsC,SAAS,CAACzC,SAAV,GAAsBA,SAAtB,GAAkC,SAAlC,GAA8C;QAP3C,CAAP;MASD,CAxBD,EAwBG,KAAK+C,0BAxBR;IAyBD,CAlFH;IAAAU,OAoFEE,YApFF,GAoFE,6BAQS;MAAA,wBAPPC,KAOO;QAPPA,KAOO,4BAPC,MAOD;QANPlG,WAMO,SANPA,WAMO;QALPE,QAKO,SALPA,QAKO;MACP,mBAAiD,KAAK0B,KAAtD;QAAQuE,WAAR,gBAAQA,WAAR;QAAqBpH,MAArB,gBAAqBA,MAArB;QAA6BqH,QAA7B,gBAA6BA,QAA7B;QAAuCtH,KAAvC,gBAAuCA,KAAvC;MACA,kBAAkC,KAAKmD,KAAvC;QAAQpC,UAAR,eAAQA,UAAR;QAAoByC,SAApB,eAAoBA,SAApB;MACA,IAAM+D,aAAa,GAAG7H,gBAAgB,EAAtC;MAEA,IAAIwB,WAAW,KAAKkE,SAApB,EAA+B;QAC7BlE,WAAW,GAAGiF,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAASnF,WAAT,EAAsBmG,WAAW,GAAG,CAApC,CAAZ,CAAd;MACD;MACD,IAAIjG,QAAQ,KAAKgE,SAAjB,EAA4B;QAC1BhE,QAAQ,GAAG+E,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAASjF,QAAT,EAAmBkG,QAAQ,GAAG,CAA9B,CAAZ,CAAX;MACD;MAED,IAAME,oBAAoB,GAAGtF,uBAAuB,CAClD,KAAKY,KAD6C,EAElD,KAAKE,cAF6C,CAApD;MAIA,IAAMyE,mBAAmB,GAAGtF,sBAAsB,CAChD,KAAKW,KAD2C,EAEhD,KAAKE,cAF2C,CAAlD,CAhBO;MAsBP;MACA;;MACA,IAAM0E,uBAAuB,GAC3BD,mBAAmB,GAAGzH,KAAtB,GAA8BuH,aAA9B,GAA8C,CADhD;MAEA,IAAMI,qBAAqB,GACzBH,oBAAoB,GAAGvH,MAAvB,GAAgCsH,aAAhC,GAAgD,CADlD;MAGA,KAAKL,QAAL,CAAc;QACZnG,UAAU,EACRG,WAAW,KAAKkE,SAAhB,GACIhD,8BAA8B,CAC5B,KAAKU,KADuB,EAE5B5B,WAF4B,EAG5BkG,KAH4B,EAI5BrG,UAJ4B,EAK5B,KAAKiC,cALuB,EAM5B2E,qBAN4B,CADlC,GASI5G,UAXM;QAYZyC,SAAS,EACPpC,QAAQ,KAAKgE,SAAb,GACI/C,2BAA2B,CACzB,KAAKS,KADoB,EAEzB1B,QAFyB,EAGzBgG,KAHyB,EAIzB5D,SAJyB,EAKzB,KAAKR,cALoB,EAMzB0E,uBANyB,CAD/B,GASIlE;MAtBM,CAAd;IAwBD,CAjJH;IAAAyD,OAmJEW,iBAnJF,GAmJE,6BAAoB;MAClB,mBAAgD,KAAK9E,KAArD;QAAQS,iBAAR,gBAAQA,iBAAR;QAA2BE,gBAA3B,gBAA2BA,gBAA3B;MAEA,IAAI,KAAKP,SAAL,IAAkB,IAAtB,EAA4B;QAC1B,IAAMwD,QAAQ,GAAK,KAAKxD,SAAxB;QACA,IAAI,OAAOK,iBAAP,KAA6B,QAAjC,EAA2C;UACzCmD,QAAQ,CAAC3F,UAAT,GAAsBwC,iBAAtB;QACD;QACD,IAAI,OAAOE,gBAAP,KAA4B,QAAhC,EAA0C;UACxCiD,QAAQ,CAAClD,SAAT,GAAqBC,gBAArB;QACD;MACF;MAED,KAAKoE,mBAAL;IACD,CAjKH;IAAAZ,OAmKEa,kBAnKF,GAmKE,8BAAqB;MACnB,IAAQlH,SAAR,GAAsB,KAAKkC,KAA3B,CAAQlC,SAAR;MACA,mBAA4D,KAAKuC,KAAjE;QAAQpC,UAAR,gBAAQA,UAAR;QAAoByC,SAApB,gBAAoBA,SAApB;QAA+BE,wBAA/B,gBAA+BA,wBAA/B;MAEA,IAAIA,wBAAwB,IAAI,KAAKR,SAAL,IAAkB,IAAlD,EAAwD;QACtD;QACA;QACA;QACA,IAAMwD,QAAQ,GAAK,KAAKxD,SAAxB;QACA,IAAItC,SAAS,KAAK,KAAlB,EAAyB;UACvB,QAAQH,gBAAgB,EAAxB;YACE,KAAK,UAAL;cACEiG,QAAQ,CAAC3F,UAAT,GAAsB,CAACA,UAAvB;cACA;YACF,KAAK,oBAAL;cACE2F,QAAQ,CAAC3F,UAAT,GAAsBA,UAAtB;cACA;YACF;cACE,IAAQT,WAAR,GAAqCoG,QAArC,CAAQpG,WAAR;gBAAqByF,WAArB,GAAqCW,QAArC,CAAqBX,WAArB;cACAW,QAAQ,CAAC3F,UAAT,GAAsBgF,WAAW,GAAGzF,WAAd,GAA4BS,UAAlD;cACA;UAAA;QAEL,CAbD,MAaO;UACL2F,QAAQ,CAAC3F,UAAT,GAAsBoF,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYrF,UAAZ,CAAtB;QACD;QAED2F,QAAQ,CAAClD,SAAT,GAAqB2C,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY5C,SAAZ,CAArB;MACD;MAED,KAAKqE,mBAAL;IACD,CAjMH;IAAAZ,OAmMEc,oBAnMF,GAmME,gCAAuB;MACrB,IAAI,KAAK9E,0BAAL,KAAoC,IAAxC,EAA8C;QAC5CnE,aAAa,CAAC,KAAKmE,0BAAN,CAAb;MACD;IACF,CAvMH;IAAAgE,OAyMEe,MAzMF,GAyME,kBAAS;MACP,mBAiBI,KAAKlF,KAjBT;QACEmF,QADF,gBACEA,QADF;QAEEC,SAFF,gBAEEA,SAFF;QAGEb,WAHF,gBAGEA,WAHF;QAIEzG,SAJF,gBAIEA,SAJF;QAKEX,MALF,gBAKEA,MALF;QAMEkI,QANF,gBAMEA,QANF;QAOEC,gBAPF,gBAOEA,gBAPF;QAQEC,YARF,gBAQEA,YARF;QASEC,QATF,gBASEA,QATF;QAAAC,oCAUEC,OAVF;QAUEA,OAVF,qCAUYvH,cAVZ;QAWEwH,gBAXF,gBAWEA,gBAXF;QAYEC,YAZF,gBAYEA,YAZF;QAaEpB,QAbF,gBAaEA,QAbF;QAcEvH,KAdF,gBAcEA,KAdF;QAeE4I,cAfF,gBAeEA,cAfF;QAgBE3I,KAhBF,gBAgBEA,KAhBF;MAkBA,IAAQqD,WAAR,GAAwB,KAAKF,KAA7B,CAAQE,WAAR;MAEA,4BAGI,KAAKuF,2BAAL,EAHJ;QACEC,gBADF;QAEEC,eAFF;MAIA,4BAAsC,KAAKC,yBAAL,EAAtC;QAAOC,aAAP;QAAsBC,YAAtB;MAEA,IAAMC,KAAK,GAAG,EAAd;MACA,IAAI7B,WAAW,GAAG,CAAd,IAAmBC,QAAvB,EAAiC;QAC/B,KACE,IAAIlG,SAAQ,GAAG4H,aADjB,EAEE5H,SAAQ,IAAI6H,YAFd,EAGE7H,SAAQ,EAHV,EAIE;UACA,KACE,IAAIF,YAAW,GAAG2H,gBADpB,EAEE3H,YAAW,IAAI4H,eAFjB,EAGE5H,YAAW,EAHb,EAIE;YACAgI,KAAK,CAACC,IAAN,CACErJ,aAAa,CAACmI,QAAD,EAAW;cACtB/G,WAAW,EAAXA,YADsB;cAEtBC,IAAI,EAAEmH,QAFgB;cAGtBjF,WAAW,EAAEsF,cAAc,GAAGtF,WAAH,GAAiB+B,SAHtB;cAItBN,GAAG,EAAE0D,OAAO,CAAC;gBAAEtH,WAAW,EAAXA,YAAF;gBAAeC,IAAI,EAAEmH,QAArB;gBAA+BlH,QAAQ,EAARA;cAA/B,CAAD,CAJU;cAKtBA,QAAQ,EAARA,SALsB;cAMtBrB,KAAK,EAAE,KAAK0E,aAAL,CAAmBrD,SAAnB,EAA6BF,YAA7B;YANe,CAAX,CADf;UAUD;QACF;MACF,CAnDM;MAsDP;;MACA,IAAMsG,oBAAoB,GAAGtF,uBAAuB,CAClD,KAAKY,KAD6C,EAElD,KAAKE,cAF6C,CAApD;MAIA,IAAMyE,mBAAmB,GAAGtF,sBAAsB,CAChD,KAAKW,KAD2C,EAEhD,KAAKE,cAF2C,CAAlD;MAKA,OAAOlD,aAAa,CAClB2I,gBAAgB,IAAIC,YAApB,IAAoC,KADlB,EAElB;QACER,SAAS,EAATA,SADF;QAEE1D,QAAQ,EAAE,KAAKkB,SAFjB;QAGEe,GAAG,EAAE,KAAKD,eAHZ;QAIEzG,KAAK;UACHmF,QAAQ,EAAE,UADP;UAEHjF,MAAM,EAANA,MAFG;UAGHD,KAAK,EAALA,KAHG;UAIHE,QAAQ,EAAE,MAJP;UAKHkJ,uBAAuB,EAAE,OALtB;UAMHC,UAAU,EAAE,WANT;UAOHzI,SAAS,EAATA;QAPG,GAQAb,KARA;MAJP,CAFkB,EAiBlBD,aAAa,CAACsI,gBAAgB,IAAIC,YAApB,IAAoC,KAArC,EAA4C;QACvDJ,QAAQ,EAAEiB,KAD6C;QAEvDzC,GAAG,EAAE0B,QAFkD;QAGvDpI,KAAK,EAAE;UACLE,MAAM,EAAEuH,oBADH;UAEL8B,aAAa,EAAEjG,WAAW,GAAG,MAAH,GAAY+B,SAFjC;UAGLpF,KAAK,EAAEyH;QAHF;MAHgD,CAA5C,CAjBK,CAApB;IA2BD,CApSH;IAAAR,OA+VEY,mBA/VF,GA+VE,+BAAsB;MACpB,mBAA6D,KAAK/E,KAAlE;QAAQuE,WAAR,gBAAQA,WAAR;QAAqB/C,eAArB,gBAAqBA,eAArB;QAAsCE,QAAtC,gBAAsCA,QAAtC;QAAgD8C,QAAhD,gBAAgDA,QAAhD;MAEA,IAAI,OAAOhD,eAAP,KAA2B,UAA/B,EAA2C;QACzC,IAAI+C,WAAW,GAAG,CAAd,IAAmBC,QAAQ,GAAG,CAAlC,EAAqC;UACnC,6BAKI,KAAKsB,2BAAL,EALJ;YACE9E,yBADF;YAEEC,wBAFF;YAGEG,wBAHF;YAIEC,uBAJF;UAMA,6BAKI,KAAK4E,yBAAL,EALJ;YACE/E,sBADF;YAEEC,qBAFF;YAGEG,qBAHF;YAIEC,oBAJF;UAMA,KAAKT,oBAAL,CACEE,yBADF,EAEEC,wBAFF,EAGEC,sBAHF,EAIEC,qBAJF,EAKEC,wBALF,EAMEC,uBANF,EAOEC,qBAPF,EAQEC,oBARF;QAUD;MACF;MAED,IAAI,OAAOG,QAAP,KAAoB,UAAxB,EAAoC;QAClC,mBAMI,KAAKrB,KANT;UACEG,0BADF,gBACEA,yBADF;UAEEvC,WAFF,gBAEEA,UAFF;UAGEyC,UAHF,gBAGEA,SAHF;UAIEE,yBAJF,gBAIEA,wBAJF;UAKEC,wBALF,gBAKEA,uBALF;QAOA,KAAKY,aAAL,CACExD,WADF,EAEEyC,UAFF,EAGEF,0BAHF,EAIEK,wBAJF,EAKED,yBALF;MAOD;IACF,CA7YH;IAgZE;IACA;IACA;IAAA;;IAlZFuD,OAybE2B,2BAzbF,GAybE,uCAAgE;MAC9D,mBAMI,KAAK9F,KANT;QACEuE,WADF,gBACEA,WADF;QAEEkC,mBAFF,gBAEEA,mBAFF;QAGEC,oBAHF,gBAGEA,oBAHF;QAIEC,aAJF,gBAIEA,aAJF;QAKEnC,QALF,gBAKEA,QALF;MAOA,mBAA+D,KAAKnE,KAApE;QAAQG,yBAAR,gBAAQA,yBAAR;QAAmCD,WAAnC,gBAAmCA,WAAnC;QAAgDtC,UAAhD,gBAAgDA,UAAhD;MAEA,IAAM2I,qBAA6B,GACjCH,mBAAmB,IAAIC,oBAAvB,IAA+CC,aAA/C,IAAgE,CADlE;MAGA,IAAIpC,WAAW,KAAK,CAAhB,IAAqBC,QAAQ,KAAK,CAAtC,EAAyC;QACvC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAP;MACD;MAED,IAAMqC,UAAU,GAAG5H,4BAA4B,CAC7C,KAAKe,KADwC,EAE7C/B,UAF6C,EAG7C,KAAKiC,cAHwC,CAA/C;MAKA,IAAM4G,SAAS,GAAG5H,+BAA+B,CAC/C,KAAKc,KAD0C,EAE/C6G,UAF+C,EAG/C5I,UAH+C,EAI/C,KAAKiC,cAJ0C,CAAjD,CAtB8D;MA8B9D;;MACA,IAAM6G,gBAAgB,GACpB,CAACxG,WAAD,IAAgBC,yBAAyB,KAAK,UAA9C,GACI6C,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYsD,qBAAZ,CADJ,GAEI,CAHN;MAIA,IAAMI,eAAe,GACnB,CAACzG,WAAD,IAAgBC,yBAAyB,KAAK,SAA9C,GACI6C,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYsD,qBAAZ,CADJ,GAEI,CAHN;MAKA,OAAO,CACLvD,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYuD,UAAU,GAAGE,gBAAzB,CADK,EAEL1D,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAASgB,WAAW,GAAG,CAAvB,EAA0BuC,SAAS,GAAGE,eAAtC,CAAZ,CAFK,EAGLH,UAHK,EAILC,SAJK,CAAP;IAMD,CAveH;IAAA3C,OAyeE8B,yBAzeF,GAyeE,qCAA8D;MAC5D,mBAMI,KAAKjG,KANT;QACEuE,WADF,gBACEA,WADF;QAEEoC,aAFF,gBAEEA,aAFF;QAGEM,gBAHF,gBAGEA,gBAHF;QAIEC,iBAJF,gBAIEA,iBAJF;QAKE1C,QALF,gBAKEA,QALF;MAOA,mBAA4D,KAAKnE,KAAjE;QAAQE,WAAR,gBAAQA,WAAR;QAAqBM,uBAArB,gBAAqBA,uBAArB;QAA8CH,SAA9C,gBAA8CA,SAA9C;MAEA,IAAMkG,qBAA6B,GACjCK,gBAAgB,IAAIC,iBAApB,IAAyCP,aAAzC,IAA0D,CAD5D;MAGA,IAAIpC,WAAW,KAAK,CAAhB,IAAqBC,QAAQ,KAAK,CAAtC,EAAyC;QACvC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAP;MACD;MAED,IAAMqC,UAAU,GAAGnH,yBAAyB,CAC1C,KAAKM,KADqC,EAE1CU,SAF0C,EAG1C,KAAKR,cAHqC,CAA5C;MAKA,IAAM4G,SAAS,GAAGnH,4BAA4B,CAC5C,KAAKK,KADuC,EAE5C6G,UAF4C,EAG5CnG,SAH4C,EAI5C,KAAKR,cAJuC,CAA9C,CAtB4D;MA8B5D;;MACA,IAAM6G,gBAAgB,GACpB,CAACxG,WAAD,IAAgBM,uBAAuB,KAAK,UAA5C,GACIwC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYsD,qBAAZ,CADJ,GAEI,CAHN;MAIA,IAAMI,eAAe,GACnB,CAACzG,WAAD,IAAgBM,uBAAuB,KAAK,SAA5C,GACIwC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYsD,qBAAZ,CADJ,GAEI,CAHN;MAKA,OAAO,CACLvD,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYuD,UAAU,GAAGE,gBAAzB,CADK,EAEL1D,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAASiB,QAAQ,GAAG,CAApB,EAAuBsC,SAAS,GAAGE,eAAnC,CAAZ,CAFK,EAGLH,UAHK,EAILC,SAJK,CAAP;IAMD,CAvhBH;IAAA;EAAA,EAA6BK,aAA7B,UAKSC,YALT,GAKwB;IACpBtJ,SAAS,EAAE,KADS;IAEpB0H,QAAQ,EAAElD,SAFU;IAGpBuD,cAAc,EAAE;EAHI,CALxB;AA2nBD;AAED,IAAM3B,mBAAmB,GAAG,SAAtBA,mBAAsB,eAajB;EAAA,IAXPiB,QAWO,SAXPA,QAWO;IAVPrH,SAUO,SAVPA,SAUO;IATPX,MASO,SATPA,MASO;IARPoI,YAQO,SARPA,YAQO;IAPPK,YAOO,SAPPA,YAOO;IANPc,oBAMO,SANPA,oBAMO;IALPC,aAKO,SALPA,aAKO;IAJPO,iBAIO,SAJPA,iBAIO;IAHPhK,KAGO,SAHPA,KAGO;EAAA,IADPoD,QACO,SADPA,QACO;EACT,IAAI5B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,IAAI,OAAO+H,aAAP,KAAyB,QAA7B,EAAuC;MACrC,IAAIpI,wBAAwB,IAAI,CAACA,wBAAwB,CAAC8I,GAAzB,CAA6B/G,QAA7B,CAAjC,EAAyE;QACvE/B,wBAAwB,CAAC+I,GAAzB,CAA6BhH,QAA7B;QACAiH,OAAO,CAACC,IAAR,CACE,iDACE,wEAFJ;MAID;IACF;IAED,IACE,OAAOd,oBAAP,KAAgC,QAAhC,IACA,OAAOQ,iBAAP,KAA6B,QAF/B,EAGE;MACA,IACE1I,mCAAmC,IACnC,CAACA,mCAAmC,CAAC6I,GAApC,CAAwC/G,QAAxC,CAFH,EAGE;QACA9B,mCAAmC,CAAC8I,GAApC,CAAwChH,QAAxC;QACAiH,OAAO,CAACC,IAAR,CACE,gFACE,wEAFJ;MAID;IACF;IAED,IAAIjC,YAAY,IAAI,IAAhB,IAAwBK,YAAY,IAAI,IAA5C,EAAkD;MAChD,IAAInH,kBAAkB,IAAI,CAACA,kBAAkB,CAAC4I,GAAnB,CAAuB/G,QAAvB,CAA3B,EAA6D;QAC3D7B,kBAAkB,CAAC6I,GAAnB,CAAuBhH,QAAvB;QACAiH,OAAO,CAACC,IAAR,CACE,mEACE,qEAFJ;MAID;IACF;IAED,IAAIrC,QAAQ,IAAI,IAAhB,EAAsB;MACpB,MAAMsC,KAAK,CACT,oDACE,qCADF,YAEMtC,QAAQ,KAAK,IAAb,GAAoB,MAApB,GAA6B,OAAOA,QAF1C,wBADS,CAAX;IAKD;IAED,QAAQrH,SAAR;MACE,KAAK,KAAL;MACA,KAAK,KAAL;QACE;QACA;MACF;QACE,MAAM2J,KAAK,CACT,qDACE,yCADF,WAEM3J,SAFN,uBADS,CAAX;IAAA;IAOJ,IAAI,OAAOZ,KAAP,KAAiB,QAArB,EAA+B;MAC7B,MAAMuK,KAAK,CACT,iDACE,yCADF,YAEMvK,KAAK,KAAK,IAAV,GAAiB,MAAjB,GAA0B,OAAOA,KAFvC,wBADS,CAAX;IAKD;IAED,IAAI,OAAOC,MAAP,KAAkB,QAAtB,EAAgC;MAC9B,MAAMsK,KAAK,CACT,kDACE,0CADF,YAEMtK,MAAM,KAAK,IAAX,GAAkB,MAAlB,GAA2B,OAAOA,MAFxC,wBADS,CAAX;IAKD;EACF;AACF,CAxFD;ACxzBA,IAAMuK,2BAA2B,GAAG,EAApC;AAyBA,IAAMtI,uBAAuB,GAAG,SAA1BA,uBAA0B,cAG3B;EAAA,IAFDoF,QAEC,QAFDA,QAEC;EAAA,IADDmD,cACC,SADDA,cACC;IADeC,kBACf,SADeA,kBACf;IADmCC,oBACnC,SADmCA,oBACnC;EACH,IAAIC,uBAAuB,GAAG,CAA9B,CADG;EAIH;;EACA,IAAID,oBAAoB,IAAIrD,QAA5B,EAAsC;IACpCqD,oBAAoB,GAAGrD,QAAQ,GAAG,CAAlC;EACD;EAED,IAAIqD,oBAAoB,IAAI,CAA5B,EAA+B;IAC7B,IAAME,YAAY,GAAGJ,cAAc,CAACE,oBAAD,CAAnC;IACAC,uBAAuB,GAAGC,YAAY,CAAC7F,MAAb,GAAsB6F,YAAY,CAACpL,IAA7D;EACD;EAED,IAAMqL,kBAAkB,GAAGxD,QAAQ,GAAGqD,oBAAX,GAAkC,CAA7D;EACA,IAAMI,0BAA0B,GAAGD,kBAAkB,GAAGJ,kBAAxD;EAEA,OAAOE,uBAAuB,GAAGG,0BAAjC;AACD,CArBD;AAuBA,IAAM5I,sBAAsB,GAAG,SAAzBA,sBAAyB,eAO1B;EAAA,IANDkF,WAMC,SANDA,WAMC;EAAA,IAJD2D,iBAIC,SAJDA,iBAIC;IAHDC,oBAGC,SAHDA,oBAGC;IAFDC,uBAEC,SAFDA,uBAEC;EACH,IAAIN,uBAAuB,GAAG,CAA9B,CADG;EAIH;;EACA,IAAIM,uBAAuB,IAAI7D,WAA/B,EAA4C;IAC1C6D,uBAAuB,GAAG7D,WAAW,GAAG,CAAxC;EACD;EAED,IAAI6D,uBAAuB,IAAI,CAA/B,EAAkC;IAChC,IAAML,YAAY,GAAGG,iBAAiB,CAACE,uBAAD,CAAtC;IACAN,uBAAuB,GAAGC,YAAY,CAAC7F,MAAb,GAAsB6F,YAAY,CAACpL,IAA7D;EACD;EAED,IAAMqL,kBAAkB,GAAGzD,WAAW,GAAG6D,uBAAd,GAAwC,CAAnE;EACA,IAAMH,0BAA0B,GAAGD,kBAAkB,GAAGG,oBAAxD;EAEA,OAAOL,uBAAuB,GAAGG,0BAAjC;AACD,CAzBD;AA2BA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CACtBC,QADsB,EAEtBtI,KAFsB,EAGtBuI,KAHsB,EAItBC,aAJsB,EAKL;EACjB,IAAIC,eAAJ,EAAqBC,QAArB,EAA+BC,iBAA/B;EACA,IAAIL,QAAQ,KAAK,QAAjB,EAA2B;IACzBG,eAAe,GAAGD,aAAa,CAACN,iBAAhC;IACAQ,QAAQ,GAAK1I,KAAK,CAAC4B,WAAnB;IACA+G,iBAAiB,GAAGH,aAAa,CAACJ,uBAAlC;EACD,CAJD,MAIO;IACLK,eAAe,GAAGD,aAAa,CAACb,cAAhC;IACAe,QAAQ,GAAK1I,KAAK,CAAC6B,SAAnB;IACA8G,iBAAiB,GAAGH,aAAa,CAACX,oBAAlC;EACD;EAED,IAAIU,KAAK,GAAGI,iBAAZ,EAA+B;IAC7B,IAAIzG,MAAM,GAAG,CAAb;IACA,IAAIyG,iBAAiB,IAAI,CAAzB,EAA4B;MAC1B,IAAMZ,YAAY,GAAGU,eAAe,CAACE,iBAAD,CAApC;MACAzG,MAAM,GAAG6F,YAAY,CAAC7F,MAAb,GAAsB6F,YAAY,CAACpL,IAA5C;IACD;IAED,KAAK,IAAIiM,CAAC,GAAGD,iBAAiB,GAAG,CAAjC,EAAoCC,CAAC,IAAIL,KAAzC,EAAgDK,CAAC,EAAjD,EAAqD;MACnD,IAAIjM,IAAI,GAAG+L,QAAQ,CAACE,CAAD,CAAnB;MAEAH,eAAe,CAACG,CAAD,CAAf,GAAqB;QACnB1G,MAAM,EAANA,MADmB;QAEnBvF,IAAI,EAAJA;MAFmB,CAArB;MAKAuF,MAAM,IAAIvF,IAAV;IACD;IAED,IAAI2L,QAAQ,KAAK,QAAjB,EAA2B;MACzBE,aAAa,CAACJ,uBAAd,GAAwCG,KAAxC;IACD,CAFD,MAEO;MACLC,aAAa,CAACX,oBAAd,GAAqCU,KAArC;IACD;EACF;EAED,OAAOE,eAAe,CAACF,KAAD,CAAtB;AACD,CA3CD;AA6CA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,CACtBP,QADsB,EAEtBtI,KAFsB,EAGtBwI,aAHsB,EAItBtG,MAJsB,EAKnB;EACH,IAAIuG,eAAJ,EAAqBE,iBAArB;EACA,IAAIL,QAAQ,KAAK,QAAjB,EAA2B;IACzBG,eAAe,GAAGD,aAAa,CAACN,iBAAhC;IACAS,iBAAiB,GAAGH,aAAa,CAACJ,uBAAlC;EACD,CAHD,MAGO;IACLK,eAAe,GAAGD,aAAa,CAACb,cAAhC;IACAgB,iBAAiB,GAAGH,aAAa,CAACX,oBAAlC;EACD;EAED,IAAMiB,sBAAsB,GAC1BH,iBAAiB,GAAG,CAApB,GAAwBF,eAAe,CAACE,iBAAD,CAAf,CAAmCzG,MAA3D,GAAoE,CADtE;EAGA,IAAI4G,sBAAsB,IAAI5G,MAA9B,EAAsC;IACpC;IACA,OAAO6G,2BAA2B,CAChCT,QADgC,EAEhCtI,KAFgC,EAGhCwI,aAHgC,EAIhCG,iBAJgC,EAKhC,CALgC,EAMhCzG,MANgC,CAAlC;EAQD,CAVD,MAUO;IACL;IACA;IACA;IACA,OAAO8G,gCAAgC,CACrCV,QADqC,EAErCtI,KAFqC,EAGrCwI,aAHqC,EAIrCnF,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYqF,iBAAZ,CAJqC,EAKrCzG,MALqC,CAAvC;EAOD;AACF,CAxCD;AA0CA,IAAM6G,2BAA2B,GAAG,SAA9BA,2BAA8B,CAClCT,QADkC,EAElCtI,KAFkC,EAGlCwI,aAHkC,EAIlCS,IAJkC,EAKlCC,GALkC,EAMlChH,MANkC,EAOvB;EACX,OAAOgH,GAAG,IAAID,IAAd,EAAoB;IAClB,IAAME,MAAM,GAAGD,GAAG,GAAG7F,IAAI,CAAC+F,KAAL,CAAW,CAACH,IAAI,GAAGC,GAAR,IAAe,CAA1B,CAArB;IACA,IAAMG,aAAa,GAAGhB,eAAe,CACnCC,QADmC,EAEnCtI,KAFmC,EAGnCmJ,MAHmC,EAInCX,aAJmC,CAAf,CAKpBtG,MALF;IAOA,IAAImH,aAAa,KAAKnH,MAAtB,EAA8B;MAC5B,OAAOiH,MAAP;IACD,CAFD,MAEO,IAAIE,aAAa,GAAGnH,MAApB,EAA4B;MACjCgH,GAAG,GAAGC,MAAM,GAAG,CAAf;IACD,CAFM,MAEA,IAAIE,aAAa,GAAGnH,MAApB,EAA4B;MACjC+G,IAAI,GAAGE,MAAM,GAAG,CAAhB;IACD;EACF;EAED,IAAID,GAAG,GAAG,CAAV,EAAa;IACX,OAAOA,GAAG,GAAG,CAAb;EACD,CAFD,MAEO;IACL,OAAO,CAAP;EACD;AACF,CA/BD;AAiCA,IAAMF,gCAAgC,GAAG,SAAnCA,gCAAmC,CACvCV,QADuC,EAEvCtI,KAFuC,EAGvCwI,aAHuC,EAIvCD,KAJuC,EAKvCrG,MALuC,EAM5B;EACX,IAAMoH,SAAS,GAAGhB,QAAQ,KAAK,QAAb,GAAwBtI,KAAK,CAACuE,WAA9B,GAA4CvE,KAAK,CAACwE,QAApE;EACA,IAAI+E,QAAQ,GAAG,CAAf;EAEA,OACEhB,KAAK,GAAGe,SAAR,IACAjB,eAAe,CAACC,QAAD,EAAWtI,KAAX,EAAkBuI,KAAlB,EAAyBC,aAAzB,CAAf,CAAuDtG,MAAvD,GAAgEA,MAFlE,EAGE;IACAqG,KAAK,IAAIgB,QAAT;IACAA,QAAQ,IAAI,CAAZ;EACD;EAED,OAAOR,2BAA2B,CAChCT,QADgC,EAEhCtI,KAFgC,EAGhCwI,aAHgC,EAIhCnF,IAAI,CAACE,GAAL,CAASgF,KAAT,EAAgBe,SAAS,GAAG,CAA5B,CAJgC,EAKhCjG,IAAI,CAAC+F,KAAL,CAAWb,KAAK,GAAG,CAAnB,CALgC,EAMhCrG,MANgC,CAAlC;AAQD,CA1BD;AA4BA,IAAMsH,6BAA6B,GAAG,SAAhCA,6BAAgC,CACpClB,QADoC,EAEpCtI,KAFoC,EAGpCuI,KAHoC,EAIpCjE,KAJoC,EAKpCmF,YALoC,EAMpCjB,aANoC,EAOpC/D,aAPoC,EAQzB;EACX,IAAM9H,IAAI,GAAG2L,QAAQ,KAAK,QAAb,GAAwBtI,KAAK,CAAC9C,KAA9B,GAAsC8C,KAAK,CAAC7C,MAAzD;EACA,IAAM4K,YAAY,GAAGM,eAAe,CAACC,QAAD,EAAWtI,KAAX,EAAkBuI,KAAlB,EAAyBC,aAAzB,CAApC,CAFW;EAKX;;EACA,IAAMkB,kBAAkB,GACtBpB,QAAQ,KAAK,QAAb,GACIjJ,sBAAsB,CAACW,KAAD,EAAQwI,aAAR,CAD1B,GAEIpJ,uBAAuB,CAACY,KAAD,EAAQwI,aAAR,CAH7B;EAKA,IAAMmB,SAAS,GAAGtG,IAAI,CAACC,GAAL,CAChB,CADgB,EAEhBD,IAAI,CAACE,GAAL,CAASmG,kBAAkB,GAAG/M,IAA9B,EAAoCoL,YAAY,CAAC7F,MAAjD,CAFgB,CAAlB;EAIA,IAAM0H,SAAS,GAAGvG,IAAI,CAACC,GAAL,CAChB,CADgB,EAEhByE,YAAY,CAAC7F,MAAb,GAAsBvF,IAAtB,GAA6B8H,aAA7B,GAA6CsD,YAAY,CAACpL,IAF1C,CAAlB;EAKA,IAAI2H,KAAK,KAAK,OAAd,EAAuB;IACrB,IAAImF,YAAY,IAAIG,SAAS,GAAGjN,IAA5B,IAAoC8M,YAAY,IAAIE,SAAS,GAAGhN,IAApE,EAA0E;MACxE2H,KAAK,GAAG,MAAR;IACD,CAFD,MAEO;MACLA,KAAK,GAAG,QAAR;IACD;EACF;EAED,QAAQA,KAAR;IACE,KAAK,OAAL;MACE,OAAOqF,SAAP;IACF,KAAK,KAAL;MACE,OAAOC,SAAP;IACF,KAAK,QAAL;MACE,OAAOvG,IAAI,CAACwG,KAAL,CAAWD,SAAS,GAAG,CAACD,SAAS,GAAGC,SAAb,IAA0B,CAAjD,CAAP;IACF,KAAK,MAAL;IACA;MACE,IAAIH,YAAY,IAAIG,SAAhB,IAA6BH,YAAY,IAAIE,SAAjD,EAA4D;QAC1D,OAAOF,YAAP;MACD,CAFD,MAEO,IAAIG,SAAS,GAAGD,SAAhB,EAA2B;QAChC;QACA;QACA,OAAOC,SAAP;MACD,CAJM,MAIA,IAAIH,YAAY,GAAGG,SAAnB,EAA8B;QACnC,OAAOA,SAAP;MACD,CAFM,MAEA;QACL,OAAOD,SAAP;MACD;EAAA;AAEN,CAzDD;AA2DA,IAAMG,gBAAgB,gBAAG/K,mBAAmB,CAAC;EAC3CC,eAAe,EAAE,yBACfgB,KADe,EAEfuI,KAFe,EAGfC,aAHe;IAAA,OAIJH,eAAe,CAAC,QAAD,EAAWrI,KAAX,EAAkBuI,KAAlB,EAAyBC,aAAzB,CAAf,CAAuDtG,MAJnD;EAAA,CAD0B;EAO3CjD,4BAA4B,EAAE,sCAC5Be,KAD4B,EAE5B/B,UAF4B,EAG5BuK,aAH4B;IAAA,OAIjBK,eAAe,CAAC,QAAD,EAAW7I,KAAX,EAAkBwI,aAAlB,EAAiCvK,UAAjC,CAJE;EAAA,CAPa;EAa3CiB,+BAA+B,EAAE,yCAC/Bc,KAD+B,EAE/B6G,UAF+B,EAG/B5I,UAH+B,EAI/BuK,aAJ+B,EAKpB;IACX,IAAQjE,WAAR,GAA+BvE,KAA/B,CAAQuE,WAAR;MAAqBrH,KAArB,GAA+B8C,KAA/B,CAAqB9C,KAArB;IAEA,IAAM6K,YAAY,GAAGM,eAAe,CAClC,QADkC,EAElCrI,KAFkC,EAGlC6G,UAHkC,EAIlC2B,aAJkC,CAApC;IAMA,IAAMmB,SAAS,GAAG1L,UAAU,GAAGf,KAA/B;IAEA,IAAIgF,MAAM,GAAG6F,YAAY,CAAC7F,MAAb,GAAsB6F,YAAY,CAACpL,IAAhD;IACA,IAAImK,SAAS,GAAGD,UAAhB;IAEA,OAAOC,SAAS,GAAGvC,WAAW,GAAG,CAA1B,IAA+BrC,MAAM,GAAGyH,SAA/C,EAA0D;MACxD7C,SAAS;MACT5E,MAAM,IAAImG,eAAe,CAAC,QAAD,EAAWrI,KAAX,EAAkB8G,SAAlB,EAA6B0B,aAA7B,CAAf,CAA2D7L,IAArE;IACD;IAED,OAAOmK,SAAP;EACD,CAtC0C;EAwC3C3H,cAAc,EAAE,wBACda,KADc,EAEduI,KAFc,EAGdC,aAHc;IAAA,OAIHA,aAAa,CAACN,iBAAd,CAAgCK,KAAhC,EAAuC5L,IAJpC;EAAA,CAxC2B;EA8C3CyC,uBAAuB,EAAvBA,uBA9C2C;EA+C3CC,sBAAsB,EAAtBA,sBA/C2C;EAiD3CC,8BAA8B,EAAE,wCAC9BU,KAD8B,EAE9BuI,KAF8B,EAG9BjE,KAH8B,EAI9BmF,YAJ8B,EAK9BjB,aAL8B,EAM9B/D,aAN8B;IAAA,OAQ9B+E,6BAA6B,CAC3B,QAD2B,EAE3BxJ,KAF2B,EAG3BuI,KAH2B,EAI3BjE,KAJ2B,EAK3BmF,YAL2B,EAM3BjB,aAN2B,EAO3B/D,aAP2B,CARC;EAAA,CAjDW;EAmE3ClF,2BAA2B,EAAE,qCAC3BS,KAD2B,EAE3BuI,KAF2B,EAG3BjE,KAH2B,EAI3BmF,YAJ2B,EAK3BjB,aAL2B,EAM3B/D,aAN2B;IAAA,OAQ3B+E,6BAA6B,CAC3B,KAD2B,EAE3BxJ,KAF2B,EAG3BuI,KAH2B,EAI3BjE,KAJ2B,EAK3BmF,YAL2B,EAM3BjB,aAN2B,EAO3B/D,aAP2B,CARF;EAAA,CAnEc;EAqF3ChF,YAAY,EAAE,sBACZO,KADY,EAEZuI,KAFY,EAGZC,aAHY;IAAA,OAIDH,eAAe,CAAC,KAAD,EAAQrI,KAAR,EAAeuI,KAAf,EAAsBC,aAAtB,CAAf,CAAoDtG,MAJnD;EAAA,CArF6B;EA2F3C1C,YAAY,EAAE,sBACZQ,KADY,EAEZuI,KAFY,EAGZC,aAHY;IAAA,OAIDA,aAAa,CAACb,cAAd,CAA6BY,KAA7B,EAAoC5L,IAJnC;EAAA,CA3F6B;EAiG3C+C,yBAAyB,EAAE,mCACzBM,KADyB,EAEzBU,SAFyB,EAGzB8H,aAHyB;IAAA,OAIdK,eAAe,CAAC,KAAD,EAAQ7I,KAAR,EAAewI,aAAf,EAA8B9H,SAA9B,CAJD;EAAA,CAjGgB;EAuG3Cf,4BAA4B,EAAE,sCAC5BK,KAD4B,EAE5B6G,UAF4B,EAG5BnG,SAH4B,EAI5B8H,aAJ4B,EAKjB;IACX,IAAQhE,QAAR,GAA6BxE,KAA7B,CAAQwE,QAAR;MAAkBrH,MAAlB,GAA6B6C,KAA7B,CAAkB7C,MAAlB;IAEA,IAAM4K,YAAY,GAAGM,eAAe,CAClC,KADkC,EAElCrI,KAFkC,EAGlC6G,UAHkC,EAIlC2B,aAJkC,CAApC;IAMA,IAAMmB,SAAS,GAAGjJ,SAAS,GAAGvD,MAA9B;IAEA,IAAI+E,MAAM,GAAG6F,YAAY,CAAC7F,MAAb,GAAsB6F,YAAY,CAACpL,IAAhD;IACA,IAAImK,SAAS,GAAGD,UAAhB;IAEA,OAAOC,SAAS,GAAGtC,QAAQ,GAAG,CAAvB,IAA4BtC,MAAM,GAAGyH,SAA5C,EAAuD;MACrD7C,SAAS;MACT5E,MAAM,IAAImG,eAAe,CAAC,KAAD,EAAQrI,KAAR,EAAe8G,SAAf,EAA0B0B,aAA1B,CAAf,CAAwD7L,IAAlE;IACD;IAED,OAAOmK,SAAP;EACD,CAhI0C;EAkI3ClH,iBAlI2C,6BAkIzBI,KAlIyB,EAkINM,QAlIM,EAkIwB;IACjE,YAGMN,KAHN;MACEmI,oBADF,SACEA,oBADF;MAEEP,kBAFF,SAEEA,kBAFF;IAKA,IAAMY,aAAa,GAAG;MACpBN,iBAAiB,EAAE,EADC;MAEpBC,oBAAoB,EAAEA,oBAAoB,IAAIT,2BAF1B;MAGpBE,kBAAkB,EAAEA,kBAAkB,IAAIF,2BAHtB;MAIpBU,uBAAuB,EAAE,CAAC,CAJN;MAKpBP,oBAAoB,EAAE,CAAC,CALH;MAMpBF,cAAc,EAAE;IANI,CAAtB;IASArH,QAAQ,CAACyJ,qBAAT,GAAiC,UAC/B3L,WAD+B,EAE/B4L,iBAF+B,EAG5B;MAAA,IADHA,iBACG;QADHA,iBACG,GAD2B,IAC3B;MAAA;MACH1J,QAAQ,CAAC2J,iBAAT,CAA2B;QAAE7L,WAAW,EAAXA,WAAF;QAAe4L,iBAAiB,EAAjBA;MAAf,CAA3B;IACD,CALD;IAOA1J,QAAQ,CAAC4J,kBAAT,GAA8B,UAC5B5L,QAD4B,EAE5B0L,iBAF4B,EAGzB;MAAA,IADHA,iBACG;QADHA,iBACG,GAD2B,IAC3B;MAAA;MACH1J,QAAQ,CAAC2J,iBAAT,CAA2B;QAAE3L,QAAQ,EAARA,QAAF;QAAY0L,iBAAiB,EAAjBA;MAAZ,CAA3B;IACD,CALD;IAOA1J,QAAQ,CAAC2J,iBAAT,GAA6B,iBAQvB;MAAA,IAPJ7L,WAOI,SAPJA,WAOI;QANJE,QAMI,SANJA,QAMI;QAAA6L,8BALJH,iBAKI;QALJA,iBAKI,sCALgB,IAKhB;MACJ,IAAI,OAAO5L,WAAP,KAAuB,QAA3B,EAAqC;QACnCoK,aAAa,CAACJ,uBAAd,GAAwC/E,IAAI,CAACE,GAAL,CACtCiF,aAAa,CAACJ,uBADwB,EAEtChK,WAAW,GAAG,CAFwB,CAAxC;MAID;MACD,IAAI,OAAOE,QAAP,KAAoB,QAAxB,EAAkC;QAChCkK,aAAa,CAACX,oBAAd,GAAqCxE,IAAI,CAACE,GAAL,CACnCiF,aAAa,CAACX,oBADqB,EAEnCvJ,QAAQ,GAAG,CAFwB,CAArC;MAID,CAZG;MAeJ;MACA;MACA;;MACAgC,QAAQ,CAACyB,kBAAT,CAA4B,CAAC,CAA7B;MAEA,IAAIiI,iBAAJ,EAAuB;QACrB1J,QAAQ,CAAC8J,WAAT;MACD;IACF,CA/BD;IAiCA,OAAO5B,aAAP;EACD,CAjM0C;EAmM3C3I,qCAAqC,EAAE,KAnMI;EAqM3CC,aAAa,EAAE,8BAAkD;IAAA,IAA/C8B,WAA+C,SAA/CA,WAA+C;MAAlCC,SAAkC,SAAlCA,SAAkC;IAC/D,IAAInD,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,IAAI,OAAOgD,WAAP,KAAuB,UAA3B,EAAuC;QACrC,MAAM6F,KAAK,CACT,uDACE,8BADF,YAGI7F,WAAW,KAAK,IAAhB,GAAuB,MAAvB,GAAgC,OAAOA,WAH3C,wBADS,CAAX;MAOD,CARD,MAQO,IAAI,OAAOC,SAAP,KAAqB,UAAzB,EAAqC;QAC1C,MAAM4F,KAAK,CACT,qDACE,8BADF,YAEM5F,SAAS,KAAK,IAAd,GAAqB,MAArB,GAA8B,OAAOA,SAF3C,wBADS,CAAX;MAKD;IACF;EACF;AAvN0C,CAAD,CAA5C;ACtKA,IAAM3D,gCAA8B,GAAG,GAAvC;AAEA,IAAMC,gBAAc,GAAG,SAAjBA,cAAiB,CAACoK,KAAD,EAAgBlK,IAAhB;EAAA,OAA8BkK,KAA9B;AAAA,CAAvB;AAGA;;AACA,IAAI8B,oBAAoB,GAAG,IAA3B;AACA,IAAI5L,oBAAkB,GAAG,IAAzB;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;EACzC,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,OAAd,KAA0B,WAA/D,EAA4E;IAC1EuL,oBAAoB,gBAAG,IAAIvL,OAAJ,EAAvB;IACAL,oBAAkB,gBAAG,IAAIK,OAAJ,EAArB;EACD;AACF;AAED,SAAwBwL,mBAAT,OAoBX;EAAA;EAAA,IAnBFC,aAmBE,QAnBFA,aAmBE;IAlBFC,qBAkBE,QAlBFA,qBAkBE;IAjBFC,WAiBE,QAjBFA,WAiBE;IAhBFjB,6BAgBE,QAhBFA,6BAgBE;IAfFkB,sBAeE,QAfFA,sBAeE;IAdFC,yBAcE,QAdFA,yBAcE;IAbF/K,iBAaE,QAbFA,iBAaE;IAZFC,qCAYE,QAZFA,qCAYE;IAXFC,aAWE,QAXFA,aAWE;EACF;IAAAC;;IAwBE;IACA;IACA;IACA,cAAYC,KAAZ,EAA6B;MAAA;MAC3BC,kCAAMD,KAAN;MAD2BC,MA1B7BC,cA0B6B,GA1BPN,iBAAiB,CAACK,MAAKD,KAAN,gCA0BV;MAAAC,MAzB7BG,SAyB6B;MAAAH,MAxB7BE,0BAwB6B,GAxBkB,IAwBlB;MAAAF,MAd7BI,KAc6B,GAdd;QACbC,QAAQ,+BADK;QAEbC,WAAW,EAAE,KAFA;QAGbqK,eAAe,EAAE,SAHJ;QAIbnB,YAAY,EACV,OAAOxJ,MAAKD,KAAL,CAAW6K,mBAAlB,KAA0C,QAA1C,GACI5K,MAAKD,KAAL,CAAW6K,mBADf,GAEI,CAPO;QAQbjK,wBAAwB,EAAE;MARb,CAcc;MAAAX,MA8M7Ba,oBA9M6B;MAAAb,MAoN7Ba,oBApN6B,GAoNNC,UAAU,CAC/B,UACE+J,kBADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,gBAJF;QAAA,OAMIhL,MAAKD,KAAL,CAAWwB,eAAb,CAA6D;UAC3DsJ,kBAAkB,EAAlBA,kBAD2D;UAE3DC,iBAAiB,EAAjBA,iBAF2D;UAG3DC,iBAAiB,EAAjBA,iBAH2D;UAI3DC,gBAAgB,EAAhBA;QAJ2D,CAA7D,CANF;MAAA,CAD+B,CApNJ;MAAAhL,MAmO7BwB,aAnO6B;MAAAxB,MAwO7BwB,aAxO6B,GAwObV,UAAU,CACxB,UACE6J,eADF,EAEEnB,YAFF,EAGE7I,wBAHF;QAAA,OAKIX,MAAKD,KAAL,CAAW0B,QAAb,CAA+C;UAC7CkJ,eAAe,EAAfA,eAD6C;UAE7CnB,YAAY,EAAZA,YAF6C;UAG7C7I,wBAAwB,EAAxBA;QAH6C,CAA/C,CALF;MAAA,CADwB,CAxOG;MAAAX,MA0R7B0B,aA1R6B;MAAA1B,MA2R7B0B,aA3R6B,GA2Rb,UAAC4G,KAAD,EAA2B;QACzC,kBAAwCtI,MAAKD,KAA7C;UAAQlC,SAAR,eAAQA,SAAR;UAAmB4K,QAAnB,eAAmBA,QAAnB;UAA6BwC,MAA7B,eAA6BA,MAA7B;QAEA,IAAMpJ,cAAc,GAAG7B,MAAK8B,kBAAL,CACrBlC,qCAAqC,IAAI6I,QADpB,EAErB7I,qCAAqC,IAAIqL,MAFpB,EAGrBrL,qCAAqC,IAAI/B,SAHpB,CAAvB;QAMA,IAAIb,KAAJ;QACA,IAAI6E,cAAc,CAACG,cAAf,CAA8BsG,KAA9B,CAAJ,EAA0C;UACxCtL,KAAK,GAAG6E,cAAc,CAACyG,KAAD,CAAtB;QACD,CAFD,MAEO;UACL,IAAMrG,OAAM,GAAGqI,aAAa,CAACtK,MAAKD,KAAN,EAAauI,KAAb,EAAoBtI,MAAKC,cAAzB,CAA5B;UACA,IAAMvD,IAAI,GAAG8N,WAAW,CAACxK,MAAKD,KAAN,EAAauI,KAAb,EAAoBtI,MAAKC,cAAzB,CAAxB,CAFK;;UAKL,IAAMiL,YAAY,GAChBrN,SAAS,KAAK,YAAd,IAA8BoN,MAAM,KAAK,YAD3C;UAGA,IAAM/I,KAAK,GAAGrE,SAAS,KAAK,KAA5B;UACA,IAAMsN,gBAAgB,GAAGD,YAAY,GAAGjJ,OAAH,GAAY,CAAjD;UACAJ,cAAc,CAACyG,KAAD,CAAd,GAAwBtL,KAAK,GAAG;YAC9BmF,QAAQ,EAAE,UADoB;YAE9BC,IAAI,EAAEF,KAAK,GAAGG,SAAH,GAAe8I,gBAFI;YAG9B7I,KAAK,EAAEJ,KAAK,GAAGiJ,gBAAH,GAAsB9I,SAHJ;YAI9BE,GAAG,EAAE,CAAC2I,YAAD,GAAgBjJ,OAAhB,GAAyB,CAJA;YAK9B/E,MAAM,EAAE,CAACgO,YAAD,GAAgBxO,IAAhB,GAAuB,MALD;YAM9BO,KAAK,EAAEiO,YAAY,GAAGxO,IAAH,GAAU;UANC,CAAhC;QAQD;QAED,OAAOM,KAAP;MACD,CA5T4B;MAAAgD,MA8T7B8B,kBA9T6B;MAAA9B,MA+T7B8B,kBA/T6B,GA+TRhB,UAAU,CAAC,UAAC0B,CAAD,EAASC,EAAT,EAAkBC,GAAlB;QAAA,OAAgC,EAAhC;MAAA,CAAD,CA/TF;MAAA1C,MAwW7BoL,mBAxW6B,GAwWP,UAACxI,KAAD,EAA8B;QAClD,2BAAiDA,KAAK,CAACC,aAAvD;UAAQtF,WAAR,wBAAQA,WAAR;UAAqBS,UAArB,wBAAqBA,UAArB;UAAiCgF,WAAjC,wBAAiCA,WAAjC;QACAhD,MAAKiD,QAAL,CAAc,mBAAS,EAAI;UACzB,IAAIC,SAAS,CAACsG,YAAV,KAA2BxL,UAA/B,EAA2C;YACzC;YACA;YACA;YACA,OAAO,IAAP;UACD;UAED,IAAQH,SAAR,GAAsBmC,MAAKD,KAA3B,CAAQlC,SAAR;UAEA,IAAI2L,YAAY,GAAGxL,UAAnB;UACA,IAAIH,SAAS,KAAK,KAAlB,EAAyB;YACvB;YACA;YACA;YACA;YACA,QAAQH,gBAAgB,EAAxB;cACE,KAAK,UAAL;gBACE8L,YAAY,GAAG,CAACxL,UAAhB;gBACA;cACF,KAAK,qBAAL;gBACEwL,YAAY,GAAGxG,WAAW,GAAGzF,WAAd,GAA4BS,UAA3C;gBACA;YAAA;UAEL,CAxBwB;;UA2BzBwL,YAAY,GAAGpG,IAAI,CAACC,GAAL,CACb,CADa,EAEbD,IAAI,CAACE,GAAL,CAASkG,YAAT,EAAuBxG,WAAW,GAAGzF,WAArC,CAFa,CAAf;UAKA,OAAO;YACL+C,WAAW,EAAE,IADR;YAELqK,eAAe,EACbzH,SAAS,CAACsG,YAAV,GAAyBxL,UAAzB,GAAsC,SAAtC,GAAkD,UAH/C;YAILwL,YAAY,EAAZA,YAJK;YAKL7I,wBAAwB,EAAE;UALrB,CAAP;QAOD,CAvCD,EAuCGX,MAAKwD,0BAvCR;MAwCD,CAlZ4B;MAAAxD,MAoZ7BqL,iBApZ6B,GAoZT,UAACzI,KAAD,EAA8B;QAChD,4BAAkDA,KAAK,CAACC,aAAxD;UAAQC,YAAR,yBAAQA,YAAR;UAAsBC,YAAtB,yBAAsBA,YAAtB;UAAoCtC,SAApC,yBAAoCA,SAApC;QACAT,MAAKiD,QAAL,CAAc,mBAAS,EAAI;UACzB,IAAIC,SAAS,CAACsG,YAAV,KAA2B/I,SAA/B,EAA0C;YACxC;YACA;YACA;YACA,OAAO,IAAP;UACD,CANwB;;UASzB,IAAM+I,YAAY,GAAGpG,IAAI,CAACC,GAAL,CACnB,CADmB,EAEnBD,IAAI,CAACE,GAAL,CAAS7C,SAAT,EAAoBsC,YAAY,GAAGD,YAAnC,CAFmB,CAArB;UAKA,OAAO;YACLxC,WAAW,EAAE,IADR;YAELqK,eAAe,EACbzH,SAAS,CAACsG,YAAV,GAAyBA,YAAzB,GAAwC,SAAxC,GAAoD,UAHjD;YAILA,YAAY,EAAZA,YAJK;YAKL7I,wBAAwB,EAAE;UALrB,CAAP;QAOD,CArBD,EAqBGX,MAAKwD,0BArBR;MAsBD,CA5a4B;MAAAxD,MA8a7ByD,eA9a6B,GA8aX,UAACC,GAAD,EAAoB;QACpC,IAAQC,QAAR,GAAqB3D,MAAKD,KAA1B,CAAQ4D,QAAR;QAEA3D,MAAKG,SAAL,GAAmBuD,GAAnB;QAEA,IAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;UAClCA,QAAQ,CAACD,GAAD,CAAR;QACD,CAFD,MAEO,IACLC,QAAQ,IAAI,IAAZ,IACA,OAAOA,QAAP,KAAoB,QADpB,IAEAA,QAAQ,CAAC3B,cAAT,CAAwB,SAAxB,CAHK,EAIL;UACA2B,QAAQ,CAACC,OAAT,GAAmBF,GAAnB;QACD;MACF,CA5b4B;MAAA1D,MA8b7BwD,0BA9b6B,GA8bA,YAAM;QACjC,IAAIxD,MAAKE,0BAAL,KAAoC,IAAxC,EAA8C;UAC5CnE,aAAa,CAACiE,MAAKE,0BAAN,CAAb;QACD;QAEDF,MAAKE,0BAAL,GAAkC/D,cAAc,CAC9C6D,MAAK6D,iBADyC,EAE9C5F,gCAF8C,CAAhD;MAID,CAvc4B;MAAA+B,MAyc7B6D,iBAzc6B,GAycT,YAAM;QACxB7D,MAAKE,0BAAL,GAAkC,IAAlC;QAEAF,MAAKiD,QAAL,CAAc;UAAE3C,WAAW,EAAE;QAAf,CAAd,EAAsC,YAAM;UAC1C;UACA;UACAN,MAAK8B,kBAAL,CAAwB,CAAC,CAAzB,EAA4B,IAA5B;QACD,CAJD;MAKD,CAjd4B;MAAA;IAE5B;IA7BHwJ,KA+BSvH,wBA/BT,GA+BE,kCACEC,SADF,EAEEd,SAFF,EAGwB;MACtBe,qBAAmB,CAACD,SAAD,EAAYd,SAAZ,CAAnB;MACArD,aAAa,CAACmE,SAAD,CAAb;MACA,OAAO,IAAP;IACD,CAtCH;IAAA;IAAAE,OAwCEC,QAxCF,GAwCE,kBAASqF,YAAT,EAAqC;MACnCA,YAAY,GAAGpG,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYmG,YAAZ,CAAf;MAEA,KAAKvG,QAAL,CAAc,mBAAS,EAAI;QACzB,IAAIC,SAAS,CAACsG,YAAV,KAA2BA,YAA/B,EAA6C;UAC3C,OAAO,IAAP;QACD;QACD,OAAO;UACLmB,eAAe,EACbzH,SAAS,CAACsG,YAAV,GAAyBA,YAAzB,GAAwC,SAAxC,GAAoD,UAFjD;UAGLA,YAAY,EAAEA,YAHT;UAIL7I,wBAAwB,EAAE;QAJrB,CAAP;MAMD,CAVD,EAUG,KAAK6C,0BAVR;IAWD,CAtDH;IAAAU,OAwDEE,YAxDF,GAwDE,sBAAakE,KAAb,EAA4BjE,KAA5B,EAAiE;MAAA,IAArCA,KAAqC;QAArCA,KAAqC,GAAd,MAAc;MAAA;MAC/D,mBAA8B,KAAKtE,KAAnC;QAAQsJ,SAAR,gBAAQA,SAAR;QAAmB4B,MAAnB,gBAAmBA,MAAnB;MACA,IAAQzB,YAAR,GAAyB,KAAKpJ,KAA9B,CAAQoJ,YAAR;MAEAlB,KAAK,GAAGlF,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAASgF,KAAT,EAAgBe,SAAS,GAAG,CAA5B,CAAZ,CAAR,CAJ+D;MAO/D;MACA;;MACA,IAAI7E,aAAa,GAAG,CAApB;MACA,IAAI,KAAKrE,SAAT,EAAoB;QAClB,IAAMwD,QAAQ,GAAK,KAAKxD,SAAxB;QACA,IAAI8K,MAAM,KAAK,UAAf,EAA2B;UACzBzG,aAAa,GACXb,QAAQ,CAACX,WAAT,GAAuBW,QAAQ,CAACpG,WAAhC,GACIZ,gBAAgB,EADpB,GAEI,CAHN;QAID,CALD,MAKO;UACL6H,aAAa,GACXb,QAAQ,CAACZ,YAAT,GAAwBY,QAAQ,CAACb,YAAjC,GACInG,gBAAgB,EADpB,GAEI,CAHN;QAID;MACF;MAED,KAAKwH,QAAL,CACEoF,6BAA6B,CAC3B,KAAKxJ,KADsB,EAE3BuI,KAF2B,EAG3BjE,KAH2B,EAI3BmF,YAJ2B,EAK3B,KAAKvJ,cALsB,EAM3BuE,aAN2B,CAD/B;IAUD,CA3FH;IAAAN,OA6FEW,iBA7FF,GA6FE,6BAAoB;MAClB,mBAAmD,KAAK9E,KAAxD;QAAQlC,SAAR,gBAAQA,SAAR;QAAmB+M,mBAAnB,gBAAmBA,mBAAnB;QAAwCK,MAAxC,gBAAwCA,MAAxC;MAEA,IAAI,OAAOL,mBAAP,KAA+B,QAA/B,IAA2C,KAAKzK,SAAL,IAAkB,IAAjE,EAAuE;QACrE,IAAMwD,QAAQ,GAAK,KAAKxD,SAAxB,CADqE;;QAGrE,IAAItC,SAAS,KAAK,YAAd,IAA8BoN,MAAM,KAAK,YAA7C,EAA2D;UACzDtH,QAAQ,CAAC3F,UAAT,GAAsB4M,mBAAtB;QACD,CAFD,MAEO;UACLjH,QAAQ,CAAClD,SAAT,GAAqBmK,mBAArB;QACD;MACF;MAED,KAAK9F,mBAAL;IACD,CA3GH;IAAAZ,OA6GEa,kBA7GF,GA6GE,8BAAqB;MACnB,mBAA8B,KAAKhF,KAAnC;QAAQlC,SAAR,gBAAQA,SAAR;QAAmBoN,MAAnB,gBAAmBA,MAAnB;MACA,kBAAmD,KAAK7K,KAAxD;QAAQoJ,YAAR,eAAQA,YAAR;QAAsB7I,wBAAtB,eAAsBA,wBAAtB;MAEA,IAAIA,wBAAwB,IAAI,KAAKR,SAAL,IAAkB,IAAlD,EAAwD;QACtD,IAAMwD,QAAQ,GAAK,KAAKxD,SAAxB,CADsD;;QAItD,IAAItC,SAAS,KAAK,YAAd,IAA8BoN,MAAM,KAAK,YAA7C,EAA2D;UACzD,IAAIpN,SAAS,KAAK,KAAlB,EAAyB;YACvB;YACA;YACA;YACA,QAAQH,gBAAgB,EAAxB;cACE,KAAK,UAAL;gBACEiG,QAAQ,CAAC3F,UAAT,GAAsB,CAACwL,YAAvB;gBACA;cACF,KAAK,oBAAL;gBACE7F,QAAQ,CAAC3F,UAAT,GAAsBwL,YAAtB;gBACA;cACF;gBACE,IAAQjM,WAAR,GAAqCoG,QAArC,CAAQpG,WAAR;kBAAqByF,WAArB,GAAqCW,QAArC,CAAqBX,WAArB;gBACAW,QAAQ,CAAC3F,UAAT,GAAsBgF,WAAW,GAAGzF,WAAd,GAA4BiM,YAAlD;gBACA;YAAA;UAEL,CAhBD,MAgBO;YACL7F,QAAQ,CAAC3F,UAAT,GAAsBwL,YAAtB;UACD;QACF,CApBD,MAoBO;UACL7F,QAAQ,CAAClD,SAAT,GAAqB+I,YAArB;QACD;MACF;MAED,KAAK1E,mBAAL;IACD,CA/IH;IAAAZ,OAiJEc,oBAjJF,GAiJE,gCAAuB;MACrB,IAAI,KAAK9E,0BAAL,KAAoC,IAAxC,EAA8C;QAC5CnE,aAAa,CAAC,KAAKmE,0BAAN,CAAb;MACD;IACF,CArJH;IAAAgE,OAuJEe,MAvJF,GAuJE,kBAAS;MACP,mBAiBI,KAAKlF,KAjBT;QACEmF,QADF,gBACEA,QADF;QAEEC,SAFF,gBAEEA,SAFF;QAGEtH,SAHF,gBAGEA,SAHF;QAIEX,MAJF,gBAIEA,MAJF;QAKEkI,QALF,gBAKEA,QALF;QAMEC,gBANF,gBAMEA,gBANF;QAOEC,YAPF,gBAOEA,YAPF;QAQE+D,SARF,gBAQEA,SARF;QASE9D,QATF,gBASEA,QATF;QAAAgG,oCAUE9F,OAVF;QAUEA,OAVF,qCAUYvH,gBAVZ;QAWE+M,MAXF,gBAWEA,MAXF;QAYEvF,gBAZF,gBAYEA,gBAZF;QAaEC,YAbF,gBAaEA,YAbF;QAcE3I,KAdF,gBAcEA,KAdF;QAeE4I,cAfF,gBAeEA,cAfF;QAgBE3I,KAhBF,gBAgBEA,KAhBF;MAkBA,IAAQqD,WAAR,GAAwB,KAAKF,KAA7B,CAAQE,WAAR,CAnBO;;MAsBP,IAAM4K,YAAY,GAChBrN,SAAS,KAAK,YAAd,IAA8BoN,MAAM,KAAK,YAD3C;MAGA,IAAMxJ,QAAQ,GAAGyJ,YAAY,GACzB,KAAKE,mBADoB,GAEzB,KAAKC,iBAFT;MAIA,4BAAgC,KAAKG,iBAAL,EAAhC;QAAO5E,UAAP;QAAmBC,SAAnB;MAEA,IAAMV,KAAK,GAAG,EAAd;MACA,IAAIkD,SAAS,GAAG,CAAhB,EAAmB;QACjB,KAAK,IAAIf,MAAK,GAAG1B,UAAjB,EAA6B0B,MAAK,IAAIzB,SAAtC,EAAiDyB,MAAK,EAAtD,EAA0D;UACxDnC,KAAK,CAACC,IAAN,CACErJ,aAAa,CAACmI,QAAD,EAAW;YACtB9G,IAAI,EAAEmH,QADgB;YAEtBxD,GAAG,EAAE0D,OAAO,CAAC6C,MAAD,EAAQ/C,QAAR,CAFU;YAGtB+C,KAAK,EAALA,MAHsB;YAItBhI,WAAW,EAAEsF,cAAc,GAAGtF,WAAH,GAAiB+B,SAJtB;YAKtBrF,KAAK,EAAE,KAAK0E,aAAL,CAAmB4G,MAAnB;UALe,CAAX,CADf;QASD;MACF,CA5CM;MA+CP;;MACA,IAAMmB,kBAAkB,GAAGc,qBAAqB,CAC9C,KAAKxK,KADyC,EAE9C,KAAKE,cAFyC,CAAhD;MAKA,OAAOlD,aAAa,CAClB2I,gBAAgB,IAAIC,YAApB,IAAoC,KADlB,EAElB;QACER,SAAS,EAATA,SADF;QAEE1D,QAAQ,EAARA,QAFF;QAGEiC,GAAG,EAAE,KAAKD,eAHZ;QAIEzG,KAAK;UACHmF,QAAQ,EAAE,UADP;UAEHjF,MAAM,EAANA,MAFG;UAGHD,KAAK,EAALA,KAHG;UAIHE,QAAQ,EAAE,MAJP;UAKHkJ,uBAAuB,EAAE,OALtB;UAMHC,UAAU,EAAE,WANT;UAOHzI,SAAS,EAATA;QAPG,GAQAb,KARA;MAJP,CAFkB,EAiBlBD,aAAa,CAACsI,gBAAgB,IAAIC,YAApB,IAAoC,KAArC,EAA4C;QACvDJ,QAAQ,EAAEiB,KAD6C;QAEvDzC,GAAG,EAAE0B,QAFkD;QAGvDpI,KAAK,EAAE;UACLE,MAAM,EAAEgO,YAAY,GAAG,MAAH,GAAYzB,kBAD3B;UAELlD,aAAa,EAAEjG,WAAW,GAAG,MAAH,GAAY+B,SAFjC;UAGLpF,KAAK,EAAEiO,YAAY,GAAGzB,kBAAH,GAAwB;QAHtC;MAHgD,CAA5C,CAjBK,CAApB;IA2BD,CAvOH;IAAAvF,OAgREY,mBAhRF,GAgRE,+BAAsB;MACpB,IAAI,OAAO,KAAK/E,KAAL,CAAWwB,eAAlB,KAAsC,UAA1C,EAAsD;QACpD,IAAQ8H,SAAR,GAAsB,KAAKtJ,KAA3B,CAAQsJ,SAAR;QACA,IAAIA,SAAS,GAAG,CAAhB,EAAmB;UACjB,6BAKI,KAAKmC,iBAAL,EALJ;YACEX,mBADF;YAEEC,kBAFF;YAGEC,kBAHF;YAIEC,iBAJF;UAMA,KAAKnK,oBAAL,CACEgK,mBADF,EAEEC,kBAFF,EAGEC,kBAHF,EAIEC,iBAJF;QAMD;MACF;MAED,IAAI,OAAO,KAAKjL,KAAL,CAAW0B,QAAlB,KAA+B,UAAnC,EAA+C;QAC7C,mBAII,KAAKrB,KAJT;UACEuK,gBADF,gBACEA,eADF;UAEEnB,aAFF,gBAEEA,YAFF;UAGE7I,yBAHF,gBAGEA,wBAHF;QAKA,KAAKa,aAAL,CACEmJ,gBADF,EAEEnB,aAFF,EAGE7I,yBAHF;MAKD;IACF,CA/SH;IAkTE;IACA;IACA;IAAA;;IApTFuD,OA4VEsH,iBA5VF,GA4VE,6BAAsD;MACpD,mBAAqC,KAAKzL,KAA1C;QAAQsJ,SAAR,gBAAQA,SAAR;QAAmB3C,aAAnB,gBAAmBA,aAAnB;MACA,mBAAuD,KAAKtG,KAA5D;QAAQE,WAAR,gBAAQA,WAAR;QAAqBqK,eAArB,gBAAqBA,eAArB;QAAsCnB,YAAtC,gBAAsCA,YAAtC;MAEA,IAAIH,SAAS,KAAK,CAAlB,EAAqB;QACnB,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAP;MACD;MAED,IAAMzC,UAAU,GAAG6D,sBAAsB,CACvC,KAAK1K,KADkC,EAEvCyJ,YAFuC,EAGvC,KAAKvJ,cAHkC,CAAzC;MAKA,IAAM4G,SAAS,GAAG6D,yBAAyB,CACzC,KAAK3K,KADoC,EAEzC6G,UAFyC,EAGzC4C,YAHyC,EAIzC,KAAKvJ,cAJoC,CAA3C,CAboD;MAqBpD;;MACA,IAAM6G,gBAAgB,GACpB,CAACxG,WAAD,IAAgBqK,eAAe,KAAK,UAApC,GACIvH,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYqD,aAAZ,CADJ,GAEI,CAHN;MAIA,IAAMK,eAAe,GACnB,CAACzG,WAAD,IAAgBqK,eAAe,KAAK,SAApC,GACIvH,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYqD,aAAZ,CADJ,GAEI,CAHN;MAKA,OAAO,CACLtD,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYuD,UAAU,GAAGE,gBAAzB,CADK,EAEL1D,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAAS+F,SAAS,GAAG,CAArB,EAAwBxC,SAAS,GAAGE,eAApC,CAAZ,CAFK,EAGLH,UAHK,EAILC,SAJK,CAAP;IAMD,CAjYH;IAAA;EAAA,EAA6BK,aAA7B,UAKSC,YALT,GAKwB;IACpBtJ,SAAS,EAAE,KADS;IAEpB0H,QAAQ,EAAElD,SAFU;IAGpB4I,MAAM,EAAE,UAHY;IAIpBvE,aAAa,EAAE,CAJK;IAKpBd,cAAc,EAAE;EALI,CALxB;AA8eD;AAGD;AACA;AACA;AACA;;AAEA,IAAM3B,qBAAmB,GAAG,SAAtBA,mBAAsB,eAWjB;EAAA,IATPiB,QASO,SATPA,QASO;IARPrH,SAQO,SARPA,SAQO;IAPPX,MAOO,SAPPA,MAOO;IANP+N,MAMO,SANPA,MAMO;IALP3F,YAKO,SALPA,YAKO;IAJPK,YAIO,SAJPA,YAIO;IAHP1I,KAGO,SAHPA,KAGO;EAAA,IADPoD,QACO,SADPA,QACO;EACT,IAAI5B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,IAAI2G,YAAY,IAAI,IAAhB,IAAwBK,YAAY,IAAI,IAA5C,EAAkD;MAChD,IAAInH,oBAAkB,IAAI,CAACA,oBAAkB,CAAC4I,GAAnB,CAAuB/G,QAAvB,CAA3B,EAA6D;QAC3D7B,oBAAkB,CAAC6I,GAAnB,CAAuBhH,QAAvB;QACAiH,OAAO,CAACC,IAAR,CACE,mEACE,qEAFJ;MAID;IACF,CATwC;;IAYzC,IAAM2D,YAAY,GAAGrN,SAAS,KAAK,YAAd,IAA8BoN,MAAM,KAAK,YAA9D;IAEA,QAAQpN,SAAR;MACE,KAAK,YAAL;MACA,KAAK,UAAL;QACE,IAAIuM,oBAAoB,IAAI,CAACA,oBAAoB,CAAChD,GAArB,CAAyB/G,QAAzB,CAA7B,EAAiE;UAC/D+J,oBAAoB,CAAC/C,GAArB,CAAyBhH,QAAzB;UACAiH,OAAO,CAACC,IAAR,CACE,mEACE,yFAFJ;QAID;QACD;MACF,KAAK,KAAL;MACA,KAAK,KAAL;QACE;QACA;MACF;QACE,MAAMC,KAAK,CACT,qDACE,yCADF,WAEM3J,SAFN,uBADS,CAAX;IAAA;IAOJ,QAAQoN,MAAR;MACE,KAAK,YAAL;MACA,KAAK,UAAL;QACE;QACA;MACF;QACE,MAAMzD,KAAK,CACT,kDACE,qDADF,WAEMyD,MAFN,uBADS,CAAX;IAAA;IAOJ,IAAI/F,QAAQ,IAAI,IAAhB,EAAsB;MACpB,MAAMsC,KAAK,CACT,oDACE,qCADF,YAEMtC,QAAQ,KAAK,IAAb,GAAoB,MAApB,GAA6B,OAAOA,QAF1C,wBADS,CAAX;IAKD;IAED,IAAIgG,YAAY,IAAI,OAAOjO,KAAP,KAAiB,QAArC,EAA+C;MAC7C,MAAMuK,KAAK,CACT,iDACE,oDADF,YAEMvK,KAAK,KAAK,IAAV,GAAiB,MAAjB,GAA0B,OAAOA,KAFvC,wBADS,CAAX;IAKD,CAND,MAMO,IAAI,CAACiO,YAAD,IAAiB,OAAOhO,MAAP,KAAkB,QAAvC,EAAiD;MACtD,MAAMsK,KAAK,CACT,kDACE,mDADF,YAEMtK,MAAM,KAAK,IAAX,GAAkB,MAAlB,GAA2B,OAAOA,MAFxC,wBADS,CAAX;IAKD;EACF;AACF,CApFD;AC9oBA,IAAMuK,6BAA2B,GAAG,EAApC;AAmBA,IAAMW,iBAAe,GAAG,SAAlBA,eAAkB,CACtBrI,KADsB,EAEtBuI,KAFsB,EAGtBC,aAHsB,EAIL;EACjB,WAAuBxI,KAAvB;IAAQ0I,QAAR,QAAQA,QAAR;EACA,IAAQD,eAAR,GAA+CD,aAA/C,CAAQC,eAAR;IAAyBE,iBAAzB,GAA+CH,aAA/C,CAAyBG,iBAAzB;EAEA,IAAIJ,KAAK,GAAGI,iBAAZ,EAA+B;IAC7B,IAAIzG,MAAM,GAAG,CAAb;IACA,IAAIyG,iBAAiB,IAAI,CAAzB,EAA4B;MAC1B,IAAMZ,YAAY,GAAGU,eAAe,CAACE,iBAAD,CAApC;MACAzG,MAAM,GAAG6F,YAAY,CAAC7F,MAAb,GAAsB6F,YAAY,CAACpL,IAA5C;IACD;IAED,KAAK,IAAIiM,CAAC,GAAGD,iBAAiB,GAAG,CAAjC,EAAoCC,CAAC,IAAIL,KAAzC,EAAgDK,CAAC,EAAjD,EAAqD;MACnD,IAAIjM,IAAI,GAAK+L,QAAF,CAAkCE,CAAlC,CAAX;MAEAH,eAAe,CAACG,CAAD,CAAf,GAAqB;QACnB1G,MAAM,EAANA,MADmB;QAEnBvF,IAAI,EAAJA;MAFmB,CAArB;MAKAuF,MAAM,IAAIvF,IAAV;IACD;IAED6L,aAAa,CAACG,iBAAd,GAAkCJ,KAAlC;EACD;EAED,OAAOE,eAAe,CAACF,KAAD,CAAtB;AACD,CA9BD;AAgCA,IAAMM,iBAAe,GAAG,SAAlBA,eAAkB,CACtB7I,KADsB,EAEtBwI,aAFsB,EAGtBtG,MAHsB,EAInB;EACH,IAAQuG,eAAR,GAA+CD,aAA/C,CAAQC,eAAR;IAAyBE,iBAAzB,GAA+CH,aAA/C,CAAyBG,iBAAzB;EAEA,IAAMG,sBAAsB,GAC1BH,iBAAiB,GAAG,CAApB,GAAwBF,eAAe,CAACE,iBAAD,CAAf,CAAmCzG,MAA3D,GAAoE,CADtE;EAGA,IAAI4G,sBAAsB,IAAI5G,MAA9B,EAAsC;IACpC;IACA,OAAO6G,6BAA2B,CAChC/I,KADgC,EAEhCwI,aAFgC,EAGhCG,iBAHgC,EAIhC,CAJgC,EAKhCzG,MALgC,CAAlC;EAOD,CATD,MASO;IACL;IACA;IACA;IACA,OAAO8G,kCAAgC,CACrChJ,KADqC,EAErCwI,aAFqC,EAGrCnF,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYqF,iBAAZ,CAHqC,EAIrCzG,MAJqC,CAAvC;EAMD;AACF,CA9BD;AAgCA,IAAM6G,6BAA2B,GAAG,SAA9BA,2BAA8B,CAClC/I,KADkC,EAElCwI,aAFkC,EAGlCS,IAHkC,EAIlCC,GAJkC,EAKlChH,MALkC,EAMvB;EACX,OAAOgH,GAAG,IAAID,IAAd,EAAoB;IAClB,IAAME,MAAM,GAAGD,GAAG,GAAG7F,IAAI,CAAC+F,KAAL,CAAW,CAACH,IAAI,GAAGC,GAAR,IAAe,CAA1B,CAArB;IACA,IAAMG,aAAa,GAAGhB,iBAAe,CAACrI,KAAD,EAAQmJ,MAAR,EAAgBX,aAAhB,CAAf,CAA8CtG,MAApE;IAEA,IAAImH,aAAa,KAAKnH,MAAtB,EAA8B;MAC5B,OAAOiH,MAAP;IACD,CAFD,MAEO,IAAIE,aAAa,GAAGnH,MAApB,EAA4B;MACjCgH,GAAG,GAAGC,MAAM,GAAG,CAAf;IACD,CAFM,MAEA,IAAIE,aAAa,GAAGnH,MAApB,EAA4B;MACjC+G,IAAI,GAAGE,MAAM,GAAG,CAAhB;IACD;EACF;EAED,IAAID,GAAG,GAAG,CAAV,EAAa;IACX,OAAOA,GAAG,GAAG,CAAb;EACD,CAFD,MAEO;IACL,OAAO,CAAP;EACD;AACF,CAzBD;AA2BA,IAAMF,kCAAgC,GAAG,SAAnCA,gCAAmC,CACvChJ,KADuC,EAEvCwI,aAFuC,EAGvCD,KAHuC,EAIvCrG,MAJuC,EAK5B;EACX,IAAQoH,SAAR,GAAsBtJ,KAAtB,CAAQsJ,SAAR;EACA,IAAIC,QAAQ,GAAG,CAAf;EAEA,OACEhB,KAAK,GAAGe,SAAR,IACAjB,iBAAe,CAACrI,KAAD,EAAQuI,KAAR,EAAeC,aAAf,CAAf,CAA6CtG,MAA7C,GAAsDA,MAFxD,EAGE;IACAqG,KAAK,IAAIgB,QAAT;IACAA,QAAQ,IAAI,CAAZ;EACD;EAED,OAAOR,6BAA2B,CAChC/I,KADgC,EAEhCwI,aAFgC,EAGhCnF,IAAI,CAACE,GAAL,CAASgF,KAAT,EAAgBe,SAAS,GAAG,CAA5B,CAHgC,EAIhCjG,IAAI,CAAC+F,KAAL,CAAWb,KAAK,GAAG,CAAnB,CAJgC,EAKhCrG,MALgC,CAAlC;AAOD,CAxBD;AA0BA,IAAMsI,qBAAqB,GAAG,SAAxBA,qBAAwB,eAGzB;EAAA,IAFDlB,SAEC,SAFDA,SAEC;EAAA,IADDb,eACC,SADDA,eACC;IADgBiD,iBAChB,SADgBA,iBAChB;IADmC/C,iBACnC,SADmCA,iBACnC;EACH,IAAIgD,wBAAwB,GAAG,CAA/B,CADG;EAIH;;EACA,IAAIhD,iBAAiB,IAAIW,SAAzB,EAAoC;IAClCX,iBAAiB,GAAGW,SAAS,GAAG,CAAhC;EACD;EAED,IAAIX,iBAAiB,IAAI,CAAzB,EAA4B;IAC1B,IAAMZ,YAAY,GAAGU,eAAe,CAACE,iBAAD,CAApC;IACAgD,wBAAwB,GAAG5D,YAAY,CAAC7F,MAAb,GAAsB6F,YAAY,CAACpL,IAA9D;EACD;EAED,IAAMqL,kBAAkB,GAAGsB,SAAS,GAAGX,iBAAZ,GAAgC,CAA3D;EACA,IAAMV,0BAA0B,GAAGD,kBAAkB,GAAG0D,iBAAxD;EAEA,OAAOC,wBAAwB,GAAG1D,0BAAlC;AACD,CArBD;AAuBA,IAAM2D,gBAAgB,gBAAGtB,mBAAmB,CAAC;EAC3CC,aAAa,EAAE,uBACbvK,KADa,EAEbuI,KAFa,EAGbC,aAHa;IAAA,OAIFH,iBAAe,CAACrI,KAAD,EAAQuI,KAAR,EAAeC,aAAf,CAAf,CAA6CtG,MAJ3C;EAAA,CAD4B;EAO3CuI,WAAW,EAAE,qBACXzK,KADW,EAEXuI,KAFW,EAGXC,aAHW;IAAA,OAIAA,aAAa,CAACC,eAAd,CAA8BF,KAA9B,EAAqC5L,IAJrC;EAAA,CAP8B;EAa3C6N,qBAAqB,EAArBA,qBAb2C;EAe3ChB,6BAA6B,EAAE,uCAC7BxJ,KAD6B,EAE7BuI,KAF6B,EAG7BjE,KAH6B,EAI7BmF,YAJ6B,EAK7BjB,aAL6B,EAM7B/D,aAN6B,EAOlB;IACX,IAAQ3G,SAAR,GAA6CkC,KAA7C,CAAQlC,SAAR;MAAmBX,MAAnB,GAA6C6C,KAA7C,CAAmB7C,MAAnB;MAA2B+N,MAA3B,GAA6ClL,KAA7C,CAA2BkL,MAA3B;MAAmChO,KAAnC,GAA6C8C,KAA7C,CAAmC9C,KAAnC,CADW;;IAIX,IAAMiO,YAAY,GAAGrN,SAAS,KAAK,YAAd,IAA8BoN,MAAM,KAAK,YAA9D;IACA,IAAMvO,IAAI,GAAMwO,YAAY,GAAGjO,KAAH,GAAWC,MAAvC;IACA,IAAM4K,YAAY,GAAGM,iBAAe,CAACrI,KAAD,EAAQuI,KAAR,EAAeC,aAAf,CAApC,CANW;IASX;;IACA,IAAMkB,kBAAkB,GAAGc,qBAAqB,CAACxK,KAAD,EAAQwI,aAAR,CAAhD;IAEA,IAAMmB,SAAS,GAAGtG,IAAI,CAACC,GAAL,CAChB,CADgB,EAEhBD,IAAI,CAACE,GAAL,CAASmG,kBAAkB,GAAG/M,IAA9B,EAAoCoL,YAAY,CAAC7F,MAAjD,CAFgB,CAAlB;IAIA,IAAM0H,SAAS,GAAGvG,IAAI,CAACC,GAAL,CAChB,CADgB,EAEhByE,YAAY,CAAC7F,MAAb,GAAsBvF,IAAtB,GAA6BoL,YAAY,CAACpL,IAA1C,GAAiD8H,aAFjC,CAAlB;IAKA,IAAIH,KAAK,KAAK,OAAd,EAAuB;MACrB,IACEmF,YAAY,IAAIG,SAAS,GAAGjN,IAA5B,IACA8M,YAAY,IAAIE,SAAS,GAAGhN,IAF9B,EAGE;QACA2H,KAAK,GAAG,MAAR;MACD,CALD,MAKO;QACLA,KAAK,GAAG,QAAR;MACD;IACF;IAED,QAAQA,KAAR;MACE,KAAK,OAAL;QACE,OAAOqF,SAAP;MACF,KAAK,KAAL;QACE,OAAOC,SAAP;MACF,KAAK,QAAL;QACE,OAAOvG,IAAI,CAACwG,KAAL,CAAWD,SAAS,GAAG,CAACD,SAAS,GAAGC,SAAb,IAA0B,CAAjD,CAAP;MACF,KAAK,MAAL;MACA;QACE,IAAIH,YAAY,IAAIG,SAAhB,IAA6BH,YAAY,IAAIE,SAAjD,EAA4D;UAC1D,OAAOF,YAAP;QACD,CAFD,MAEO,IAAIA,YAAY,GAAGG,SAAnB,EAA8B;UACnC,OAAOA,SAAP;QACD,CAFM,MAEA;UACL,OAAOD,SAAP;QACD;IAAA;EAEN,CAvE0C;EAyE3Ce,sBAAsB,EAAE,gCACtB1K,KADsB,EAEtBkC,MAFsB,EAGtBsG,aAHsB;IAAA,OAIXK,iBAAe,CAAC7I,KAAD,EAAQwI,aAAR,EAAuBtG,MAAvB,CAJJ;EAAA,CAzEmB;EA+E3CyI,yBAAyB,EAAE,mCACzB3K,KADyB,EAEzB6G,UAFyB,EAGzB4C,YAHyB,EAIzBjB,aAJyB,EAKd;IACX,IAAQ1K,SAAR,GAAwDkC,KAAxD,CAAQlC,SAAR;MAAmBX,MAAnB,GAAwD6C,KAAxD,CAAmB7C,MAAnB;MAA2BmM,SAA3B,GAAwDtJ,KAAxD,CAA2BsJ,SAA3B;MAAsC4B,MAAtC,GAAwDlL,KAAxD,CAAsCkL,MAAtC;MAA8ChO,KAA9C,GAAwD8C,KAAxD,CAA8C9C,KAA9C,CADW;;IAIX,IAAMiO,YAAY,GAAGrN,SAAS,KAAK,YAAd,IAA8BoN,MAAM,KAAK,YAA9D;IACA,IAAMvO,IAAI,GAAMwO,YAAY,GAAGjO,KAAH,GAAWC,MAAvC;IACA,IAAM4K,YAAY,GAAGM,iBAAe,CAACrI,KAAD,EAAQ6G,UAAR,EAAoB2B,aAApB,CAApC;IACA,IAAMmB,SAAS,GAAGF,YAAY,GAAG9M,IAAjC;IAEA,IAAIuF,MAAM,GAAG6F,YAAY,CAAC7F,MAAb,GAAsB6F,YAAY,CAACpL,IAAhD;IACA,IAAImK,SAAS,GAAGD,UAAhB;IAEA,OAAOC,SAAS,GAAGwC,SAAS,GAAG,CAAxB,IAA6BpH,MAAM,GAAGyH,SAA7C,EAAwD;MACtD7C,SAAS;MACT5E,MAAM,IAAImG,iBAAe,CAACrI,KAAD,EAAQ8G,SAAR,EAAmB0B,aAAnB,CAAf,CAAiD7L,IAA3D;IACD;IAED,OAAOmK,SAAP;EACD,CAtG0C;EAwG3ClH,iBAxG2C,6BAwGzBI,KAxGyB,EAwGNM,QAxGM,EAwGwB;IACjE,YAAgCN,KAAhC;MAAQ0L,iBAAR,SAAQA,iBAAR;IAEA,IAAMlD,aAAa,GAAG;MACpBC,eAAe,EAAE,EADG;MAEpBiD,iBAAiB,EAAEA,iBAAiB,IAAIhE,6BAFpB;MAGpBiB,iBAAiB,EAAE,CAAC;IAHA,CAAtB;IAMArI,QAAQ,CAACuL,eAAT,GAA2B,UACzBtD,KADyB,EAEzByB,iBAFyB,EAGtB;MAAA,IADHA,iBACG;QADHA,iBACG,GAD2B,IAC3B;MAAA;MACHxB,aAAa,CAACG,iBAAd,GAAkCtF,IAAI,CAACE,GAAL,CAChCiF,aAAa,CAACG,iBADkB,EAEhCJ,KAAK,GAAG,CAFwB,CAAlC,CADG;MAOH;MACA;MACA;;MACAjI,QAAQ,CAACyB,kBAAT,CAA4B,CAAC,CAA7B;MAEA,IAAIiI,iBAAJ,EAAuB;QACrB1J,QAAQ,CAAC8J,WAAT;MACD;IACF,CAlBD;IAoBA,OAAO5B,aAAP;EACD,CAtI0C;EAwI3C3I,qCAAqC,EAAE,KAxII;EA0I3CC,aAAa,EAAE,8BAAoC;IAAA,IAAjC4I,QAAiC,SAAjCA,QAAiC;IACjD,IAAIhK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,IAAI,OAAO8J,QAAP,KAAoB,UAAxB,EAAoC;QAClC,MAAMjB,KAAK,CACT,oDACE,8BADF,YAEMiB,QAAQ,KAAK,IAAb,GAAoB,MAApB,GAA6B,OAAOA,QAF1C,wBADS,CAAX;MAKD;IACF;EACF;AApJ0C,CAAD,CAA5C;AC/JA,IAAMoD,aAAa,gBAAG/M,mBAAmB,CAAC;EACxCC,eAAe,EAAE,+BAA8BuJ,KAA9B;IAAA,IAAG3G,WAAH,QAAGA,WAAH;IAAA,OACf2G,KAAK,GAAK3G,WADK;EAAA,CADuB;EAIxCzC,cAAc,EAAE,+BAA8BoJ,KAA9B;IAAA,IAAG3G,WAAH,SAAGA,WAAH;IAAA,OACZA,WADY;EAAA,CAJwB;EAOxCnC,YAAY,EAAE,6BAA4B8I,KAA5B;IAAA,IAAG1G,SAAH,SAAGA,SAAH;IAAA,OACZ0G,KAAK,GAAK1G,SADE;EAAA,CAP0B;EAUxCrC,YAAY,EAAE,6BAA4B+I,KAA5B;IAAA,IAAG1G,SAAH,SAAGA,SAAH;IAAA,OACVA,SADU;EAAA,CAV0B;EAaxCzC,uBAAuB,EAAE;IAAA,IAAGoF,QAAH,SAAGA,QAAH;MAAa3C,SAAb,SAAaA,SAAb;IAAA,OACrBA,SAAF,GAA6B2C,QADN;EAAA,CAbe;EAgBxCnF,sBAAsB,EAAE;IAAA,IAAGkF,WAAH,SAAGA,WAAH;MAAgB3C,WAAhB,SAAgBA,WAAhB;IAAA,OACpBA,WAAF,GAA+B2C,WADT;EAAA,CAhBgB;EAmBxCjF,8BAA8B,EAAE,+CAE9BlB,WAF8B,EAG9BkG,KAH8B,EAI9BrG,UAJ8B,EAK9BuK,aAL8B,EAM9B/D,aAN8B,EAOnB;IAAA,IANTF,WAMS,SANTA,WAMS;MANI3C,WAMJ,SANIA,WAMJ;MANiB1E,KAMjB,SANiBA,KAMjB;IACX,IAAM6O,gBAAgB,GAAG1I,IAAI,CAACC,GAAL,CACvB,CADuB,EAEvBiB,WAAW,GAAK3C,WAAhB,GAA6C1E,KAFtB,CAAzB;IAIA,IAAMyM,SAAS,GAAGtG,IAAI,CAACE,GAAL,CAChBwI,gBADgB,EAEhB3N,WAAW,GAAKwD,WAFA,CAAlB;IAIA,IAAMgI,SAAS,GAAGvG,IAAI,CAACC,GAAL,CAChB,CADgB,EAEhBlF,WAAW,GAAKwD,WAAhB,GACE1E,KADF,GAEEuH,aAFF,GAGI7C,WALY,CAAlB;IAQA,IAAI0C,KAAK,KAAK,OAAd,EAAuB;MACrB,IAAIrG,UAAU,IAAI2L,SAAS,GAAG1M,KAA1B,IAAmCe,UAAU,IAAI0L,SAAS,GAAGzM,KAAjE,EAAwE;QACtEoH,KAAK,GAAG,MAAR;MACD,CAFD,MAEO;QACLA,KAAK,GAAG,QAAR;MACD;IACF;IAED,QAAQA,KAAR;MACE,KAAK,OAAL;QACE,OAAOqF,SAAP;MACF,KAAK,KAAL;QACE,OAAOC,SAAP;MACF,KAAK,QAAL;QACE;QACA;QACA,IAAMoC,YAAY,GAAG3I,IAAI,CAACwG,KAAL,CACnBD,SAAS,GAAG,CAACD,SAAS,GAAGC,SAAb,IAA0B,CADnB,CAArB;QAGA,IAAIoC,YAAY,GAAG3I,IAAI,CAAC4I,IAAL,CAAU/O,KAAK,GAAG,CAAlB,CAAnB,EAAyC;UACvC,OAAO,CAAP,CADuC;QAExC,CAFD,MAEO,IAAI8O,YAAY,GAAGD,gBAAgB,GAAG1I,IAAI,CAAC+F,KAAL,CAAWlM,KAAK,GAAG,CAAnB,CAAtC,EAA6D;UAClE,OAAO6O,gBAAP,CADkE;QAEnE,CAFM,MAEA;UACL,OAAOC,YAAP;QACD;MACH,KAAK,MAAL;MACA;QACE,IAAI/N,UAAU,IAAI2L,SAAd,IAA2B3L,UAAU,IAAI0L,SAA7C,EAAwD;UACtD,OAAO1L,UAAP;QACD,CAFD,MAEO,IAAI2L,SAAS,GAAGD,SAAhB,EAA2B;UAChC;UACA;UACA,OAAOC,SAAP;QACD,CAJM,MAIA,IAAI3L,UAAU,GAAG2L,SAAjB,EAA4B;UACjC,OAAOA,SAAP;QACD,CAFM,MAEA;UACL,OAAOD,SAAP;QACD;IAAA;EAEN,CAnFuC;EAqFxCpK,2BAA2B,EAAE,4CAE3BjB,QAF2B,EAG3BgG,KAH2B,EAI3B5D,SAJ2B,EAK3B8H,aAL2B,EAM3B/D,aAN2B,EAOhB;IAAA,IANT5C,SAMS,SANTA,SAMS;MANE1E,MAMF,SANEA,MAMF;MANUqH,QAMV,SANUA,QAMV;IACX,IAAM0H,aAAa,GAAG7I,IAAI,CAACC,GAAL,CACpB,CADoB,EAEpBkB,QAAQ,GAAK3C,SAAb,GAAwC1E,MAFpB,CAAtB;IAIA,IAAMwM,SAAS,GAAGtG,IAAI,CAACE,GAAL,CAChB2I,aADgB,EAEhB5N,QAAQ,GAAKuD,SAFG,CAAlB;IAIA,IAAM+H,SAAS,GAAGvG,IAAI,CAACC,GAAL,CAChB,CADgB,EAEhBhF,QAAQ,GAAKuD,SAAb,GACE1E,MADF,GAEEsH,aAFF,GAGI5C,SALY,CAAlB;IAQA,IAAIyC,KAAK,KAAK,OAAd,EAAuB;MACrB,IAAI5D,SAAS,IAAIkJ,SAAS,GAAGzM,MAAzB,IAAmCuD,SAAS,IAAIiJ,SAAS,GAAGxM,MAAhE,EAAwE;QACtEmH,KAAK,GAAG,MAAR;MACD,CAFD,MAEO;QACLA,KAAK,GAAG,QAAR;MACD;IACF;IAED,QAAQA,KAAR;MACE,KAAK,OAAL;QACE,OAAOqF,SAAP;MACF,KAAK,KAAL;QACE,OAAOC,SAAP;MACF,KAAK,QAAL;QACE;QACA;QACA,IAAMoC,YAAY,GAAG3I,IAAI,CAACwG,KAAL,CACnBD,SAAS,GAAG,CAACD,SAAS,GAAGC,SAAb,IAA0B,CADnB,CAArB;QAGA,IAAIoC,YAAY,GAAG3I,IAAI,CAAC4I,IAAL,CAAU9O,MAAM,GAAG,CAAnB,CAAnB,EAA0C;UACxC,OAAO,CAAP,CADwC;QAEzC,CAFD,MAEO,IAAI6O,YAAY,GAAGE,aAAa,GAAG7I,IAAI,CAAC+F,KAAL,CAAWjM,MAAM,GAAG,CAApB,CAAnC,EAA2D;UAChE,OAAO+O,aAAP,CADgE;QAEjE,CAFM,MAEA;UACL,OAAOF,YAAP;QACD;MACH,KAAK,MAAL;MACA;QACE,IAAItL,SAAS,IAAIkJ,SAAb,IAA0BlJ,SAAS,IAAIiJ,SAA3C,EAAsD;UACpD,OAAOjJ,SAAP;QACD,CAFD,MAEO,IAAIkJ,SAAS,GAAGD,SAAhB,EAA2B;UAChC;UACA;UACA,OAAOC,SAAP;QACD,CAJM,MAIA,IAAIlJ,SAAS,GAAGkJ,SAAhB,EAA2B;UAChC,OAAOA,SAAP;QACD,CAFM,MAEA;UACL,OAAOD,SAAP;QACD;IAAA;EAEN,CArJuC;EAuJxC1K,4BAA4B,EAAE,6CAE5BhB,UAF4B;IAAA,IAC1B2D,WAD0B,SAC1BA,WAD0B;MACb2C,WADa,SACbA,WADa;IAAA,OAI5BlB,IAAI,CAACC,GAAL,CACE,CADF,EAEED,IAAI,CAACE,GAAL,CACEgB,WAAW,GAAG,CADhB,EAEElB,IAAI,CAAC+F,KAAL,CAAWnL,UAAU,GAAK2D,WAA1B,CAFF,CAFF,CAJ4B;EAAA,CAvJU;EAmKxC1C,+BAA+B,EAAE,iDAE/B2H,UAF+B,EAG/B5I,UAH+B,EAIpB;IAAA,IAHT2D,WAGS,UAHTA,WAGS;MAHI2C,WAGJ,UAHIA,WAGJ;MAHiBrH,KAGjB,UAHiBA,KAGjB;IACX,IAAMmF,IAAI,GAAGwE,UAAU,GAAKjF,WAA5B;IACA,IAAMuK,iBAAiB,GAAG9I,IAAI,CAAC4I,IAAL,CACxB,CAAC/O,KAAK,GAAGe,UAAR,GAAqBoE,IAAtB,IAAgCT,WADR,CAA1B;IAGA,OAAOyB,IAAI,CAACC,GAAL,CACL,CADK,EAELD,IAAI,CAACE,GAAL,CACEgB,WAAW,GAAG,CADhB,EAEEsC,UAAU,GAAGsF,iBAAb,GAAiC,CAFnC;IAAA,CAFK,CAAP;EAOD,CAnLuC;;EAqLxCzM,yBAAyB,EAAE,2CAEzBgB,SAFyB;IAAA,IACvBmB,SADuB,UACvBA,SADuB;MACZ2C,QADY,UACZA,QADY;IAAA,OAIzBnB,IAAI,CAACC,GAAL,CACE,CADF,EAEED,IAAI,CAACE,GAAL,CAASiB,QAAQ,GAAG,CAApB,EAAuBnB,IAAI,CAAC+F,KAAL,CAAW1I,SAAS,GAAKmB,SAAzB,CAAvB,CAFF,CAJyB;EAAA,CArLa;EA8LxClC,4BAA4B,EAAE,8CAE5BkH,UAF4B,EAG5BnG,SAH4B,EAIjB;IAAA,IAHTmB,SAGS,UAHTA,SAGS;MAHE2C,QAGF,UAHEA,QAGF;MAHYrH,MAGZ,UAHYA,MAGZ;IACX,IAAMqF,GAAG,GAAGqE,UAAU,GAAKhF,SAA3B;IACA,IAAMuK,cAAc,GAAG/I,IAAI,CAAC4I,IAAL,CACrB,CAAC9O,MAAM,GAAGuD,SAAT,GAAqB8B,GAAtB,IAA+BX,SADV,CAAvB;IAGA,OAAOwB,IAAI,CAACC,GAAL,CACL,CADK,EAELD,IAAI,CAACE,GAAL,CACEiB,QAAQ,GAAG,CADb,EAEEqC,UAAU,GAAGuF,cAAb,GAA8B,CAFhC;IAAA,CAFK,CAAP;EAOD,CA9MuC;;EAgNxCxM,iBAhNwC,6BAgNtBI,KAhNsB,EAgNE;EAAA,CAhNF;EAoNxCH,qCAAqC,EAAE,IApNC;EAsNxCC,aAAa,EAAE,+BAAkD;IAAA,IAA/C8B,WAA+C,UAA/CA,WAA+C;MAAlCC,SAAkC,UAAlCA,SAAkC;IAC/D,IAAInD,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,IAAI,OAAOgD,WAAP,KAAuB,QAA3B,EAAqC;QACnC,MAAM6F,KAAK,CACT,uDACE,4BADF,YAGI7F,WAAW,KAAK,IAAhB,GAAuB,MAAvB,GAAgC,OAAOA,WAH3C,wBADS,CAAX;MAOD;MAED,IAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmC;QACjC,MAAM4F,KAAK,CACT,qDACE,4BADF,YAEM5F,SAAS,KAAK,IAAd,GAAqB,MAArB,GAA8B,OAAOA,SAF3C,wBADS,CAAX;MAKD;IACF;EACF;AA1OuC,CAAD,CAAzC;ACEA,IAAMwK,aAAa,gBAAG/B,mBAAmB,CAAC;EACxCC,aAAa,EAAE,6BAA2BhC,KAA3B;IAAA,IAAGG,QAAH,QAAGA,QAAH;IAAA,OACbH,KAAK,GAAKG,QADG;EAAA,CADyB;EAIxC+B,WAAW,EAAE,4BAA2BlC,KAA3B;IAAA,IAAGG,QAAH,SAAGA,QAAH;IAAA,OACTA,QADS;EAAA,CAJ2B;EAOxC8B,qBAAqB,EAAE;IAAA,IAAGlB,SAAH,SAAGA,SAAH;MAAcZ,QAAd,SAAcA,QAAd;IAAA,OACnBA,QAAF,GAA4BY,SADP;EAAA,CAPiB;EAUxCE,6BAA6B,EAAE,8CAE7BjB,KAF6B,EAG7BjE,KAH6B,EAI7BmF,YAJ6B,EAK7BjB,aAL6B,EAM7B/D,aAN6B,EAOlB;IAAA,IANT3G,SAMS,SANTA,SAMS;MANEX,MAMF,SANEA,MAMF;MANUmM,SAMV,SANUA,SAMV;MANqBZ,QAMrB,SANqBA,QAMrB;MAN+BwC,MAM/B,SAN+BA,MAM/B;MANuChO,KAMvC,SANuCA,KAMvC;IACX;IACA,IAAMiO,YAAY,GAAGrN,SAAS,KAAK,YAAd,IAA8BoN,MAAM,KAAK,YAA9D;IACA,IAAMvO,IAAI,GAAMwO,YAAY,GAAGjO,KAAH,GAAWC,MAAvC;IACA,IAAMmP,cAAc,GAAGjJ,IAAI,CAACC,GAAL,CACrB,CADqB,EAErBgG,SAAS,GAAKZ,QAAd,GAAwC/L,IAFnB,CAAvB;IAIA,IAAMgN,SAAS,GAAGtG,IAAI,CAACE,GAAL,CAChB+I,cADgB,EAEhB/D,KAAK,GAAKG,QAFM,CAAlB;IAIA,IAAMkB,SAAS,GAAGvG,IAAI,CAACC,GAAL,CAChB,CADgB,EAEhBiF,KAAK,GAAKG,QAAV,GACE/L,IADF,GAEI+L,QAFJ,GAGEjE,aALc,CAAlB;IAQA,IAAIH,KAAK,KAAK,OAAd,EAAuB;MACrB,IACEmF,YAAY,IAAIG,SAAS,GAAGjN,IAA5B,IACA8M,YAAY,IAAIE,SAAS,GAAGhN,IAF9B,EAGE;QACA2H,KAAK,GAAG,MAAR;MACD,CALD,MAKO;QACLA,KAAK,GAAG,QAAR;MACD;IACF;IAED,QAAQA,KAAR;MACE,KAAK,OAAL;QACE,OAAOqF,SAAP;MACF,KAAK,KAAL;QACE,OAAOC,SAAP;MACF,KAAK,QAAL;QAAe;UACb;UACA;UACA,IAAMoC,YAAY,GAAG3I,IAAI,CAACwG,KAAL,CACnBD,SAAS,GAAG,CAACD,SAAS,GAAGC,SAAb,IAA0B,CADnB,CAArB;UAGA,IAAIoC,YAAY,GAAG3I,IAAI,CAAC4I,IAAL,CAAUtP,IAAI,GAAG,CAAjB,CAAnB,EAAwC;YACtC,OAAO,CAAP,CADsC;UAEvC,CAFD,MAEO,IAAIqP,YAAY,GAAGM,cAAc,GAAGjJ,IAAI,CAAC+F,KAAL,CAAWzM,IAAI,GAAG,CAAlB,CAApC,EAA0D;YAC/D,OAAO2P,cAAP,CAD+D;UAEhE,CAFM,MAEA;YACL,OAAON,YAAP;UACD;QACF;MACD,KAAK,MAAL;MACA;QACE,IAAIvC,YAAY,IAAIG,SAAhB,IAA6BH,YAAY,IAAIE,SAAjD,EAA4D;UAC1D,OAAOF,YAAP;QACD,CAFD,MAEO,IAAIA,YAAY,GAAGG,SAAnB,EAA8B;UACnC,OAAOA,SAAP;QACD,CAFM,MAEA;UACL,OAAOD,SAAP;QACD;IAAA;EAEN,CA7EuC;EA+ExCe,sBAAsB,EAAE,uCAEtBxI,MAFsB;IAAA,IACpBoH,SADoB,SACpBA,SADoB;MACTZ,QADS,SACTA,QADS;IAAA,OAItBrF,IAAI,CAACC,GAAL,CACE,CADF,EAEED,IAAI,CAACE,GAAL,CAAS+F,SAAS,GAAG,CAArB,EAAwBjG,IAAI,CAAC+F,KAAL,CAAWlH,MAAM,GAAKwG,QAAtB,CAAxB,CAFF,CAJsB;EAAA,CA/EgB;EAwFxCiC,yBAAyB,EAAE,0CAEzB9D,UAFyB,EAGzB4C,YAHyB,EAId;IAAA,IAHT3L,SAGS,SAHTA,SAGS;MAHEX,MAGF,SAHEA,MAGF;MAHUmM,SAGV,SAHUA,SAGV;MAHqBZ,QAGrB,SAHqBA,QAGrB;MAH+BwC,MAG/B,SAH+BA,MAG/B;MAHuChO,KAGvC,SAHuCA,KAGvC;IACX;IACA,IAAMiO,YAAY,GAAGrN,SAAS,KAAK,YAAd,IAA8BoN,MAAM,KAAK,YAA9D;IACA,IAAMhJ,MAAM,GAAG2E,UAAU,GAAK6B,QAA9B;IACA,IAAM/L,IAAI,GAAMwO,YAAY,GAAGjO,KAAH,GAAWC,MAAvC;IACA,IAAMoP,eAAe,GAAGlJ,IAAI,CAAC4I,IAAL,CACtB,CAACtP,IAAI,GAAG8M,YAAP,GAAsBvH,MAAvB,IAAmCwG,QADb,CAAxB;IAGA,OAAOrF,IAAI,CAACC,GAAL,CACL,CADK,EAELD,IAAI,CAACE,GAAL,CACE+F,SAAS,GAAG,CADd,EAEEzC,UAAU,GAAG0F,eAAb,GAA+B,CAFjC;IAAA,CAFK,CAAP;EAOD,CA3GuC;;EA6GxC3M,iBA7GwC,6BA6GtBI,KA7GsB,EA6GE;EAAA,CA7GF;EAiHxCH,qCAAqC,EAAE,IAjHC;EAmHxCC,aAAa,EAAE,8BAAoC;IAAA,IAAjC4I,QAAiC,SAAjCA,QAAiC;IACjD,IAAIhK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,IAAI,OAAO8J,QAAP,KAAoB,QAAxB,EAAkC;QAChC,MAAMjB,KAAK,CACT,oDACE,4BADF,YAEMiB,QAAQ,KAAK,IAAb,GAAoB,MAApB,GAA6B,OAAOA,QAF1C,wBADS,CAAX;MAKD;IACF;EACF;AA7HuC,CAAD,CAAzC;;ACNA;AACA;AACA,SAAwB8D,cAAT,CAAwBC,IAAxB,EAAsCC,IAAtC,EAA6D;EAC1E,KAAK,IAAIC,SAAT,IAAsBF,IAAtB,EAA4B;IAC1B,IAAI,EAAEE,SAAS,IAAID,IAAf,CAAJ,EAA0B;MACxB,OAAO,IAAP;IACD;EACF;EACD,KAAK,IAAIC,UAAT,IAAsBD,IAAtB,EAA4B;IAC1B,IAAID,IAAI,CAACE,UAAD,CAAJ,KAAoBD,IAAI,CAACC,UAAD,CAA5B,EAAyC;MACvC,OAAO,IAAP;IACD;EACF;EACD,OAAO,KAAP;AACD;;;ACdD;AAIA;;AACA,SAAwBC,QAAT,CACbC,SADa,EAEb5I,SAFa,EAGJ;EACT,IAAe6I,SAAf,GAA0CD,SAA1C,CAAQ5P,KAAR;IAA6B8P,QAA7B,iCAA0CF,SAA1C;EACA,IAAeG,SAAf,GAA0C/I,SAA1C,CAAQhH,KAAR;IAA6BgQ,QAA7B,iCAA0ChJ,SAA1C;EAEA,OACE,CAACuI,cAAc,CAACM,SAAD,EAAYE,SAAZ,CAAf,IAAyC,CAACR,cAAc,CAACO,QAAD,EAAWE,QAAX,CAD1D;AAGD;;ACXD;AACA;;AACA,SAAwBC,qBAAT,CACbjJ,SADa,EAEbkJ,SAFa,EAGJ;EACT,OACE,CAACP,QAAQ,CAAC,KAAK5M,KAAN,EAAaiE,SAAb,CAAT,IAAoCuI,cAAc,CAAC,KAAKnM,KAAN,EAAa8M,SAAb,CADpD;AAGD","names":["hasNativePerformanceNow","performance","now","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","tick","call","requestAnimationFrame","size","getScrollbarSize","recalculate","div","document","createElement","style","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","cachedRTLResult","getRTLOffsetType","outerDiv","outerStyle","direction","innerDiv","innerStyle","scrollLeft","IS_SCROLLING_DEBOUNCE_INTERVAL","defaultItemKey","columnIndex","data","rowIndex","devWarningsOverscanCount","devWarningsOverscanRowsColumnsCount","devWarningsTagName","process","env","NODE_ENV","window","WeakSet","createGridComponent","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","_inheritsLoose","props","_this","_instanceProps","_resetIsScrollingTimeoutId","_outerRef","state","instance","isScrolling","horizontalScrollDirection","initialScrollLeft","scrollTop","initialScrollTop","scrollUpdateWasRequested","verticalScrollDirection","_callOnItemsRendered","memoizeOne","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","columnWidth","rowHeight","itemStyleCache","_getItemStyleCache","key","hasOwnProperty","offset","isRtl","position","left","undefined","right","top","_","__","___","_onScroll","event","currentTarget","clientHeight","scrollHeight","scrollWidth","setState","prevState","calculatedScrollLeft","Math","max","min","calculatedScrollTop","_resetIsScrollingDebounced","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","Grid","getDerivedStateFromProps","nextProps","validateSharedProps","_proto","scrollTo","scrollToItem","align","columnCount","rowCount","scrollbarSize","estimatedTotalHeight","estimatedTotalWidth","horizontalScrollbarSize","verticalScrollbarSize","componentDidMount","_callPropsCallbacks","componentDidUpdate","componentWillUnmount","render","children","className","innerRef","innerElementType","innerTagName","itemData","_this$props4$itemKey","itemKey","outerElementType","outerTagName","useIsScrolling","_getHorizontalRangeToRender","columnStartIndex","columnStopIndex","_getVerticalRangeToRender","rowStartIndex","rowStopIndex","items","push","WebkitOverflowScrolling","willChange","pointerEvents","overscanColumnCount","overscanColumnsCount","overscanCount","overscanCountResolved","startIndex","stopIndex","overscanBackward","overscanForward","overscanRowCount","overscanRowsCount","PureComponent","defaultProps","has","add","console","warn","Error","DEFAULT_ESTIMATED_ITEM_SIZE","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","itemMetadata","numUnmeasuredItems","totalSizeOfUnmeasuredItems","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","getItemMetadata","itemType","index","instanceProps","itemMetadataMap","itemSize","lastMeasuredIndex","i","findNearestItem","lastMeasuredItemOffset","findNearestItemBinarySearch","findNearestItemExponentialSearch","high","low","middle","floor","currentOffset","itemCount","interval","getOffsetForIndexAndAlignment","scrollOffset","estimatedTotalSize","maxOffset","minOffset","round","VariableSizeGrid","resetAfterColumnIndex","shouldForceUpdate","resetAfterIndices","resetAfterRowIndex","_ref6$shouldForceUpda","forceUpdate","devWarningsDirection","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getStartIndexForOffset","getStopIndexForStartIndex","scrollDirection","initialScrollOffset","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","layout","isHorizontal","offsetHorizontal","_onScrollHorizontal","_onScrollVertical","List","_this$props5$itemKey","_getRangeToRender","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","resetAfterIndex","FixedSizeGrid","lastColumnOffset","middleOffset","ceil","lastRowOffset","numVisibleColumns","numVisibleRows","FixedSizeList","lastItemOffset","numVisibleItems","shallowDiffers","prev","next","attribute","areEqual","prevProps","prevStyle","prevRest","nextStyle","nextRest","shouldComponentUpdate","nextState"],"sources":["/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/react-window/src/timer.js","/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/react-window/src/domHelpers.js","/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/react-window/src/createGridComponent.js","/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/react-window/src/VariableSizeGrid.js","/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/react-window/src/createListComponent.js","/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/react-window/src/VariableSizeList.js","/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/react-window/src/FixedSizeGrid.js","/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/react-window/src/FixedSizeList.js","/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/react-window/src/shallowDiffers.js","/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/react-window/src/areEqual.js","/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/react-window/src/shouldComponentUpdate.js"],"sourcesContent":["// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\ntype ItemType = 'column' | 'row';\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\ntype InstanceProps = {|\n  columnMetadataMap: ItemMetadataMap,\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  lastMeasuredColumnIndex: number,\n  lastMeasuredRowIndex: number,\n  rowMetadataMap: ItemMetadataMap,\n|};\n\nconst getEstimatedTotalHeight = (\n  { rowCount }: Props<any>,\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getEstimatedTotalWidth = (\n  { columnCount }: Props<any>,\n  {\n    columnMetadataMap,\n    estimatedColumnWidth,\n    lastMeasuredColumnIndex,\n  }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getItemMetadata = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = itemSize(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  let itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      itemType,\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      itemType,\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(\n      itemType,\n      props,\n      middle,\n      instanceProps\n    ).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    itemType,\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getOffsetForIndexAndAlignment = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: InstanceProps,\n  scrollbarSize: number\n): number => {\n  const size = itemType === 'column' ? props.width : props.height;\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\n\n  // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n  const estimatedTotalSize =\n    itemType === 'column'\n      ? getEstimatedTotalWidth(props, instanceProps)\n      : getEstimatedTotalHeight(props, instanceProps);\n\n  const maxOffset = Math.max(\n    0,\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\n  );\n  const minOffset = Math.max(\n    0,\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\n  );\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\n\nconst VariableSizeGrid = createGridComponent({\n  getColumnOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\n\n  getColumnStartIndexForOffset: (\n    props: Props<any>,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\n\n  getColumnStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { columnCount, width } = props;\n\n    const itemMetadata = getItemMetadata(\n      'column',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollLeft + width;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  getColumnWidth: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.columnMetadataMap[index].size,\n\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n\n  getOffsetForColumnAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'column',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getOffsetForRowAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'row',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getRowOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\n\n  getRowHeight: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.rowMetadataMap[index].size,\n\n  getRowStartIndexForOffset: (\n    props: Props<any>,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\n\n  getRowStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { rowCount, height } = props;\n\n    const itemMetadata = getItemMetadata(\n      'row',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollTop + height;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const {\n      estimatedColumnWidth,\n      estimatedRowHeight,\n    } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {},\n    };\n\n    instance.resetAfterColumnIndex = (\n      columnIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterRowIndex = (\n      rowIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterIndices = ({\n      columnIndex,\n      rowIndex,\n      shouldForceUpdate = true,\n    }: {\n      columnIndex?: number,\n      rowIndex?: number,\n      shouldForceUpdate: boolean,\n    }) => {\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(\n          instanceProps.lastMeasuredColumnIndex,\n          columnIndex - 1\n        );\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(\n          instanceProps.lastMeasuredRowIndex,\n          rowIndex - 1\n        );\n      }\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      } else if (typeof rowHeight !== 'function') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeGrid;\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount, layout } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n      let scrollbarSize = 0;\n      if (this._outerRef) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (layout === 'vertical') {\n          scrollbarSize =\n            outerRef.scrollWidth > outerRef.clientWidth\n              ? getScrollbarSize()\n              : 0;\n        } else {\n          scrollbarSize =\n            outerRef.scrollHeight > outerRef.clientHeight\n              ? getScrollbarSize()\n              : 0;\n        }\n      }\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps,\n          scrollbarSize\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size + scrollbarSize\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst FixedSizeGrid = createGridComponent({\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\n    index * ((columnWidth: any): number),\n\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\n    ((columnWidth: any): number),\n\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\n    index * ((rowHeight: any): number),\n\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\n    ((rowHeight: any): number),\n\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\n    ((rowHeight: any): number) * rowCount,\n\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\n    ((columnWidth: any): number) * columnCount,\n\n  getOffsetForColumnAndAlignment: (\n    { columnCount, columnWidth, width }: Props<any>,\n    columnIndex: number,\n    align: ScrollToAlign,\n    scrollLeft: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastColumnOffset = Math.max(\n      0,\n      columnCount * ((columnWidth: any): number) - width\n    );\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * ((columnWidth: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      columnIndex * ((columnWidth: any): number) -\n        width +\n        scrollbarSize +\n        ((columnWidth: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getOffsetForRowAndAlignment: (\n    { rowHeight, height, rowCount }: Props<any>,\n    rowIndex: number,\n    align: ScrollToAlign,\n    scrollTop: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastRowOffset = Math.max(\n      0,\n      rowCount * ((rowHeight: any): number) - height\n    );\n    const maxOffset = Math.min(\n      lastRowOffset,\n      rowIndex * ((rowHeight: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      rowIndex * ((rowHeight: any): number) -\n        height +\n        scrollbarSize +\n        ((rowHeight: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: (\n    { columnWidth, columnCount }: Props<any>,\n    scrollLeft: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        Math.floor(scrollLeft / ((columnWidth: any): number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, columnCount, width }: Props<any>,\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * ((columnWidth: any): number);\n    const numVisibleColumns = Math.ceil(\n      (width + scrollLeft - left) / ((columnWidth: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, rowCount }: Props<any>,\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, rowCount, height }: Props<any>,\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * ((rowHeight: any): number);\n    const numVisibleRows = Math.ceil(\n      (height + scrollTop - top) / ((rowHeight: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        rowCount - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeGrid;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\ntype InstanceProps = any;\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) -\n        size +\n        ((itemSize: any): number) +\n        scrollbarSize\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","// @flow\n\nimport areEqual from './areEqual';\nimport shallowDiffers from './shallowDiffers';\n\n// Custom shouldComponentUpdate for class components.\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nexport default function shouldComponentUpdate(\n  nextProps: Object,\n  nextState: Object\n): boolean {\n  return (\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}