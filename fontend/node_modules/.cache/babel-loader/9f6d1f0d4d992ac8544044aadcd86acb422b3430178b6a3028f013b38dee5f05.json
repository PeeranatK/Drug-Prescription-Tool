{"ast":null,"code":"var defaultArray = [];\nvar emptyString = '';\nexport default function adjustCaretPosition(_ref) {\n  var _ref$previousConforme = _ref.previousConformedValue,\n    previousConformedValue = _ref$previousConforme === void 0 ? emptyString : _ref$previousConforme,\n    _ref$previousPlacehol = _ref.previousPlaceholder,\n    previousPlaceholder = _ref$previousPlacehol === void 0 ? emptyString : _ref$previousPlacehol,\n    _ref$currentCaretPosi = _ref.currentCaretPosition,\n    currentCaretPosition = _ref$currentCaretPosi === void 0 ? 0 : _ref$currentCaretPosi,\n    conformedValue = _ref.conformedValue,\n    rawValue = _ref.rawValue,\n    placeholderChar = _ref.placeholderChar,\n    placeholder = _ref.placeholder,\n    _ref$indexesOfPipedCh = _ref.indexesOfPipedChars,\n    indexesOfPipedChars = _ref$indexesOfPipedCh === void 0 ? defaultArray : _ref$indexesOfPipedCh,\n    _ref$caretTrapIndexes = _ref.caretTrapIndexes,\n    caretTrapIndexes = _ref$caretTrapIndexes === void 0 ? defaultArray : _ref$caretTrapIndexes;\n  if (currentCaretPosition === 0 || !rawValue.length) {\n    return 0;\n  } // Store lengths for faster performance?\n\n  var rawValueLength = rawValue.length;\n  var previousConformedValueLength = previousConformedValue.length;\n  var placeholderLength = placeholder.length;\n  var conformedValueLength = conformedValue.length; // This tells us how long the edit is. If user modified input from `(2__)` to `(243__)`,\n  // we know the user in this instance pasted two characters\n\n  var editLength = rawValueLength - previousConformedValueLength; // If the edit length is positive, that means the user is adding characters, not deleting.\n\n  var isAddition = editLength > 0; // This is the first raw value the user entered that needs to be conformed to mask\n\n  var isFirstRawValue = previousConformedValueLength === 0; // A partial multi-character edit happens when the user makes a partial selection in their\n  // input and edits that selection. That is going from `(123) 432-4348` to `() 432-4348` by\n  // selecting the first 3 digits and pressing backspace.\n  //\n  // Such cases can also happen when the user presses the backspace while holding down the ALT\n  // key.\n\n  var isPartialMultiCharEdit = editLength > 1 && !isFirstRawValue; // This algorithm doesn't support all cases of multi-character edits, so we just return\n  // the current caret position.\n  //\n  // This works fine for most cases.\n\n  if (isPartialMultiCharEdit) {\n    return currentCaretPosition;\n  } // For a mask like (111), if the `previousConformedValue` is (1__) and user attempts to enter\n  // `f` so the `rawValue` becomes (1f__), the new `conformedValue` would be (1__), which is the\n  // same as the original `previousConformedValue`. We handle this case differently for caret\n  // positioning.\n\n  var possiblyHasRejectedChar = isAddition && (previousConformedValue === conformedValue || conformedValue === placeholder);\n  var startingSearchIndex = 0;\n  var trackRightCharacter;\n  var targetChar;\n  if (possiblyHasRejectedChar) {\n    startingSearchIndex = currentCaretPosition - editLength;\n  } else {\n    // At this point in the algorithm, we want to know where the caret is right before the raw input\n    // has been conformed, and then see if we can find that same spot in the conformed input.\n    //\n    // We do that by seeing what character lies immediately before the caret, and then look for that\n    // same character in the conformed input and place the caret there.\n    // First, we need to normalize the inputs so that letter capitalization between raw input and\n    // conformed input wouldn't matter.\n    var normalizedConformedValue = conformedValue.toLowerCase();\n    var normalizedRawValue = rawValue.toLowerCase(); // Then we take all characters that come before where the caret currently is.\n\n    var leftHalfChars = normalizedRawValue.substr(0, currentCaretPosition).split(emptyString); // Now we find all the characters in the left half that exist in the conformed input\n    // This step ensures that we don't look for a character that was filtered out or rejected by `conformToMask`.\n\n    var intersection = leftHalfChars.filter(function (char) {\n      return normalizedConformedValue.indexOf(char) !== -1;\n    }); // The last character in the intersection is the character we want to look for in the conformed\n    // value and the one we want to adjust the caret close to\n\n    targetChar = intersection[intersection.length - 1]; // Calculate the number of mask characters in the previous placeholder\n    // from the start of the string up to the place where the caret is\n\n    var previousLeftMaskChars = previousPlaceholder.substr(0, intersection.length).split(emptyString).filter(function (char) {\n      return char !== placeholderChar;\n    }).length; // Calculate the number of mask characters in the current placeholder\n    // from the start of the string up to the place where the caret is\n\n    var leftMaskChars = placeholder.substr(0, intersection.length).split(emptyString).filter(function (char) {\n      return char !== placeholderChar;\n    }).length; // Has the number of mask characters up to the caret changed?\n\n    var masklengthChanged = leftMaskChars !== previousLeftMaskChars; // Detect if `targetChar` is a mask character and has moved to the left\n\n    var targetIsMaskMovingLeft = previousPlaceholder[intersection.length - 1] !== undefined && placeholder[intersection.length - 2] !== undefined && previousPlaceholder[intersection.length - 1] !== placeholderChar && previousPlaceholder[intersection.length - 1] !== placeholder[intersection.length - 1] && previousPlaceholder[intersection.length - 1] === placeholder[intersection.length - 2]; // If deleting and the `targetChar` `is a mask character and `masklengthChanged` is true\n    // or the mask is moving to the left, we can't use the selected `targetChar` any longer\n    // if we are not at the end of the string.\n    // In this case, change tracking strategy and track the character to the right of the caret.\n\n    if (!isAddition && (masklengthChanged || targetIsMaskMovingLeft) && previousLeftMaskChars > 0 && placeholder.indexOf(targetChar) > -1 && rawValue[currentCaretPosition] !== undefined) {\n      trackRightCharacter = true;\n      targetChar = rawValue[currentCaretPosition];\n    } // It is possible that `targetChar` will appear multiple times in the conformed value.\n    // We need to know not to select a character that looks like our target character from the placeholder or\n    // the piped characters, so we inspect the piped characters and the placeholder to see if they contain\n    // characters that match our target character.\n    // If the `conformedValue` got piped, we need to know which characters were piped in so that when we look for\n    // our `targetChar`, we don't select a piped char by mistake\n\n    var pipedChars = indexesOfPipedChars.map(function (index) {\n      return normalizedConformedValue[index];\n    }); // We need to know how many times the `targetChar` occurs in the piped characters.\n\n    var countTargetCharInPipedChars = pipedChars.filter(function (char) {\n      return char === targetChar;\n    }).length; // We need to know how many times it occurs in the intersection\n\n    var countTargetCharInIntersection = intersection.filter(function (char) {\n      return char === targetChar;\n    }).length; // We need to know if the placeholder contains characters that look like\n    // our `targetChar`, so we don't select one of those by mistake.\n\n    var countTargetCharInPlaceholder = placeholder.substr(0, placeholder.indexOf(placeholderChar)).split(emptyString).filter(function (char, index) {\n      return (\n        // Check if `char` is the same as our `targetChar`, so we account for it\n        char === targetChar &&\n        // but also make sure that both the `rawValue` and placeholder don't have the same character at the same\n        // index because if they are equal, that means we are already counting those characters in\n        // `countTargetCharInIntersection`\n        rawValue[index] !== char\n      );\n    }).length; // The number of times we need to see occurrences of the `targetChar` before we know it is the one we're looking\n    // for is:\n\n    var requiredNumberOfMatches = countTargetCharInPlaceholder + countTargetCharInIntersection + countTargetCharInPipedChars + (\n    // The character to the right of the caret isn't included in `intersection`\n    // so add one if we are tracking the character to the right\n    trackRightCharacter ? 1 : 0); // Now we start looking for the location of the `targetChar`.\n    // We keep looping forward and store the index in every iteration. Once we have encountered\n    // enough occurrences of the target character, we break out of the loop\n    // If are searching for the second `1` in `1214`, `startingSearchIndex` will point at `4`.\n\n    var numberOfEncounteredMatches = 0;\n    for (var i = 0; i < conformedValueLength; i++) {\n      var conformedValueChar = normalizedConformedValue[i];\n      startingSearchIndex = i + 1;\n      if (conformedValueChar === targetChar) {\n        numberOfEncounteredMatches++;\n      }\n      if (numberOfEncounteredMatches >= requiredNumberOfMatches) {\n        break;\n      }\n    }\n  } // At this point, if we simply return `startingSearchIndex` as the adjusted caret position,\n  // most cases would be handled. However, we want to fast forward or rewind the caret to the\n  // closest placeholder character if it happens to be in a non-editable spot. That's what the next\n  // logic is for.\n  // In case of addition, we fast forward.\n\n  if (isAddition) {\n    // We want to remember the last placeholder character encountered so that if the mask\n    // contains more characters after the last placeholder character, we don't forward the caret\n    // that far to the right. Instead, we stop it at the last encountered placeholder character.\n    var lastPlaceholderChar = startingSearchIndex;\n    for (var _i = startingSearchIndex; _i <= placeholderLength; _i++) {\n      if (placeholder[_i] === placeholderChar) {\n        lastPlaceholderChar = _i;\n      }\n      if (\n      // If we're adding, we can position the caret at the next placeholder character.\n      placeholder[_i] === placeholderChar ||\n      // If a caret trap was set by a mask function, we need to stop at the trap.\n      caretTrapIndexes.indexOf(_i) !== -1 ||\n      // This is the end of the placeholder. We cannot move any further. Let's put the caret there.\n      _i === placeholderLength) {\n        return lastPlaceholderChar;\n      }\n    }\n  } else {\n    // In case of deletion, we rewind.\n    if (trackRightCharacter) {\n      // Searching for the character that was to the right of the caret\n      // We start at `startingSearchIndex` - 1 because it includes one character extra to the right\n      for (var _i2 = startingSearchIndex - 1; _i2 >= 0; _i2--) {\n        // If tracking the character to the right of the cursor, we move to the left until\n        // we found the character and then place the caret right before it\n        if (\n        // `targetChar` should be in `conformedValue`, since it was in `rawValue`, just\n        // to the right of the caret\n        conformedValue[_i2] === targetChar ||\n        // If a caret trap was set by a mask function, we need to stop at the trap.\n        caretTrapIndexes.indexOf(_i2) !== -1 ||\n        // This is the beginning of the placeholder. We cannot move any further.\n        // Let's put the caret there.\n        _i2 === 0) {\n          return _i2;\n        }\n      }\n    } else {\n      // Searching for the first placeholder or caret trap to the left\n      for (var _i3 = startingSearchIndex; _i3 >= 0; _i3--) {\n        // If we're deleting, we stop the caret right before the placeholder character.\n        // For example, for mask `(111) 11`, current conformed input `(456) 86`. If user\n        // modifies input to `(456 86`. That is, they deleted the `)`, we place the caret\n        // right after the first `6`\n        if (\n        // If we're deleting, we can position the caret right before the placeholder character\n        placeholder[_i3 - 1] === placeholderChar ||\n        // If a caret trap was set by a mask function, we need to stop at the trap.\n        caretTrapIndexes.indexOf(_i3) !== -1 ||\n        // This is the beginning of the placeholder. We cannot move any further.\n        // Let's put the caret there.\n        _i3 === 0) {\n          return _i3;\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["defaultArray","emptyString","adjustCaretPosition","_ref","_ref$previousConforme","previousConformedValue","_ref$previousPlacehol","previousPlaceholder","_ref$currentCaretPosi","currentCaretPosition","conformedValue","rawValue","placeholderChar","placeholder","_ref$indexesOfPipedCh","indexesOfPipedChars","_ref$caretTrapIndexes","caretTrapIndexes","length","rawValueLength","previousConformedValueLength","placeholderLength","conformedValueLength","editLength","isAddition","isFirstRawValue","isPartialMultiCharEdit","possiblyHasRejectedChar","startingSearchIndex","trackRightCharacter","targetChar","normalizedConformedValue","toLowerCase","normalizedRawValue","leftHalfChars","substr","split","intersection","filter","char","indexOf","previousLeftMaskChars","leftMaskChars","masklengthChanged","targetIsMaskMovingLeft","undefined","pipedChars","map","index","countTargetCharInPipedChars","countTargetCharInIntersection","countTargetCharInPlaceholder","requiredNumberOfMatches","numberOfEncounteredMatches","i","conformedValueChar","lastPlaceholderChar","_i","_i2","_i3"],"sources":["/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/rsuite/esm/MaskedInput/adjustCaretPosition.js"],"sourcesContent":["var defaultArray = [];\nvar emptyString = '';\nexport default function adjustCaretPosition(_ref) {\n  var _ref$previousConforme = _ref.previousConformedValue,\n      previousConformedValue = _ref$previousConforme === void 0 ? emptyString : _ref$previousConforme,\n      _ref$previousPlacehol = _ref.previousPlaceholder,\n      previousPlaceholder = _ref$previousPlacehol === void 0 ? emptyString : _ref$previousPlacehol,\n      _ref$currentCaretPosi = _ref.currentCaretPosition,\n      currentCaretPosition = _ref$currentCaretPosi === void 0 ? 0 : _ref$currentCaretPosi,\n      conformedValue = _ref.conformedValue,\n      rawValue = _ref.rawValue,\n      placeholderChar = _ref.placeholderChar,\n      placeholder = _ref.placeholder,\n      _ref$indexesOfPipedCh = _ref.indexesOfPipedChars,\n      indexesOfPipedChars = _ref$indexesOfPipedCh === void 0 ? defaultArray : _ref$indexesOfPipedCh,\n      _ref$caretTrapIndexes = _ref.caretTrapIndexes,\n      caretTrapIndexes = _ref$caretTrapIndexes === void 0 ? defaultArray : _ref$caretTrapIndexes;\n\n  if (currentCaretPosition === 0 || !rawValue.length) {\n    return 0;\n  } // Store lengths for faster performance?\n\n\n  var rawValueLength = rawValue.length;\n  var previousConformedValueLength = previousConformedValue.length;\n  var placeholderLength = placeholder.length;\n  var conformedValueLength = conformedValue.length; // This tells us how long the edit is. If user modified input from `(2__)` to `(243__)`,\n  // we know the user in this instance pasted two characters\n\n  var editLength = rawValueLength - previousConformedValueLength; // If the edit length is positive, that means the user is adding characters, not deleting.\n\n  var isAddition = editLength > 0; // This is the first raw value the user entered that needs to be conformed to mask\n\n  var isFirstRawValue = previousConformedValueLength === 0; // A partial multi-character edit happens when the user makes a partial selection in their\n  // input and edits that selection. That is going from `(123) 432-4348` to `() 432-4348` by\n  // selecting the first 3 digits and pressing backspace.\n  //\n  // Such cases can also happen when the user presses the backspace while holding down the ALT\n  // key.\n\n  var isPartialMultiCharEdit = editLength > 1 && !isFirstRawValue; // This algorithm doesn't support all cases of multi-character edits, so we just return\n  // the current caret position.\n  //\n  // This works fine for most cases.\n\n  if (isPartialMultiCharEdit) {\n    return currentCaretPosition;\n  } // For a mask like (111), if the `previousConformedValue` is (1__) and user attempts to enter\n  // `f` so the `rawValue` becomes (1f__), the new `conformedValue` would be (1__), which is the\n  // same as the original `previousConformedValue`. We handle this case differently for caret\n  // positioning.\n\n\n  var possiblyHasRejectedChar = isAddition && (previousConformedValue === conformedValue || conformedValue === placeholder);\n  var startingSearchIndex = 0;\n  var trackRightCharacter;\n  var targetChar;\n\n  if (possiblyHasRejectedChar) {\n    startingSearchIndex = currentCaretPosition - editLength;\n  } else {\n    // At this point in the algorithm, we want to know where the caret is right before the raw input\n    // has been conformed, and then see if we can find that same spot in the conformed input.\n    //\n    // We do that by seeing what character lies immediately before the caret, and then look for that\n    // same character in the conformed input and place the caret there.\n    // First, we need to normalize the inputs so that letter capitalization between raw input and\n    // conformed input wouldn't matter.\n    var normalizedConformedValue = conformedValue.toLowerCase();\n    var normalizedRawValue = rawValue.toLowerCase(); // Then we take all characters that come before where the caret currently is.\n\n    var leftHalfChars = normalizedRawValue.substr(0, currentCaretPosition).split(emptyString); // Now we find all the characters in the left half that exist in the conformed input\n    // This step ensures that we don't look for a character that was filtered out or rejected by `conformToMask`.\n\n    var intersection = leftHalfChars.filter(function (char) {\n      return normalizedConformedValue.indexOf(char) !== -1;\n    }); // The last character in the intersection is the character we want to look for in the conformed\n    // value and the one we want to adjust the caret close to\n\n    targetChar = intersection[intersection.length - 1]; // Calculate the number of mask characters in the previous placeholder\n    // from the start of the string up to the place where the caret is\n\n    var previousLeftMaskChars = previousPlaceholder.substr(0, intersection.length).split(emptyString).filter(function (char) {\n      return char !== placeholderChar;\n    }).length; // Calculate the number of mask characters in the current placeholder\n    // from the start of the string up to the place where the caret is\n\n    var leftMaskChars = placeholder.substr(0, intersection.length).split(emptyString).filter(function (char) {\n      return char !== placeholderChar;\n    }).length; // Has the number of mask characters up to the caret changed?\n\n    var masklengthChanged = leftMaskChars !== previousLeftMaskChars; // Detect if `targetChar` is a mask character and has moved to the left\n\n    var targetIsMaskMovingLeft = previousPlaceholder[intersection.length - 1] !== undefined && placeholder[intersection.length - 2] !== undefined && previousPlaceholder[intersection.length - 1] !== placeholderChar && previousPlaceholder[intersection.length - 1] !== placeholder[intersection.length - 1] && previousPlaceholder[intersection.length - 1] === placeholder[intersection.length - 2]; // If deleting and the `targetChar` `is a mask character and `masklengthChanged` is true\n    // or the mask is moving to the left, we can't use the selected `targetChar` any longer\n    // if we are not at the end of the string.\n    // In this case, change tracking strategy and track the character to the right of the caret.\n\n    if (!isAddition && (masklengthChanged || targetIsMaskMovingLeft) && previousLeftMaskChars > 0 && placeholder.indexOf(targetChar) > -1 && rawValue[currentCaretPosition] !== undefined) {\n      trackRightCharacter = true;\n      targetChar = rawValue[currentCaretPosition];\n    } // It is possible that `targetChar` will appear multiple times in the conformed value.\n    // We need to know not to select a character that looks like our target character from the placeholder or\n    // the piped characters, so we inspect the piped characters and the placeholder to see if they contain\n    // characters that match our target character.\n    // If the `conformedValue` got piped, we need to know which characters were piped in so that when we look for\n    // our `targetChar`, we don't select a piped char by mistake\n\n\n    var pipedChars = indexesOfPipedChars.map(function (index) {\n      return normalizedConformedValue[index];\n    }); // We need to know how many times the `targetChar` occurs in the piped characters.\n\n    var countTargetCharInPipedChars = pipedChars.filter(function (char) {\n      return char === targetChar;\n    }).length; // We need to know how many times it occurs in the intersection\n\n    var countTargetCharInIntersection = intersection.filter(function (char) {\n      return char === targetChar;\n    }).length; // We need to know if the placeholder contains characters that look like\n    // our `targetChar`, so we don't select one of those by mistake.\n\n    var countTargetCharInPlaceholder = placeholder.substr(0, placeholder.indexOf(placeholderChar)).split(emptyString).filter(function (char, index) {\n      return (// Check if `char` is the same as our `targetChar`, so we account for it\n        char === targetChar && // but also make sure that both the `rawValue` and placeholder don't have the same character at the same\n        // index because if they are equal, that means we are already counting those characters in\n        // `countTargetCharInIntersection`\n        rawValue[index] !== char\n      );\n    }).length; // The number of times we need to see occurrences of the `targetChar` before we know it is the one we're looking\n    // for is:\n\n    var requiredNumberOfMatches = countTargetCharInPlaceholder + countTargetCharInIntersection + countTargetCharInPipedChars + ( // The character to the right of the caret isn't included in `intersection`\n    // so add one if we are tracking the character to the right\n    trackRightCharacter ? 1 : 0); // Now we start looking for the location of the `targetChar`.\n    // We keep looping forward and store the index in every iteration. Once we have encountered\n    // enough occurrences of the target character, we break out of the loop\n    // If are searching for the second `1` in `1214`, `startingSearchIndex` will point at `4`.\n\n    var numberOfEncounteredMatches = 0;\n\n    for (var i = 0; i < conformedValueLength; i++) {\n      var conformedValueChar = normalizedConformedValue[i];\n      startingSearchIndex = i + 1;\n\n      if (conformedValueChar === targetChar) {\n        numberOfEncounteredMatches++;\n      }\n\n      if (numberOfEncounteredMatches >= requiredNumberOfMatches) {\n        break;\n      }\n    }\n  } // At this point, if we simply return `startingSearchIndex` as the adjusted caret position,\n  // most cases would be handled. However, we want to fast forward or rewind the caret to the\n  // closest placeholder character if it happens to be in a non-editable spot. That's what the next\n  // logic is for.\n  // In case of addition, we fast forward.\n\n\n  if (isAddition) {\n    // We want to remember the last placeholder character encountered so that if the mask\n    // contains more characters after the last placeholder character, we don't forward the caret\n    // that far to the right. Instead, we stop it at the last encountered placeholder character.\n    var lastPlaceholderChar = startingSearchIndex;\n\n    for (var _i = startingSearchIndex; _i <= placeholderLength; _i++) {\n      if (placeholder[_i] === placeholderChar) {\n        lastPlaceholderChar = _i;\n      }\n\n      if ( // If we're adding, we can position the caret at the next placeholder character.\n      placeholder[_i] === placeholderChar || // If a caret trap was set by a mask function, we need to stop at the trap.\n      caretTrapIndexes.indexOf(_i) !== -1 || // This is the end of the placeholder. We cannot move any further. Let's put the caret there.\n      _i === placeholderLength) {\n        return lastPlaceholderChar;\n      }\n    }\n  } else {\n    // In case of deletion, we rewind.\n    if (trackRightCharacter) {\n      // Searching for the character that was to the right of the caret\n      // We start at `startingSearchIndex` - 1 because it includes one character extra to the right\n      for (var _i2 = startingSearchIndex - 1; _i2 >= 0; _i2--) {\n        // If tracking the character to the right of the cursor, we move to the left until\n        // we found the character and then place the caret right before it\n        if ( // `targetChar` should be in `conformedValue`, since it was in `rawValue`, just\n        // to the right of the caret\n        conformedValue[_i2] === targetChar || // If a caret trap was set by a mask function, we need to stop at the trap.\n        caretTrapIndexes.indexOf(_i2) !== -1 || // This is the beginning of the placeholder. We cannot move any further.\n        // Let's put the caret there.\n        _i2 === 0) {\n          return _i2;\n        }\n      }\n    } else {\n      // Searching for the first placeholder or caret trap to the left\n      for (var _i3 = startingSearchIndex; _i3 >= 0; _i3--) {\n        // If we're deleting, we stop the caret right before the placeholder character.\n        // For example, for mask `(111) 11`, current conformed input `(456) 86`. If user\n        // modifies input to `(456 86`. That is, they deleted the `)`, we place the caret\n        // right after the first `6`\n        if ( // If we're deleting, we can position the caret right before the placeholder character\n        placeholder[_i3 - 1] === placeholderChar || // If a caret trap was set by a mask function, we need to stop at the trap.\n        caretTrapIndexes.indexOf(_i3) !== -1 || // This is the beginning of the placeholder. We cannot move any further.\n        // Let's put the caret there.\n        _i3 === 0) {\n          return _i3;\n        }\n      }\n    }\n  }\n}"],"mappings":"AAAA,IAAIA,YAAY,GAAG,EAAE;AACrB,IAAIC,WAAW,GAAG,EAAE;AACpB,eAAe,SAASC,mBAAmB,CAACC,IAAI,EAAE;EAChD,IAAIC,qBAAqB,GAAGD,IAAI,CAACE,sBAAsB;IACnDA,sBAAsB,GAAGD,qBAAqB,KAAK,KAAK,CAAC,GAAGH,WAAW,GAAGG,qBAAqB;IAC/FE,qBAAqB,GAAGH,IAAI,CAACI,mBAAmB;IAChDA,mBAAmB,GAAGD,qBAAqB,KAAK,KAAK,CAAC,GAAGL,WAAW,GAAGK,qBAAqB;IAC5FE,qBAAqB,GAAGL,IAAI,CAACM,oBAAoB;IACjDA,oBAAoB,GAAGD,qBAAqB,KAAK,KAAK,CAAC,GAAG,CAAC,GAAGA,qBAAqB;IACnFE,cAAc,GAAGP,IAAI,CAACO,cAAc;IACpCC,QAAQ,GAAGR,IAAI,CAACQ,QAAQ;IACxBC,eAAe,GAAGT,IAAI,CAACS,eAAe;IACtCC,WAAW,GAAGV,IAAI,CAACU,WAAW;IAC9BC,qBAAqB,GAAGX,IAAI,CAACY,mBAAmB;IAChDA,mBAAmB,GAAGD,qBAAqB,KAAK,KAAK,CAAC,GAAGd,YAAY,GAAGc,qBAAqB;IAC7FE,qBAAqB,GAAGb,IAAI,CAACc,gBAAgB;IAC7CA,gBAAgB,GAAGD,qBAAqB,KAAK,KAAK,CAAC,GAAGhB,YAAY,GAAGgB,qBAAqB;EAE9F,IAAIP,oBAAoB,KAAK,CAAC,IAAI,CAACE,QAAQ,CAACO,MAAM,EAAE;IAClD,OAAO,CAAC;EACV,CAAC,CAAC;;EAGF,IAAIC,cAAc,GAAGR,QAAQ,CAACO,MAAM;EACpC,IAAIE,4BAA4B,GAAGf,sBAAsB,CAACa,MAAM;EAChE,IAAIG,iBAAiB,GAAGR,WAAW,CAACK,MAAM;EAC1C,IAAII,oBAAoB,GAAGZ,cAAc,CAACQ,MAAM,CAAC,CAAC;EAClD;;EAEA,IAAIK,UAAU,GAAGJ,cAAc,GAAGC,4BAA4B,CAAC,CAAC;;EAEhE,IAAII,UAAU,GAAGD,UAAU,GAAG,CAAC,CAAC,CAAC;;EAEjC,IAAIE,eAAe,GAAGL,4BAA4B,KAAK,CAAC,CAAC,CAAC;EAC1D;EACA;EACA;EACA;EACA;;EAEA,IAAIM,sBAAsB,GAAGH,UAAU,GAAG,CAAC,IAAI,CAACE,eAAe,CAAC,CAAC;EACjE;EACA;EACA;;EAEA,IAAIC,sBAAsB,EAAE;IAC1B,OAAOjB,oBAAoB;EAC7B,CAAC,CAAC;EACF;EACA;EACA;;EAGA,IAAIkB,uBAAuB,GAAGH,UAAU,KAAKnB,sBAAsB,KAAKK,cAAc,IAAIA,cAAc,KAAKG,WAAW,CAAC;EACzH,IAAIe,mBAAmB,GAAG,CAAC;EAC3B,IAAIC,mBAAmB;EACvB,IAAIC,UAAU;EAEd,IAAIH,uBAAuB,EAAE;IAC3BC,mBAAmB,GAAGnB,oBAAoB,GAAGc,UAAU;EACzD,CAAC,MAAM;IACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIQ,wBAAwB,GAAGrB,cAAc,CAACsB,WAAW,EAAE;IAC3D,IAAIC,kBAAkB,GAAGtB,QAAQ,CAACqB,WAAW,EAAE,CAAC,CAAC;;IAEjD,IAAIE,aAAa,GAAGD,kBAAkB,CAACE,MAAM,CAAC,CAAC,EAAE1B,oBAAoB,CAAC,CAAC2B,KAAK,CAACnC,WAAW,CAAC,CAAC,CAAC;IAC3F;;IAEA,IAAIoC,YAAY,GAAGH,aAAa,CAACI,MAAM,CAAC,UAAUC,IAAI,EAAE;MACtD,OAAOR,wBAAwB,CAACS,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC,CAAC;IACJ;;IAEAT,UAAU,GAAGO,YAAY,CAACA,YAAY,CAACnB,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IACpD;;IAEA,IAAIuB,qBAAqB,GAAGlC,mBAAmB,CAAC4B,MAAM,CAAC,CAAC,EAAEE,YAAY,CAACnB,MAAM,CAAC,CAACkB,KAAK,CAACnC,WAAW,CAAC,CAACqC,MAAM,CAAC,UAAUC,IAAI,EAAE;MACvH,OAAOA,IAAI,KAAK3B,eAAe;IACjC,CAAC,CAAC,CAACM,MAAM,CAAC,CAAC;IACX;;IAEA,IAAIwB,aAAa,GAAG7B,WAAW,CAACsB,MAAM,CAAC,CAAC,EAAEE,YAAY,CAACnB,MAAM,CAAC,CAACkB,KAAK,CAACnC,WAAW,CAAC,CAACqC,MAAM,CAAC,UAAUC,IAAI,EAAE;MACvG,OAAOA,IAAI,KAAK3B,eAAe;IACjC,CAAC,CAAC,CAACM,MAAM,CAAC,CAAC;;IAEX,IAAIyB,iBAAiB,GAAGD,aAAa,KAAKD,qBAAqB,CAAC,CAAC;;IAEjE,IAAIG,sBAAsB,GAAGrC,mBAAmB,CAAC8B,YAAY,CAACnB,MAAM,GAAG,CAAC,CAAC,KAAK2B,SAAS,IAAIhC,WAAW,CAACwB,YAAY,CAACnB,MAAM,GAAG,CAAC,CAAC,KAAK2B,SAAS,IAAItC,mBAAmB,CAAC8B,YAAY,CAACnB,MAAM,GAAG,CAAC,CAAC,KAAKN,eAAe,IAAIL,mBAAmB,CAAC8B,YAAY,CAACnB,MAAM,GAAG,CAAC,CAAC,KAAKL,WAAW,CAACwB,YAAY,CAACnB,MAAM,GAAG,CAAC,CAAC,IAAIX,mBAAmB,CAAC8B,YAAY,CAACnB,MAAM,GAAG,CAAC,CAAC,KAAKL,WAAW,CAACwB,YAAY,CAACnB,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IACrY;IACA;IACA;;IAEA,IAAI,CAACM,UAAU,KAAKmB,iBAAiB,IAAIC,sBAAsB,CAAC,IAAIH,qBAAqB,GAAG,CAAC,IAAI5B,WAAW,CAAC2B,OAAO,CAACV,UAAU,CAAC,GAAG,CAAC,CAAC,IAAInB,QAAQ,CAACF,oBAAoB,CAAC,KAAKoC,SAAS,EAAE;MACrLhB,mBAAmB,GAAG,IAAI;MAC1BC,UAAU,GAAGnB,QAAQ,CAACF,oBAAoB,CAAC;IAC7C,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;;IAGA,IAAIqC,UAAU,GAAG/B,mBAAmB,CAACgC,GAAG,CAAC,UAAUC,KAAK,EAAE;MACxD,OAAOjB,wBAAwB,CAACiB,KAAK,CAAC;IACxC,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAIC,2BAA2B,GAAGH,UAAU,CAACR,MAAM,CAAC,UAAUC,IAAI,EAAE;MAClE,OAAOA,IAAI,KAAKT,UAAU;IAC5B,CAAC,CAAC,CAACZ,MAAM,CAAC,CAAC;;IAEX,IAAIgC,6BAA6B,GAAGb,YAAY,CAACC,MAAM,CAAC,UAAUC,IAAI,EAAE;MACtE,OAAOA,IAAI,KAAKT,UAAU;IAC5B,CAAC,CAAC,CAACZ,MAAM,CAAC,CAAC;IACX;;IAEA,IAAIiC,4BAA4B,GAAGtC,WAAW,CAACsB,MAAM,CAAC,CAAC,EAAEtB,WAAW,CAAC2B,OAAO,CAAC5B,eAAe,CAAC,CAAC,CAACwB,KAAK,CAACnC,WAAW,CAAC,CAACqC,MAAM,CAAC,UAAUC,IAAI,EAAES,KAAK,EAAE;MAC9I;QAAQ;QACNT,IAAI,KAAKT,UAAU;QAAI;QACvB;QACA;QACAnB,QAAQ,CAACqC,KAAK,CAAC,KAAKT;MAAI;IAE5B,CAAC,CAAC,CAACrB,MAAM,CAAC,CAAC;IACX;;IAEA,IAAIkC,uBAAuB,GAAGD,4BAA4B,GAAGD,6BAA6B,GAAGD,2BAA2B;IAAK;IAC7H;IACApB,mBAAmB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9B;IACA;IACA;;IAEA,IAAIwB,0BAA0B,GAAG,CAAC;IAElC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhC,oBAAoB,EAAEgC,CAAC,EAAE,EAAE;MAC7C,IAAIC,kBAAkB,GAAGxB,wBAAwB,CAACuB,CAAC,CAAC;MACpD1B,mBAAmB,GAAG0B,CAAC,GAAG,CAAC;MAE3B,IAAIC,kBAAkB,KAAKzB,UAAU,EAAE;QACrCuB,0BAA0B,EAAE;MAC9B;MAEA,IAAIA,0BAA0B,IAAID,uBAAuB,EAAE;QACzD;MACF;IACF;EACF,CAAC,CAAC;EACF;EACA;EACA;EACA;;EAGA,IAAI5B,UAAU,EAAE;IACd;IACA;IACA;IACA,IAAIgC,mBAAmB,GAAG5B,mBAAmB;IAE7C,KAAK,IAAI6B,EAAE,GAAG7B,mBAAmB,EAAE6B,EAAE,IAAIpC,iBAAiB,EAAEoC,EAAE,EAAE,EAAE;MAChE,IAAI5C,WAAW,CAAC4C,EAAE,CAAC,KAAK7C,eAAe,EAAE;QACvC4C,mBAAmB,GAAGC,EAAE;MAC1B;MAEA;MAAK;MACL5C,WAAW,CAAC4C,EAAE,CAAC,KAAK7C,eAAe;MAAI;MACvCK,gBAAgB,CAACuB,OAAO,CAACiB,EAAE,CAAC,KAAK,CAAC,CAAC;MAAI;MACvCA,EAAE,KAAKpC,iBAAiB,EAAE;QACxB,OAAOmC,mBAAmB;MAC5B;IACF;EACF,CAAC,MAAM;IACL;IACA,IAAI3B,mBAAmB,EAAE;MACvB;MACA;MACA,KAAK,IAAI6B,GAAG,GAAG9B,mBAAmB,GAAG,CAAC,EAAE8B,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;QACvD;QACA;QACA;QAAK;QACL;QACAhD,cAAc,CAACgD,GAAG,CAAC,KAAK5B,UAAU;QAAI;QACtCb,gBAAgB,CAACuB,OAAO,CAACkB,GAAG,CAAC,KAAK,CAAC,CAAC;QAAI;QACxC;QACAA,GAAG,KAAK,CAAC,EAAE;UACT,OAAOA,GAAG;QACZ;MACF;IACF,CAAC,MAAM;MACL;MACA,KAAK,IAAIC,GAAG,GAAG/B,mBAAmB,EAAE+B,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;QACnD;QACA;QACA;QACA;QACA;QAAK;QACL9C,WAAW,CAAC8C,GAAG,GAAG,CAAC,CAAC,KAAK/C,eAAe;QAAI;QAC5CK,gBAAgB,CAACuB,OAAO,CAACmB,GAAG,CAAC,KAAK,CAAC,CAAC;QAAI;QACxC;QACAA,GAAG,KAAK,CAAC,EAAE;UACT,OAAOA,GAAG;QACZ;MACF;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}