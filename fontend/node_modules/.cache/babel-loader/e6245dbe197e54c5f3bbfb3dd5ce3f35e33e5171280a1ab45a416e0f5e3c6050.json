{"ast":null,"code":"import { MixedType } from './MixedType';\nexport class DateType extends MixedType {\n  constructor(errorMessage) {\n    super('date');\n    super.pushRule({\n      onValid: value => !/Invalid|NaN/.test(new Date(value).toString()),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n  range(min, max) {\n    let errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.range;\n    super.pushRule({\n      onValid: value => new Date(value) >= new Date(min) && new Date(value) <= new Date(max),\n      errorMessage,\n      params: {\n        min,\n        max\n      }\n    });\n    return this;\n  }\n  min(min) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.min;\n    super.pushRule({\n      onValid: value => new Date(value) >= new Date(min),\n      errorMessage,\n      params: {\n        min\n      }\n    });\n    return this;\n  }\n  max(max) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.max;\n    super.pushRule({\n      onValid: value => new Date(value) <= new Date(max),\n      errorMessage,\n      params: {\n        max\n      }\n    });\n    return this;\n  }\n}\nexport default function getDateType(errorMessage) {\n  return new DateType(errorMessage);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AAIvC,OAAM,MAAOC,QAA+C,SAAQD,SAKnE;EACCE,YAAYC,YAAyB;IACnC,KAAK,CAAC,MAAM,CAAC;IACb,KAAK,CAACC,QAAQ,CAAC;MACbC,OAAO,EAAEC,KAAK,IAAI,CAAC,aAAa,CAACC,IAAI,CAAC,IAAIC,IAAI,CAACF,KAAK,CAAC,CAACG,QAAQ,EAAE,CAAC;MACjEN,YAAY,EAAEA,YAAY,IAAI,IAAI,CAACO,MAAM,CAACC;KAC3C,CAAC;EACJ;EAEAC,KAAK,CAACC,GAAkB,EAAEC,GAAkB,EAA8C;IAAA,IAA5CX,mFAA2B,IAAI,CAACO,MAAM,CAACE,KAAK;IACxF,KAAK,CAACR,QAAQ,CAAC;MACbC,OAAO,EAAEC,KAAK,IAAI,IAAIE,IAAI,CAACF,KAAK,CAAC,IAAI,IAAIE,IAAI,CAACK,GAAG,CAAC,IAAI,IAAIL,IAAI,CAACF,KAAK,CAAC,IAAI,IAAIE,IAAI,CAACM,GAAG,CAAC;MACtFX,YAAY;MACZY,MAAM,EAAE;QAAEF,GAAG;QAAEC;MAAG;KACnB,CAAC;IACF,OAAO,IAAI;EACb;EAEAD,GAAG,CAACA,GAAkB,EAA4C;IAAA,IAA1CV,mFAA2B,IAAI,CAACO,MAAM,CAACG,GAAG;IAChE,KAAK,CAACT,QAAQ,CAAC;MACbC,OAAO,EAAEC,KAAK,IAAI,IAAIE,IAAI,CAACF,KAAK,CAAC,IAAI,IAAIE,IAAI,CAACK,GAAG,CAAC;MAClDV,YAAY;MACZY,MAAM,EAAE;QAAEF;MAAG;KACd,CAAC;IACF,OAAO,IAAI;EACb;EAEAC,GAAG,CAACA,GAAkB,EAA4C;IAAA,IAA1CX,mFAA2B,IAAI,CAACO,MAAM,CAACI,GAAG;IAChE,KAAK,CAACV,QAAQ,CAAC;MACbC,OAAO,EAAEC,KAAK,IAAI,IAAIE,IAAI,CAACF,KAAK,CAAC,IAAI,IAAIE,IAAI,CAACM,GAAG,CAAC;MAClDX,YAAY;MACZY,MAAM,EAAE;QAAED;MAAG;KACd,CAAC;IACF,OAAO,IAAI;EACb;;AAGF,eAAc,SAAUE,WAAW,CAA6Bb,YAAgB;EAC9E,OAAO,IAAIF,QAAQ,CAAcE,YAAY,CAAC;AAChD","names":["MixedType","DateType","constructor","errorMessage","pushRule","onValid","value","test","Date","toString","locale","type","range","min","max","params","getDateType"],"sources":["/Users/peeranat/Desktop/Project/fontend/node_modules/schema-typed/src/DateType.ts"],"sourcesContent":["import { MixedType } from './MixedType';\nimport { ErrorMessageType } from './types';\nimport { DateTypeLocale } from './locales';\n\nexport class DateType<DataType = any, E = ErrorMessageType> extends MixedType<\n  string | Date,\n  DataType,\n  E,\n  DateTypeLocale\n> {\n  constructor(errorMessage?: E | string) {\n    super('date');\n    super.pushRule({\n      onValid: value => !/Invalid|NaN/.test(new Date(value).toString()),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  range(min: string | Date, max: string | Date, errorMessage: E | string = this.locale.range) {\n    super.pushRule({\n      onValid: value => new Date(value) >= new Date(min) && new Date(value) <= new Date(max),\n      errorMessage,\n      params: { min, max }\n    });\n    return this;\n  }\n\n  min(min: string | Date, errorMessage: E | string = this.locale.min) {\n    super.pushRule({\n      onValid: value => new Date(value) >= new Date(min),\n      errorMessage,\n      params: { min }\n    });\n    return this;\n  }\n\n  max(max: string | Date, errorMessage: E | string = this.locale.max) {\n    super.pushRule({\n      onValid: value => new Date(value) <= new Date(max),\n      errorMessage,\n      params: { max }\n    });\n    return this;\n  }\n}\n\nexport default function getDateType<DataType = any, E = string>(errorMessage?: E) {\n  return new DateType<DataType, E>(errorMessage);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}