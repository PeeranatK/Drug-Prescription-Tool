{"ast":null,"code":"import { MixedType } from './MixedType';\nexport class ArrayType extends MixedType {\n  constructor(errorMessage) {\n    super('array');\n    super.pushRule({\n      onValid: v => Array.isArray(v),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n  rangeLength(minLength, maxLength) {\n    let errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.rangeLength;\n    super.pushRule({\n      onValid: value => value.length >= minLength && value.length <= maxLength,\n      errorMessage,\n      params: {\n        minLength,\n        maxLength\n      }\n    });\n    return this;\n  }\n  minLength(minLength) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.minLength;\n    super.pushRule({\n      onValid: value => value.length >= minLength,\n      errorMessage,\n      params: {\n        minLength\n      }\n    });\n    return this;\n  }\n  maxLength(maxLength) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.maxLength;\n    super.pushRule({\n      onValid: value => value.length <= maxLength,\n      errorMessage,\n      params: {\n        maxLength\n      }\n    });\n    return this;\n  }\n  unrepeatable() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.unrepeatable;\n    super.pushRule({\n      onValid: items => {\n        const hash = {};\n        for (const i in items) {\n          if (hash[items[i]]) {\n            return false;\n          }\n          hash[items[i]] = true;\n        }\n        return true;\n      },\n      errorMessage\n    });\n    return this;\n  }\n  of(type) {\n    super.pushRule({\n      onValid: (items, data, filedName) => {\n        const checkResults = items.map((value, index) => {\n          const name = Array.isArray(filedName) ? [...filedName, `[${index}]`] : [filedName, `[${index}]`];\n          return type.check(value, data, name);\n        });\n        const hasError = !!checkResults.find(item => item === null || item === void 0 ? void 0 : item.hasError);\n        return {\n          hasError,\n          array: checkResults\n        };\n      }\n    });\n    return this;\n  }\n}\nexport default function getArrayType(errorMessage) {\n  return new ArrayType(errorMessage);\n}","map":{"version":3,"mappings":"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","names":["MixedType","ArrayType","constructor","errorMessage","pushRule","onValid","v","Array","isArray","locale","type","rangeLength","minLength","maxLength","value","length","params","unrepeatable","items","hash","i","of","data","filedName","checkResults","map","index","name","check","hasError","find","item","array","getArrayType"],"sources":["/Users/peeranat/Desktop/Project/fontend/node_modules/schema-typed/src/ArrayType.ts"],"sourcesContent":["import { MixedType } from './MixedType';\nimport { PlainObject, CheckResult, ErrorMessageType } from './types';\nimport { ArrayTypeLocale } from './locales';\n\nexport class ArrayType<DataType = any, E = ErrorMessageType> extends MixedType<\n  any[],\n  DataType,\n  E,\n  ArrayTypeLocale\n> {\n  constructor(errorMessage?: E | string) {\n    super('array');\n    super.pushRule({\n      onValid: v => Array.isArray(v),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  rangeLength(\n    minLength: number,\n    maxLength: number,\n    errorMessage: E | string = this.locale.rangeLength\n  ) {\n    super.pushRule({\n      onValid: (value: string[]) => value.length >= minLength && value.length <= maxLength,\n      errorMessage,\n      params: { minLength, maxLength }\n    });\n    return this;\n  }\n\n  minLength(minLength: number, errorMessage: E | string = this.locale.minLength) {\n    super.pushRule({\n      onValid: value => value.length >= minLength,\n      errorMessage,\n      params: { minLength }\n    });\n\n    return this;\n  }\n\n  maxLength(maxLength: number, errorMessage: E | string = this.locale.maxLength) {\n    super.pushRule({\n      onValid: value => value.length <= maxLength,\n      errorMessage,\n      params: { maxLength }\n    });\n    return this;\n  }\n\n  unrepeatable(errorMessage: E | string = this.locale.unrepeatable) {\n    super.pushRule({\n      onValid: items => {\n        const hash: PlainObject = {};\n        for (const i in items) {\n          if (hash[items[i]]) {\n            return false;\n          }\n          hash[items[i]] = true;\n        }\n        return true;\n      },\n      errorMessage\n    });\n\n    return this;\n  }\n\n  of(type: MixedType<any, DataType, E>) {\n    super.pushRule({\n      onValid: (items, data, filedName) => {\n        const checkResults = items.map((value, index) => {\n          const name = Array.isArray(filedName)\n            ? [...filedName, `[${index}]`]\n            : [filedName, `[${index}]`];\n\n          return type.check(value, data, name as string[]);\n        });\n        const hasError = !!checkResults.find(item => item?.hasError);\n\n        return {\n          hasError,\n          array: checkResults\n        } as CheckResult<string | E>;\n      }\n    });\n\n    return this;\n  }\n}\n\nexport default function getArrayType<DataType = any, E = string>(errorMessage?: E) {\n  return new ArrayType<DataType, E>(errorMessage);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}