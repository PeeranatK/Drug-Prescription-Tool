{"ast":null,"code":"import canUseDOM from '../canUseDOM';\nimport { camelize } from './stringFormatter';\nvar memoized = {};\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\nvar prefixRegex = new RegExp(\"^(\" + prefixes.join('|') + \")\");\nvar testStyle = canUseDOM ? document.createElement('div').style : {};\nfunction getWithPrefix(name) {\n  for (var i = 0; i < prefixes.length; i += 1) {\n    var prefixedName = prefixes[i] + name;\n    if (prefixedName in testStyle) {\n      return prefixedName;\n    }\n  }\n  return null;\n}\n/**\n * @param {string} property Name of a css property to check for.\n * @return {?string} property name supported in the browser, or null if not\n * supported.\n */\n\nfunction getVendorPrefixedName(property) {\n  var name = camelize(property);\n  if (memoized[name] === undefined) {\n    var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n    if (prefixRegex.test(capitalizedName)) {\n      throw new Error(\"getVendorPrefixedName must only be called with unprefixed\\n          CSS property names. It was called with \" + property);\n    }\n    memoized[name] = name in testStyle ? name : getWithPrefix(capitalizedName);\n  }\n  return memoized[name] || name;\n}\nexport default getVendorPrefixedName;","map":{"version":3,"names":["canUseDOM","camelize","memoized","prefixes","prefixRegex","RegExp","join","testStyle","document","createElement","style","getWithPrefix","name","i","length","prefixedName","getVendorPrefixedName","property","undefined","capitalizedName","charAt","toUpperCase","slice","test","Error"],"sources":["/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/dom-lib/esm/utils/getVendorPrefixedName.js"],"sourcesContent":["import canUseDOM from '../canUseDOM';\nimport { camelize } from './stringFormatter';\nvar memoized = {};\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\nvar prefixRegex = new RegExp(\"^(\" + prefixes.join('|') + \")\");\nvar testStyle = canUseDOM ? document.createElement('div').style : {};\n\nfunction getWithPrefix(name) {\n  for (var i = 0; i < prefixes.length; i += 1) {\n    var prefixedName = prefixes[i] + name;\n\n    if (prefixedName in testStyle) {\n      return prefixedName;\n    }\n  }\n\n  return null;\n}\n/**\n * @param {string} property Name of a css property to check for.\n * @return {?string} property name supported in the browser, or null if not\n * supported.\n */\n\n\nfunction getVendorPrefixedName(property) {\n  var name = camelize(property);\n\n  if (memoized[name] === undefined) {\n    var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n\n    if (prefixRegex.test(capitalizedName)) {\n      throw new Error(\"getVendorPrefixedName must only be called with unprefixed\\n          CSS property names. It was called with \" + property);\n    }\n\n    memoized[name] = name in testStyle ? name : getWithPrefix(capitalizedName);\n  }\n\n  return memoized[name] || name;\n}\n\nexport default getVendorPrefixedName;"],"mappings":"AAAA,OAAOA,SAAS,MAAM,cAAc;AACpC,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,IAAIC,QAAQ,GAAG,CAAC,CAAC;AACjB,IAAIC,QAAQ,GAAG,CAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;AAC3C,IAAIC,WAAW,GAAG,IAAIC,MAAM,CAAC,IAAI,GAAGF,QAAQ,CAACG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;AAC7D,IAAIC,SAAS,GAAGP,SAAS,GAAGQ,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAACC,KAAK,GAAG,CAAC,CAAC;AAEpE,SAASC,aAAa,CAACC,IAAI,EAAE;EAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,QAAQ,CAACW,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IAC3C,IAAIE,YAAY,GAAGZ,QAAQ,CAACU,CAAC,CAAC,GAAGD,IAAI;IAErC,IAAIG,YAAY,IAAIR,SAAS,EAAE;MAC7B,OAAOQ,YAAY;IACrB;EACF;EAEA,OAAO,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,qBAAqB,CAACC,QAAQ,EAAE;EACvC,IAAIL,IAAI,GAAGX,QAAQ,CAACgB,QAAQ,CAAC;EAE7B,IAAIf,QAAQ,CAACU,IAAI,CAAC,KAAKM,SAAS,EAAE;IAChC,IAAIC,eAAe,GAAGP,IAAI,CAACQ,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGT,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC;IAElE,IAAIlB,WAAW,CAACmB,IAAI,CAACJ,eAAe,CAAC,EAAE;MACrC,MAAM,IAAIK,KAAK,CAAC,8GAA8G,GAAGP,QAAQ,CAAC;IAC5I;IAEAf,QAAQ,CAACU,IAAI,CAAC,GAAGA,IAAI,IAAIL,SAAS,GAAGK,IAAI,GAAGD,aAAa,CAACQ,eAAe,CAAC;EAC5E;EAEA,OAAOjB,QAAQ,CAACU,IAAI,CAAC,IAAIA,IAAI;AAC/B;AAEA,eAAeI,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}