{"ast":null,"code":"var emptyArray = [];\nvar strCaretTrap = '[]';\nexport var defaultPlaceholderChar = '_';\nexport function convertMaskToPlaceholder(mask, placeholderChar) {\n  if (mask === void 0) {\n    mask = emptyArray;\n  }\n  if (placeholderChar === void 0) {\n    placeholderChar = defaultPlaceholderChar;\n  }\n  if (!Array.isArray(mask)) {\n    throw new Error('Text-mask:convertMaskToPlaceholder; The mask property must be an array.');\n  }\n  if (mask.indexOf(placeholderChar) !== -1) {\n    throw new Error('Placeholder character must not be used as part of the mask. Please specify a character ' + 'that is not present in your mask as your placeholder character.\\n\\n' + (\"The placeholder character that was received is: \" + JSON.stringify(placeholderChar) + \"\\n\\n\") + (\"The mask that was received is: \" + JSON.stringify(mask)));\n  }\n  return mask.map(function (char) {\n    return char instanceof RegExp ? placeholderChar : char;\n  }).join('');\n}\nexport function processCaretTraps(mask) {\n  var indexes = [];\n  var indexOfCaretTrap;\n  while (indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) {\n    indexes.push(indexOfCaretTrap);\n    mask.splice(indexOfCaretTrap, 1);\n  }\n  return {\n    maskWithoutCaretTraps: mask,\n    indexes: indexes\n  };\n}","map":{"version":3,"names":["emptyArray","strCaretTrap","defaultPlaceholderChar","convertMaskToPlaceholder","mask","placeholderChar","Array","isArray","Error","indexOf","JSON","stringify","map","char","RegExp","join","processCaretTraps","indexes","indexOfCaretTrap","push","splice","maskWithoutCaretTraps"],"sources":["/Users/peeranat/Desktop/Project/fontend/node_modules/rsuite/esm/MaskedInput/utilities.js"],"sourcesContent":["var emptyArray = [];\nvar strCaretTrap = '[]';\nexport var defaultPlaceholderChar = '_';\nexport function convertMaskToPlaceholder(mask, placeholderChar) {\n  if (mask === void 0) {\n    mask = emptyArray;\n  }\n\n  if (placeholderChar === void 0) {\n    placeholderChar = defaultPlaceholderChar;\n  }\n\n  if (!Array.isArray(mask)) {\n    throw new Error('Text-mask:convertMaskToPlaceholder; The mask property must be an array.');\n  }\n\n  if (mask.indexOf(placeholderChar) !== -1) {\n    throw new Error('Placeholder character must not be used as part of the mask. Please specify a character ' + 'that is not present in your mask as your placeholder character.\\n\\n' + (\"The placeholder character that was received is: \" + JSON.stringify(placeholderChar) + \"\\n\\n\") + (\"The mask that was received is: \" + JSON.stringify(mask)));\n  }\n\n  return mask.map(function (char) {\n    return char instanceof RegExp ? placeholderChar : char;\n  }).join('');\n}\nexport function processCaretTraps(mask) {\n  var indexes = [];\n  var indexOfCaretTrap;\n\n  while (indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) {\n    indexes.push(indexOfCaretTrap);\n    mask.splice(indexOfCaretTrap, 1);\n  }\n\n  return {\n    maskWithoutCaretTraps: mask,\n    indexes: indexes\n  };\n}"],"mappings":"AAAA,IAAIA,UAAU,GAAG,EAAE;AACnB,IAAIC,YAAY,GAAG,IAAI;AACvB,OAAO,IAAIC,sBAAsB,GAAG,GAAG;AACvC,OAAO,SAASC,wBAAwB,CAACC,IAAI,EAAEC,eAAe,EAAE;EAC9D,IAAID,IAAI,KAAK,KAAK,CAAC,EAAE;IACnBA,IAAI,GAAGJ,UAAU;EACnB;EAEA,IAAIK,eAAe,KAAK,KAAK,CAAC,EAAE;IAC9BA,eAAe,GAAGH,sBAAsB;EAC1C;EAEA,IAAI,CAACI,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;IACxB,MAAM,IAAII,KAAK,CAAC,yEAAyE,CAAC;EAC5F;EAEA,IAAIJ,IAAI,CAACK,OAAO,CAACJ,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE;IACxC,MAAM,IAAIG,KAAK,CAAC,yFAAyF,GAAG,qEAAqE,IAAI,kDAAkD,GAAGE,IAAI,CAACC,SAAS,CAACN,eAAe,CAAC,GAAG,MAAM,CAAC,IAAI,iCAAiC,GAAGK,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC,CAAC,CAAC;EACnV;EAEA,OAAOA,IAAI,CAACQ,GAAG,CAAC,UAAUC,IAAI,EAAE;IAC9B,OAAOA,IAAI,YAAYC,MAAM,GAAGT,eAAe,GAAGQ,IAAI;EACxD,CAAC,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;AACb;AACA,OAAO,SAASC,iBAAiB,CAACZ,IAAI,EAAE;EACtC,IAAIa,OAAO,GAAG,EAAE;EAChB,IAAIC,gBAAgB;EAEpB,OAAOA,gBAAgB,GAAGd,IAAI,CAACK,OAAO,CAACR,YAAY,CAAC,EAAEiB,gBAAgB,KAAK,CAAC,CAAC,EAAE;IAC7ED,OAAO,CAACE,IAAI,CAACD,gBAAgB,CAAC;IAC9Bd,IAAI,CAACgB,MAAM,CAACF,gBAAgB,EAAE,CAAC,CAAC;EAClC;EAEA,OAAO;IACLG,qBAAqB,EAAEjB,IAAI;IAC3Ba,OAAO,EAAEA;EACX,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}