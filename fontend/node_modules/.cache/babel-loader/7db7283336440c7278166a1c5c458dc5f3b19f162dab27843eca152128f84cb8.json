{"ast":null,"code":"var populated = false; // Browsers\n\nvar _ie;\nvar _firefox;\nvar _opera;\nvar _webkit;\nvar _chrome; // Actual IE browser for compatibility mode\n\nvar ieRealVersion; // Platforms\n\nvar _osx;\nvar _windows;\nvar _linux;\nvar _android; // Architectures\n\nvar win64; // Devices\n\nvar _iphone;\nvar _ipad;\nvar _native;\nvar _mobile;\nfunction populate() {\n  if (populated) {\n    return;\n  }\n  populated = true; // To work around buggy JS libraries that can't handle multi-digit\n  // version numbers, Opera 10's user agent string claims it's Opera\n  // 9, then later includes a Version/X.Y field:\n  //\n  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10\n\n  var uas = navigator.userAgent;\n  var agent = /(?:MSIE.(\\d+\\.\\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\\d+\\.\\d+))|(?:Opera(?:.+Version.|.)(\\d+\\.\\d+))|(?:AppleWebKit.(\\d+(?:\\.\\d+)?))|(?:Trident\\/\\d+\\.\\d+.*rv:(\\d+\\.\\d+))/.exec(uas);\n  var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);\n  _iphone = /\\b(iPhone|iP[ao]d)/.exec(uas);\n  _ipad = /\\b(iP[ao]d)/.exec(uas);\n  _android = /Android/i.exec(uas);\n  _native = /FBAN\\/\\w+;/i.exec(uas);\n  _mobile = /Mobile/i.exec(uas); // Note that the IE team blog would have you believe you should be checking\n  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming\n  // from either x64 or ia64;  so ultimately, you should just check for Win64\n  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit\n  // Windows will send 'WOW64' instead.\n\n  win64 = !!/Win64/.exec(uas);\n  if (agent) {\n    if (agent[1]) {\n      _ie = parseFloat(agent[1]);\n    } else {\n      _ie = agent[5] ? parseFloat(agent[5]) : NaN;\n    } // IE compatibility mode\n    // @ts-ignore\n\n    if (_ie && document && document.documentMode) {\n      // @ts-ignore\n      _ie = document.documentMode;\n    } // grab the \"true\" ie version from the trident token if available\n\n    var trident = /(?:Trident\\/(\\d+.\\d+))/.exec(uas);\n    ieRealVersion = trident ? parseFloat(trident[1]) + 4 : _ie;\n    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;\n    _opera = agent[3] ? parseFloat(agent[3]) : NaN;\n    _webkit = agent[4] ? parseFloat(agent[4]) : NaN;\n    if (_webkit) {\n      // We do not add the regexp to the above test, because it will always\n      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in\n      // the userAgent string.\n      agent = /(?:Chrome\\/(\\d+\\.\\d+))/.exec(uas);\n      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;\n    } else {\n      _chrome = NaN;\n    }\n  } else {\n    _ie = NaN;\n    _firefox = NaN;\n    _opera = NaN;\n    _chrome = NaN;\n    _webkit = NaN;\n  }\n  if (os) {\n    if (os[1]) {\n      // Detect OS X version.  If no version number matches, set osx to true.\n      // Version examples:  10, 10_6_1, 10.7\n      // Parses version number as a float, taking only first two sets of\n      // digits.  If only one set of digits is found, returns just the major\n      // version number.\n      var ver = /(?:Mac OS X (\\d+(?:[._]\\d+)?))/.exec(uas);\n      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;\n    } else {\n      _osx = false;\n    }\n    _windows = !!os[2];\n    _linux = !!os[3];\n  } else {\n    _osx = false;\n    _windows = false;\n    _linux = false;\n  }\n}\n/**\n * @deprecated\n */\n\nvar UserAgent = {\n  /**\n   *  Check if the UA is Internet Explorer.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  ie: function ie() {\n    return populate() || _ie;\n  },\n  /**\n   * Check if we're in Internet Explorer compatibility mode.\n   *\n   * @return bool true if in compatibility mode, false if\n   * not compatibility mode or not ie\n   */\n  ieCompatibilityMode: function ieCompatibilityMode() {\n    return populate() || ieRealVersion > _ie;\n  },\n  /**\n   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we\n   * only need this because Skype can't handle 64-bit IE yet.  We need to remove\n   * this when we don't need it -- tracked by #601957.\n   */\n  ie64: function ie64() {\n    return UserAgent.ie() && win64;\n  },\n  /**\n   *  Check if the UA is Firefox.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  firefox: function firefox() {\n    return populate() || _firefox;\n  },\n  /**\n   *  Check if the UA is Opera.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  opera: function opera() {\n    return populate() || _opera;\n  },\n  /**\n   *  Check if the UA is WebKit.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  webkit: function webkit() {\n    return populate() || _webkit;\n  },\n  /**\n   *  For Push\n   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit\n   */\n  safari: function safari() {\n    return UserAgent.webkit();\n  },\n  /**\n   *  Check if the UA is a Chrome browser.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  chrome: function chrome() {\n    return populate() || _chrome;\n  },\n  /**\n   *  Check if the user is running Windows.\n   *\n   *  @return bool `true' if the user's OS is Windows.\n   */\n  windows: function windows() {\n    return populate() || _windows;\n  },\n  /**\n   *  Check if the user is running Mac OS X.\n   *\n   *  @return float|bool   Returns a float if a version number is detected,\n   *                       otherwise true/false.\n   */\n  osx: function osx() {\n    return populate() || _osx;\n  },\n  /**\n   * Check if the user is running Linux.\n   *\n   * @return bool `true' if the user's OS is some flavor of Linux.\n   */\n  linux: function linux() {\n    return populate() || _linux;\n  },\n  /**\n   * Check if the user is running on an iPhone or iPod platform.\n   *\n   * @return bool `true' if the user is running some flavor of the\n   *    iPhone OS.\n   */\n  iphone: function iphone() {\n    return populate() || _iphone;\n  },\n  mobile: function mobile() {\n    return populate() || _iphone || _ipad || _android || _mobile;\n  },\n  // webviews inside of the native apps\n  nativeApp: function nativeApp() {\n    return populate() || _native;\n  },\n  android: function android() {\n    return populate() || _android;\n  },\n  ipad: function ipad() {\n    return populate() || _ipad;\n  }\n};\nexport default UserAgent;","map":{"version":3,"names":["populated","_ie","_firefox","_opera","_webkit","_chrome","ieRealVersion","_osx","_windows","_linux","_android","win64","_iphone","_ipad","_native","_mobile","populate","uas","navigator","userAgent","agent","exec","os","parseFloat","NaN","document","documentMode","trident","ver","replace","UserAgent","ie","ieCompatibilityMode","ie64","firefox","opera","webkit","safari","chrome","windows","osx","linux","iphone","mobile","nativeApp","android","ipad"],"sources":["/Users/peeranat/Desktop/Project copy 2/fontend/node_modules/dom-lib/esm/utils/UserAgent.js"],"sourcesContent":["var populated = false; // Browsers\n\nvar _ie;\n\nvar _firefox;\n\nvar _opera;\n\nvar _webkit;\n\nvar _chrome; // Actual IE browser for compatibility mode\n\n\nvar ieRealVersion; // Platforms\n\nvar _osx;\n\nvar _windows;\n\nvar _linux;\n\nvar _android; // Architectures\n\n\nvar win64; // Devices\n\nvar _iphone;\n\nvar _ipad;\n\nvar _native;\n\nvar _mobile;\n\nfunction populate() {\n  if (populated) {\n    return;\n  }\n\n  populated = true; // To work around buggy JS libraries that can't handle multi-digit\n  // version numbers, Opera 10's user agent string claims it's Opera\n  // 9, then later includes a Version/X.Y field:\n  //\n  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10\n\n  var uas = navigator.userAgent;\n  var agent = /(?:MSIE.(\\d+\\.\\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\\d+\\.\\d+))|(?:Opera(?:.+Version.|.)(\\d+\\.\\d+))|(?:AppleWebKit.(\\d+(?:\\.\\d+)?))|(?:Trident\\/\\d+\\.\\d+.*rv:(\\d+\\.\\d+))/.exec(uas);\n  var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);\n  _iphone = /\\b(iPhone|iP[ao]d)/.exec(uas);\n  _ipad = /\\b(iP[ao]d)/.exec(uas);\n  _android = /Android/i.exec(uas);\n  _native = /FBAN\\/\\w+;/i.exec(uas);\n  _mobile = /Mobile/i.exec(uas); // Note that the IE team blog would have you believe you should be checking\n  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming\n  // from either x64 or ia64;  so ultimately, you should just check for Win64\n  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit\n  // Windows will send 'WOW64' instead.\n\n  win64 = !!/Win64/.exec(uas);\n\n  if (agent) {\n    if (agent[1]) {\n      _ie = parseFloat(agent[1]);\n    } else {\n      _ie = agent[5] ? parseFloat(agent[5]) : NaN;\n    } // IE compatibility mode\n    // @ts-ignore\n\n\n    if (_ie && document && document.documentMode) {\n      // @ts-ignore\n      _ie = document.documentMode;\n    } // grab the \"true\" ie version from the trident token if available\n\n\n    var trident = /(?:Trident\\/(\\d+.\\d+))/.exec(uas);\n    ieRealVersion = trident ? parseFloat(trident[1]) + 4 : _ie;\n    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;\n    _opera = agent[3] ? parseFloat(agent[3]) : NaN;\n    _webkit = agent[4] ? parseFloat(agent[4]) : NaN;\n\n    if (_webkit) {\n      // We do not add the regexp to the above test, because it will always\n      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in\n      // the userAgent string.\n      agent = /(?:Chrome\\/(\\d+\\.\\d+))/.exec(uas);\n      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;\n    } else {\n      _chrome = NaN;\n    }\n  } else {\n    _ie = NaN;\n    _firefox = NaN;\n    _opera = NaN;\n    _chrome = NaN;\n    _webkit = NaN;\n  }\n\n  if (os) {\n    if (os[1]) {\n      // Detect OS X version.  If no version number matches, set osx to true.\n      // Version examples:  10, 10_6_1, 10.7\n      // Parses version number as a float, taking only first two sets of\n      // digits.  If only one set of digits is found, returns just the major\n      // version number.\n      var ver = /(?:Mac OS X (\\d+(?:[._]\\d+)?))/.exec(uas);\n      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;\n    } else {\n      _osx = false;\n    }\n\n    _windows = !!os[2];\n    _linux = !!os[3];\n  } else {\n    _osx = false;\n    _windows = false;\n    _linux = false;\n  }\n}\n/**\n * @deprecated\n */\n\n\nvar UserAgent = {\n  /**\n   *  Check if the UA is Internet Explorer.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  ie: function ie() {\n    return populate() || _ie;\n  },\n\n  /**\n   * Check if we're in Internet Explorer compatibility mode.\n   *\n   * @return bool true if in compatibility mode, false if\n   * not compatibility mode or not ie\n   */\n  ieCompatibilityMode: function ieCompatibilityMode() {\n    return populate() || ieRealVersion > _ie;\n  },\n\n  /**\n   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we\n   * only need this because Skype can't handle 64-bit IE yet.  We need to remove\n   * this when we don't need it -- tracked by #601957.\n   */\n  ie64: function ie64() {\n    return UserAgent.ie() && win64;\n  },\n\n  /**\n   *  Check if the UA is Firefox.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  firefox: function firefox() {\n    return populate() || _firefox;\n  },\n\n  /**\n   *  Check if the UA is Opera.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  opera: function opera() {\n    return populate() || _opera;\n  },\n\n  /**\n   *  Check if the UA is WebKit.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  webkit: function webkit() {\n    return populate() || _webkit;\n  },\n\n  /**\n   *  For Push\n   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit\n   */\n  safari: function safari() {\n    return UserAgent.webkit();\n  },\n\n  /**\n   *  Check if the UA is a Chrome browser.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  chrome: function chrome() {\n    return populate() || _chrome;\n  },\n\n  /**\n   *  Check if the user is running Windows.\n   *\n   *  @return bool `true' if the user's OS is Windows.\n   */\n  windows: function windows() {\n    return populate() || _windows;\n  },\n\n  /**\n   *  Check if the user is running Mac OS X.\n   *\n   *  @return float|bool   Returns a float if a version number is detected,\n   *                       otherwise true/false.\n   */\n  osx: function osx() {\n    return populate() || _osx;\n  },\n\n  /**\n   * Check if the user is running Linux.\n   *\n   * @return bool `true' if the user's OS is some flavor of Linux.\n   */\n  linux: function linux() {\n    return populate() || _linux;\n  },\n\n  /**\n   * Check if the user is running on an iPhone or iPod platform.\n   *\n   * @return bool `true' if the user is running some flavor of the\n   *    iPhone OS.\n   */\n  iphone: function iphone() {\n    return populate() || _iphone;\n  },\n  mobile: function mobile() {\n    return populate() || _iphone || _ipad || _android || _mobile;\n  },\n  // webviews inside of the native apps\n  nativeApp: function nativeApp() {\n    return populate() || _native;\n  },\n  android: function android() {\n    return populate() || _android;\n  },\n  ipad: function ipad() {\n    return populate() || _ipad;\n  }\n};\nexport default UserAgent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}